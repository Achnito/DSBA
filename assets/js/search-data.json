{
  
    
        "post0": {
            "title": "Data Science for Business Applications",
            "content": ". Introduction to the Data . In this project, we have chosen to work with an open dataset provided by Yelp (you can download and read more about the data set here). . Yelp is an online review platform that enables people to find user recommendations of a wide range of businesses - and write reviews of their own experiences. To give a review as user is asked to give a star rating on a scale from 1 to 5 and include a description of the experience the user had with the entity. . This dataset was made available for use in personal, educational and academic purposes. It is a subset consisting of reviews, businesses and users across 10 metropolitan areas. More specifically, it contains data on more than 8 million reviews, two-hundred-thousand businesses, and almost 2 million users. The dataset is downloaded as a compressed tar-file format. Uncompressed there are 5 json-files and a total of 9.8GB data - a rather huge dataset. . On a Data Science stand point this dataset is rather interesting as it contains a vast amount of data, including structured and unstructured data (text). For the more demanding project, Yelp has made an additional dataset available containing 200.000 photos that has been posted on their platform in connection with the reviews. These photos however, are not included in this project. . Problem Statement . After a thorough inspection of the documentation, we decided to use three main data sets: Business.json, review.json and user.json. Thus, check-ins and tips (shorter reviews) has been excluded from the analysis. . We found these datasets to be interesting for our project as they contain text reviews and additional related data about the users that has writes the reviews and the businesses that reviewed. This allows us to extract features of the data to gain important and actionable insights about the businesses and the markets they operate in. . Inspired by House of Cards (How Netflix Used Data Science to Create One of the Most Loved Shows Ever: House of Cards) we came up with an interesting subject for analysis - our problem statement: . Problem Statement . What are the features that seperates the best and worst performing businesses - and how can we use these insights to create a successful new business concept? . Description of the Datasets . A description of the dataset is listed in the documentation. Here, we provide you with a simplified description of the datasets: . Business.json . Contains bussiness data including location data, attributes and categories: . business_id: ID of the business | name: name of the business | address: address of the business | city: city of the business | state: state of the business | postal_code: postal code of the business | latitude: latitude of the business | longitude: longitude of the business | stars: average rating of the business | review_count: number of reviews received | is_open: 1 if the business is open, 0 otherwise | attributes: | categories: multiple categories of the business | hours: business opening hours | . Review.json . Contains full review text data including the user_id that wrote the review and the business_id the review was written for: . review_id: ID of the review | user_id: ID of the user | business_id: ID of the business | stars: stars given in review | date: time of review | text: the review | useful: number of people that found the review useful | funny: number of people that found the review funny | cool: number of people that found the review cool | . User.json . Contains user data including the user&#39;s friend mapping and all the metadata associated with the user. . user_id: ID of the review | name: name of the user | review_count: number of reviews given | yelping_since: user creation date | friends: the user’s friends as an array of user_ids | useful: number of useful vores sent by the user | funny: number of funny vores sent by the user | cool: number of cool vores sent by the user | fans: number of fans the user has | elite: years the user had elite status as an array. | average_stars: average star rating given by the user | compliments: number of times the user was complimented. | . Methodology (how to answer the question) . What are the features that seperates the best and worst performing businesses - and how can we use these insights to create a successful new business concept? . Steps of Analysis . Once, the location and business area is identified, we will further investigate the business landscape to understand which businesses are the most popular choices Then, looking at customers, we will try to filter out those users that are . Then, the data is preprocessed before the analysis can begin . Preprocessing (high-level description of the preprocessing) . To answer the question for analysis we will start by delimitting the data to represent a business category and location of interest. We do this as we assume that customer demand may wary across different locations and categories. . Moving on, we will look at the users and identify those that tend to be too negative or positive in their reviews. This is an important step, as these users might skew the results otherwise. . Similarly, the number of reviews assigned to a business is an important aspect to consider - the less amount of data the less representative. These businesses will therefore present unreliable results. In order to avoid this problem, we will filter out businesses that fail to exceed a number of reviews assigned to them. . Analysis . Further Data Exploration (Idris) Which businesses have the highest and lowest average score? (Idris) | Which categories are popular within the nightlife category? | Probability that a business is closed based on star rating? Crosstab (compare if business is open - see if there is positive or negative experience) - see Are there correlation between review scores and whether a business stays on or not? | . | . | Review insights (Andras) Natural Language Processing | Topic Modelling | What set the best performers and lowest performers apart? Gradual change (1 - 5)? If it holds true | Negative vs positive experience | . | SML Sentiment classification (Based on the word occurence the model categorizes whether the review is positive or negative) Bag of Words | Word contribution towards a negative/positive review | . | . | User insights (Kim) Network analysis on user’s friends (Kim) | User Analysis Who writes the most useful reviews? | . | . | . Methodology (how to answer the question) . What are the features that seperates the best and worst performing businesses - and how can we use these insights to create a successful new business concept? . Steps of Analysis . To anwer the question of interest, we will perform an exploratory data analysis (EDA) to gain an understanding of the business context and which factors that has proven a business successful or not. Here, we will investigate what business categories that the users are mostly interested in and where the demand is located. Furthermore, we explore which businesses that has been successful in attracting customers to their business and how well they succeed in satisfying the consumers&#39; needs. Finally, for the data exploration, we investigate the correlation between customer satisfaction and whether the business has gone out of business. . From the EDA a few businesses of interest will be further investigated by applying Topic Modeling to understand what features in the reviews that set the best performing businesses apart from the lowest performing businesses. These insights can help future businesses to design a better business model and know what the main complaints customers have and what their success criteria are. . Moreover, we plan to use the reviews (text) from review.json to experiment with Topic Modeling as well as to create a supervised machine learning (SML) model that can predict the experience (either positive or negative). The idea is to create a model that can predict if a customer will have a valuable experience based on different naratives. . Natural Language Processing &amp; Topic Modelling . Experience Classification . Once, the location and business area is identified, we will further investigate the business landscape to understand which businesses are the most popular choices Then, looking at customers, we will try to filter out those users that are . Then, the data is preprocessed before the analysis can begin . Analysis . Further Data Exploration (Idris) Which businesses have the highest and lowest average score? (Idris) | Which categories are popular within the nightlife category? | Probability that a business is closed based on star rating? Crosstab (compare if business is open - see if there is positive or negative experience) - see Are there correlation between review scores and whether a business stays on or not? | . | . | Review insights (Andras) Natural Language Processing | Topic Modelling | What set the best performers and lowest performers apart? Gradual change (1 - 5)? If it holds true | Negative vs positive experience | . | SML Sentiment classification (Based on the word occurence the model categorizes whether the review is positive or negative) Bag of Words | Word contribution towards a negative/positive review | . | . | User insights (Kim) Network analysis on user’s friends (Kim) | User Analysis Who writes the most useful reviews? | . | . | . . Review.json contains the actual review of the respective business as well the corresponding “review star”. Lastly, user.json contains information about the user who provided the review. . Some of the useful columns that we thought would use are the average review score of the user, the “usefulness” of the user (an integer value, that represents how many other “yelpers” thought that this user provided valuable feedback) and the users friend list. . We intended to conduct a network analysis based on the information that we have from user.json and the average review score of the users proved to be of value, as we could use this to clean the data set from “extreme” behaviour (people who are “notorious complainers” or from users who uprated a friend’s restaurant). . Moreover, we planned to use the reviews (text) from review.json to experiment with Topic Modeling as well as to create a SML model that predicts the experience (binary classifier) of the reviews. Despite the fact that the reviews have stars, we thought this would be a great opportunity to practice our skills, therefore we created a mapping from stars to experience. . Lastly, the business.json file was intended to be used to learn facts about businesses. . User_id and business_id columns were used to merge the data sources coming from different json files. . Limitation: . We only read in 1,000,000 lines from the review.json as well as from the user.json. Those 2 data sets were rather large, and our computers lacked the necessary memory to work with them. What this means is that we “lost” some information, however we thought that this would not interfere with our ability to demonstrate our proficiency of the newly acquired methods and tools. (Data preprocessing, EDA, Topic Modeling, SML, etc.) Eventually, our “final” data set (csv) reached a size of 1 GB, thus we had plenty of data to work with. . . . Business Context . This section elaborates on the relevance of our analysis and methods utilized in this paper for business-decision purposes. . The main purpose with this paper is to allow a chosen category of businesses, in a specific area, to filter relevant reviews and based on this, make better-informed choices. In this paper we discover the most popular categories and cities that have been reviewed. Based on that, we chose to delve into Phoenix with relatively high demand(reviews) and low market saturation. We conduct a thorough sentiment analysis on the negative and positive reviews, which allows the businesses to grasp an understanding of what their customers are satisfied and dissatisfied about. This entails a comprehension of what facets to improve in the various nightlife entities. By also identifying the customers that tend to be extremely positive and negative, we aim to exclude the reviews that tend to be too extreme in order to reduce the biases in our project. Specifically, when analysing the nightlife in Phoenix, we figure out the most popular nightlife categories, which draws a picture of what new entrants should consider opening in order to increase the success rate at launch. ((((Write about topic modeling)))) . . Preprocessing Steps . To prepare our data for analysis we will start by delimitting the data to represent a business category and location of interest. We do this as we assume that customer demand may wary across different locations and categories. . Moving on, we will look at the users and identify those that tend to be too negative or positive in their reviews. This is an important step, as some users might be “notorious complainers” and thus might skew the results. . Similarly, the number of reviews assigned to a business is an important aspect to consider - the less amount of data the less representative. These businesses will therefore present unreliable results. In order to avoid this problem, we will filter out businesses that fail to exceed a number of reviews assigned to them. . Installation &amp; Libraries . #Installations ! pip install wordcloud #Imports import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt %matplotlib inline from wordcloud import Wordcloud from sklearn import metric from sklearn import decomposition from sklearn.model_selection import train_test_split from sklearn.model_selection import RandomizedSearchCV from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer import sklearn.utils as utils from sklearn.naive_bayes import MultinomialNB import joblib as joblib from google.colab import files #Use to upload single files from local directory from google.colab import drive #Use to mount google drive to access documents saved in the cloud . . Get Data . drive.mount(&#39;/content/drive&#39;) #Mounts Google Drive that holds the data. . . Mounted at /content/drive . . Create data set top categories.ipynb . Create a CSV file . The original file is downloaded from Yelp and we create a subset that contains the useful data. . business_json_path = &#39;D:/projects/NLP project DS/yelp_academic_dataset_business.json&#39; business = pd.read_json(business_json_path, lines=True) business.head() . . business_id name address city state postal_code latitude longitude stars review_count is_open attributes categories hours . 0 f9NumwFMBDn751xgFiRbNA | The Range At Lake Norman | 10913 Bailey Rd | Cornelius | NC | 28031 | 35.462724 | -80.852612 | 3.5 | 36 | 1 | {&#39;BusinessAcceptsCreditCards&#39;: &#39;True&#39;, &#39;BikePa... | Active Life, Gun/Rifle Ranges, Guns &amp; Ammo, Sh... | {&#39;Monday&#39;: &#39;10:0-18:0&#39;, &#39;Tuesday&#39;: &#39;11:0-20:0&#39;... | . 1 Yzvjg0SayhoZgCljUJRF9Q | Carlos Santo, NMD | 8880 E Via Linda, Ste 107 | Scottsdale | AZ | 85258 | 33.569404 | -111.890264 | 5.0 | 4 | 1 | {&#39;GoodForKids&#39;: &#39;True&#39;, &#39;ByAppointmentOnly&#39;: &#39;... | Health &amp; Medical, Fitness &amp; Instruction, Yoga,... | None | . 2 XNoUzKckATkOD1hP6vghZg | Felinus | 3554 Rue Notre-Dame O | Montreal | QC | H4C 1P4 | 45.479984 | -73.580070 | 5.0 | 5 | 1 | None | Pets, Pet Services, Pet Groomers | None | . 3 6OAZjbxqM5ol29BuHsil3w | Nevada House of Hose | 1015 Sharp Cir | North Las Vegas | NV | 89030 | 36.219728 | -115.127725 | 2.5 | 3 | 0 | {&#39;BusinessAcceptsCreditCards&#39;: &#39;True&#39;, &#39;ByAppo... | Hardware Stores, Home Services, Building Suppl... | {&#39;Monday&#39;: &#39;7:0-16:0&#39;, &#39;Tuesday&#39;: &#39;7:0-16:0&#39;, ... | . 4 51M2Kk903DFYI6gnB5I6SQ | USE MY GUY SERVICES LLC | 4827 E Downing Cir | Mesa | AZ | 85205 | 33.428065 | -111.726648 | 4.5 | 26 | 1 | {&#39;BusinessAcceptsCreditCards&#39;: &#39;True&#39;, &#39;ByAppo... | Home Services, Plumbing, Electricians, Handyma... | {&#39;Monday&#39;: &#39;0:0-0:0&#39;, &#39;Tuesday&#39;: &#39;9:0-16:0&#39;, &#39;... | . drop_columns = [&#39;address&#39;, &#39;latitude&#39;, &#39;longitude&#39;, &#39;hours&#39;] business = business.drop(drop_columns, axis= 1) . Show business into categories . business.categories.sample(10) . 46949 Nightlife, Bars, Whiskey Bars, Beer, Wine &amp; Sp... 89731 Windshield Installation &amp; Repair, Automotive, ... 66695 Hair Salons, Beauty &amp; Spas 99255 Professional Services, Lawyers, Financial Serv... 171605 Nail Salons, Massage, Health &amp; Medical, Cosmet... 171992 Fashion, Used, Vintage &amp; Consignment, Shopping... 79846 Salad, Ramen, Japanese, Asian Fusion, Restaurants 140752 Adult Entertainment, Counseling &amp; Mental Healt... 123696 Chicken Wings, Pizza, Italian, Restaurants 149195 Outlet Stores, Shopping Name: categories, dtype: object . Look for businesses where category contains the word Nightlife or Bar. . business_nightlife = business[business[&#39;categories&#39;].str.contains(&#39;Nightlife|Bar&#39;, case= False, na= False)] . business_explode = business.assign(categories = business.categories.str.split(&#39;, &#39;)).explode(&#39;categories&#39;) . print(&#39;The top 10 categories:&#39;) business_explode.categories.value_counts()[:10] . The top 10 categories: . Restaurants 63944 Shopping 34644 Food 32991 Home Services 22487 Beauty &amp; Spas 20520 Health &amp; Medical 19227 Local Services 15783 Automotive 14720 Nightlife 14211 Bars 12400 Name: categories, dtype: int64 . visuals = business_explode.categories.value_counts()[:10] . vis = pd.DataFrame(visuals) . vis . categories . Restaurants 63944 | . Shopping 34644 | . Food 32991 | . Home Services 22487 | . Beauty &amp; Spas 20520 | . Health &amp; Medical 19227 | . Local Services 15783 | . Automotive 14720 | . Nightlife 14211 | . Bars 12400 | . plt.figure(figsize= (25, 15)) plt.style.use(&#39;ggplot&#39;) sns.barplot(vis.categories, vis.index) plt.title(&#39;Top 10 categories of businesses&#39;, fontdict= {&#39;fontsize&#39;: 24}) plt.xlabel(&#39;Number of businesses&#39;, fontdict= {&#39;fontsize&#39;: 18}) plt.tick_params(labelsize= 16) plt.savefig(&#39;categories.png&#39;) . Reade in a chunk of reviews from the original dataset. . reviews_json_path = &#39;D:/projects/NLP project DS/yelp_academic_dataset_review.json&#39; . size = 1000000 . review = pd.read_json(reviews_json_path, lines=True, dtype={&#39;review_id&#39;:str,&#39;user_id&#39;:str, &#39;business_id&#39;:str,&#39;stars&#39;:int, &#39;date&#39;:str,&#39;text&#39;:str,&#39;useful&#39;:int, &#39;funny&#39;:int,&#39;cool&#39;:int}, chunksize=size) . If you read in a chunk, read_json() return a JsonReader object for iteration. . Merge business and reviews dataset . chunk_list = [] for chunk_review in review: chunk_review = chunk_review.drop([&#39;review_id&#39;,&#39;useful&#39;,&#39;funny&#39;,&#39;cool&#39;], axis= 1) chunk_review = chunk_review.rename(columns= {&#39;stars&#39;: &#39;review_stars&#39;}) chunk_merged = pd.merge(business_nightlife, chunk_review, on= &#39;business_id&#39;, how= &#39;inner&#39;) print(f&quot;{chunk_merged.shape[0]} out of {size:,} related reviews&quot;) chunk_list.append(chunk_merged) . 273589 out of 1,000,000 related reviews 276014 out of 1,000,000 related reviews 264422 out of 1,000,000 related reviews 272956 out of 1,000,000 related reviews 261842 out of 1,000,000 related reviews 259562 out of 1,000,000 related reviews 260244 out of 1,000,000 related reviews 256680 out of 1,000,000 related reviews 4378 out of 1,000,000 related reviews . business_nightlife_review = pd.concat(chunk_list, ignore_index=True, join=&#39;outer&#39;, axis=0) . Check merged dataset . business_nightlife_review.head() . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date . 0 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &#39;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | cSQnJ7JTY78ki5ai57kZ9A | 4 | 9.99 for a dozen raised is a Lil much the cake... | 2015-08-07 15:02:50 | . 1 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &#39;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | 5_CoaRC22jwmuUzZwlRG_g | 1 | Dirty dinning list will not go here again sad ... | 2016-02-13 17:50:23 | . 2 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &#39;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | 5_CoaRC22jwmuUzZwlRG_g | 5 | Just went here for a late night donut fix lol.... | 2015-09-29 06:18:47 | . 3 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &#39;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | c5ebpS7ex6npffT9Nlvqvw | 1 | Would of given 0 stars if possible first impre... | 2015-11-10 18:55:53 | . 4 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &#39;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | EXys-sSmm5auoqs6Jkyh7g | 5 | This is my first Yelp review. We just tried Mi... | 2016-01-25 02:26:47 | . business_nightlife_review.sample(5) . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date . 1256429 pDSl9xdKJCdN4vu8z26cEA | Coyote Ugly Saloon | Las Vegas | NV | 89109 | 2.5 | 344 | 1 | {&#39;Alcohol&#39;: &#39;u&#39;full_bar&#39;&#39;, &#39;OutdoorSeating&#39;: &#39;... | Bars, Nightlife, Adult Entertainment | W4MoCkTR35IIflqBl-SGQw | 5 | They played a good variety of music. The coyot... | 2013-10-28 16:49:18 | . 323651 DK-RfkH_GXFqjEOipl8kOw | Abbey Road Pub &amp; Patio | Mississauga | ON | L5L 1W8 | 3.5 | 23 | 1 | {&#39;RestaurantsGoodForGroups&#39;: &#39;True&#39;, &#39;Business... | Pubs, Bars, Nightlife | RRP7_dqWbnpeQx7LE0x3CA | 3 | Love the front section...Great atmosphere on F... | 2018-02-17 01:28:46 | . 2030367 1aEx-I_JdWPl6ITQDQAJxQ | Village Barber Shop | Henderson | NV | 89052 | 4.0 | 113 | 1 | {&#39;BusinessParking&#39;: &#39;{&#39;garage&#39;: False, &#39;street... | Barbers, Beauty &amp; Spas, Hair Stylists, Hair Sa... | bgJLZAEaB04x9UQIm3sATQ | 5 | Love this place. The folks who run the chairs ... | 2014-06-24 15:40:39 | . 1921867 5j2ugUALtjsa2nkV1YGq5Q | House Modern Sushi Restaurant | Mesa | AZ | 85204 | 4.0 | 311 | 1 | {&#39;RestaurantsReservations&#39;: &#39;True&#39;, &#39;Caters&#39;: ... | Restaurants, Sushi Bars, Japanese, Asian Fusion | 7v7-05j0pi5RDbvNJQB5LA | 2 | You get what you pay for. The prices here are ... | 2014-02-23 01:00:16 | . 448286 HG3ROmv3FJZTMJPpThSXOw | Luke Wholey&#39;s Wild Alaskan Grille | Pittsburgh | PA | 15222 | 4.0 | 470 | 1 | {&#39;RestaurantsPriceRange2&#39;: &#39;2&#39;, &#39;OutdoorSeatin... | Cocktail Bars, Sushi Bars, Bars, Nightlife, Re... | 5NiG9F8yaZ9KIsfk3TGAYQ | 5 | I am a seafood lover.. Not ever terribly picky... | 2014-09-17 23:16:45 | . business_nightlife_review.shape . (2129687, 14) . Save to a CSV file . name = &#39;business_nightlife_review.csv&#39; business_nightlife_review.to_csv(name, index= False) . . Market delimination . Read in data . df = pd.read_csv(&#39;data/nightlife_review.csv&#39;) . df.shape . (2129687, 15) . Look at the top of data set . df.head(10) . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date experience . 0 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | cSQnJ7JTY78ki5ai57kZ9A | 4 | 9.99 for a dozen raised is a Lil much the cake... | 2015-08-07 15:02:50 | 0 | . 1 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | 5_CoaRC22jwmuUzZwlRG_g | 1 | Dirty dinning list will not go here again sad ... | 2016-02-13 17:50:23 | 0 | . 2 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | 5_CoaRC22jwmuUzZwlRG_g | 5 | Just went here for a late night donut fix lol.... | 2015-09-29 06:18:47 | 0 | . 3 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | c5ebpS7ex6npffT9Nlvqvw | 1 | Would of given 0 stars if possible first impre... | 2015-11-10 18:55:53 | 0 | . 4 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | EXys-sSmm5auoqs6Jkyh7g | 5 | This is my first Yelp review. We just tried Mi... | 2016-01-25 02:26:47 | 0 | . 5 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | TPXPy309BrtLXbRorw3WKg | 2 | The second star is for the delicious apple fri... | 2015-09-19 18:22:09 | 0 | . 6 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | PNa8MaoGmptKej1K3hPVow | 2 | Ok service &amp; donuts. Bad boba(boba was hard an... | 2016-03-05 20:45:48 | 0 | . 7 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | YEg0bICRG3o_MSNqbcIZaw | 2 | Update: Wow. I just read through Missy&#39;s healt... | 2016-03-08 15:43:15 | 0 | . 8 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 1 | . 9 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 1 | . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 2129687 entries, 0 to 2129686 Data columns (total 15 columns): # Column Dtype -- 0 business_id object 1 name object 2 city object 3 state object 4 postal_code object 5 stars float64 6 review_count int64 7 is_open int64 8 attributes object 9 categories object 10 user_id object 11 review_stars int64 12 text object 13 date object 14 experience int64 dtypes: float64(1), int64(4), object(10) memory usage: 243.7+ MB . Create supply and demand proxies &amp; pandas data frame . supply = pd.DataFrame(df.groupby(&#39;city&#39;).name.nunique().sort_values(ascending= False)) . supply.columns = [&#39;supply&#39;] . supply.head() . supply . city . Las Vegas 3080 | . Toronto 2755 | . Phoenix 1449 | . Montréal 1166 | . Charlotte 1093 | . demand = pd.DataFrame(df.groupby(&#39;city&#39;).size().sort_values(ascending= False)) . demand.columns = [&#39;demand&#39;] . demand.head() . demand . city . Las Vegas 727107 | . Phoenix 211114 | . Toronto 156352 | . Scottsdale 141971 | . Charlotte 120033 | . df_dem_sup = supply.merge(demand, on= &#39;city&#39;) . df_dem_sup.head() . supply demand . city . Las Vegas 3080 | 727107 | . Toronto 2755 | 156352 | . Phoenix 1449 | 211114 | . Montréal 1166 | 38870 | . Charlotte 1093 | 120033 | . Calculate market saturation and save it in column . df_dem_sup[&#39;market_saturation&#39;] = df_dem_sup.supply / df_dem_sup.demand * 100 . Sort the dataframe entries by market saturation (ascending) . df_dem_sup = df_dem_sup[(df_dem_sup.demand &gt; 5000)] . df_dem_sup = df_dem_sup.sort_values(by= &#39;market_saturation&#39;) . df_dem_sup.shape . (28, 3) . df_dem_sup.head(20) . supply demand market_saturation . city . Las Vegas 3080 | 727107 | 0.423597 | . Henderson 328 | 53926 | 0.608241 | . Scottsdale 866 | 141971 | 0.609984 | . Gilbert 208 | 31056 | 0.669758 | . Phoenix 1449 | 211114 | 0.686359 | . Chandler 337 | 47316 | 0.712233 | . Goodyear 67 | 9083 | 0.737642 | . Tempe 418 | 55787 | 0.749279 | . Peoria 137 | 16001 | 0.856196 | . Charlotte 1093 | 120033 | 0.910583 | . Surprise 84 | 8546 | 0.982916 | . North Las Vegas 102 | 10260 | 0.994152 | . Huntersville 61 | 6004 | 1.015989 | . Mesa 367 | 35609 | 1.030638 | . Glendale 286 | 26991 | 1.059612 | . Pittsburgh 985 | 82639 | 1.191931 | . Madison 482 | 37497 | 1.285436 | . Cleveland 637 | 48335 | 1.317886 | . Lakewood 114 | 8371 | 1.361844 | . Markham 191 | 12081 | 1.580995 | . Create visual summary of market saturation . plt.figure(figsize= (25, 15)) plt.title(&#39;20 LOWEST SATURATED MARKETS (LOWER IS BETTER)&#39;, fontdict= {&#39;fontsize&#39;: 24}) sns.barplot(df_dem_sup.market_saturation[:20], df_dem_sup.index[:20]) plt.ylabel(&#39;cities&#39;, fontdict= {&#39;fontsize&#39;: 18}) plt.xlabel(&#39;market saturation&#39;, rotation= 0, fontdict= {&#39;fontsize&#39;: 18}) plt.tick_params(labelsize= 16) plt.savefig(&#39;market_saturation.png&#39;) . Phoenix is the chosen city, as the market saturation is relatively low and there is a rather high demand present in the city. . phoenix = df[(df.city == &#39;Phoenix&#39;)] phoenix.head() . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date experience . 8 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 1 | . 9 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 1 | . 10 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | E9IJMZ2njmG1LOMmOhzeBg | 5 | Such a fun atmosphere!! Went there last night ... | 2019-01-12 21:25:24 | 1 | . 11 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 7KZhUr0i3K202Ux1-OGOhQ | 4 | This place is new and very close to us, so we ... | 2018-07-30 01:57:23 | 1 | . 12 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | UIKrJGEyTCWKaAvWDhLJug | 5 | This is exactly what this neighborhood needed.... | 2018-07-23 02:01:32 | 1 | . phoenix.shape . (211114, 15) . phoenix.isnull().sum() . business_id 0 name 0 city 0 state 0 postal_code 7 stars 0 review_count 0 is_open 0 attributes 106 categories 0 user_id 0 review_stars 0 text 0 date 0 experience 0 dtype: int64 . Save data set to CSV . name = &#39;data/phoenix_nightlife.csv&#39; phoenix.to_csv(name, index= False) . . Merge users phoenix. . Import JSON in chunk . path = &#39;data/yelp_academic_dataset_user.json&#39; . size = 1000000 . users = pd.read_json(path, lines= True, dtype= {&#39;user_id&#39;: str, &#39;name&#39;: str, &#39;review_count&#39;: int, &#39;yelping_since&#39;: str, &#39;friends&#39;: list, &#39;useful&#39;: int, &#39;funny&#39;: int, &#39;cool&#39;: int, &#39;fans&#39;: int, &#39;elite&#39;: list, &#39;avarage_stars&#39;: float, &#39;compliment_hot&#39;: int, &#39;comliment_more&#39;: int, &#39;compliment_profile&#39;: 42, &#39;compliment_cute&#39;: int, &#39;comliment_list&#39;: int, &#39;compliment_note&#39;: int, &#39;comliment_plain&#39;: int, &#39;compliment_cool&#39;: int, &#39;compliment_funny&#39;: int, &#39;compliment_writer&#39;: int, &#39;compliment_photos&#39;: int}, chunksize= size) . Import phoenix data set . phoenix = pd.read_csv(&#39;data/phoenix_nightlife.csv&#39;) . phoenix.shape . (211114, 15) . phoenix.head(3) . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date experience . 0 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 1 | . 1 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 1 | . 2 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | E9IJMZ2njmG1LOMmOhzeBg | 5 | Such a fun atmosphere!! Went there last night ... | 2019-01-12 21:25:24 | 1 | . Iterate through users and merge with phoenix data set . Rename review_count column in users. Review count column now refers to number of reviews for the specific business and num_review_written refers to the number of reviews written by that user. . chunk_list = [] for chunk_user in users: chunk_user = chunk_user.drop([&#39;name&#39;, &#39;yelping_since&#39;, &#39;funny&#39;, &#39;cool&#39;, &#39;fans&#39;, &#39;elite&#39;, &#39;compliment_hot&#39;, &#39;compliment_more&#39;, &#39;compliment_profile&#39;, &#39;compliment_cute&#39;, &#39;compliment_list&#39;, &#39;compliment_note&#39;, &#39;compliment_plain&#39;, &#39;compliment_cool&#39;, &#39;compliment_funny&#39;, &#39;compliment_writer&#39;, &#39;compliment_photos&#39;], axis= 1) chunk_user = chunk_user.rename(columns= {&#39;review_count&#39;: &#39;num_reviews_written&#39;}) chunk_merged = pd.merge(phoenix, chunk_user, on= &#39;user_id&#39;, how= &#39;inner&#39;) print(f&quot;{chunk_merged.shape[0]} out of {size:,} related users.&quot;) chunk_list.append(chunk_merged) . 180426 out of 1,000,000 related users. 30688 out of 1,000,000 related users. . Concatenate data frame &quot;pieces&quot; into one data frame. . phoenix_nightlife_user = pd.concat(chunk_list, ignore_index= True, join= &#39;outer&#39;, axis= 0) . phoenix_nightlife_user.shape . (211114, 19) . phoenix_nightlife_user.head(3) . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date experience num_reviews_written useful friends average_stars . 0 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 1 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | . 1 ku9ak9cQnIGBCXBtRd61tQ | Spoke &amp; Wheel - Phoenix | Phoenix | AZ | 85020.0 | 4.0 | 357 | 1 | {&#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;, &#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;... | Bars, Beer, Wine &amp; Spirits, Sandwiches, Breakf... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | This is our favorite local spot! The wings are... | 2018-08-30 01:37:47 | 1 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | . 2 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 1 | 12 | 4 | p12DAvNJZ5szp8jP69NUbA, JdJ0b9QZKVrjv_nicDhABw... | 5.0 | . Create experience column, based on review star. . phoenix_nightlife_user = phoenix_nightlife_user.drop(&#39;experience&#39;, axis= 1) phoenix_nightlife_user.shape . (211114, 18) . Positive experience = 1, Negative experience = 0 . mappings = {1: 0, 2: 0, 3: 0, 4: 1, 5: 1} phoenix_nightlife_user[&#39;experience&#39;] = phoenix_nightlife_user.review_stars.map(mappings) phoenix_nightlife_user.experience.sample(5) . 27665 1 90276 1 5348 1 131733 1 160394 0 Name: experience, dtype: int64 . Visualize distribution of columns before removing outliers . plt.title(&#39;Distribution of avarage star ratings of users&#39;) plt.hist(phoenix_nightlife_user.average_stars); . plt.title(&#39;Distribution of number of reviews written per user&#39;) plt.yscale(&#39;log&#39;) plt.hist(phoenix_nightlife_user.num_reviews_written); . plt.title(&#39;Distribution of number of reviews per business&#39;) plt.hist(phoenix_nightlife_user.review_count); . Remove outliers . IQR = 75th percentile - 25th percentile (Q3 - Q1). Outlier (left tail) = 25th percentile - IQR 1.5. Outlier (right tail) = 75th percentile + IQR 1.5. . Calculate IQR for the columns we intend to &quot;clean&quot;. . IQR_stars = phoenix_nightlife_user.average_stars.quantile(0.75) - phoenix_nightlife_user.average_stars.quantile(0.25) IQR_num_rev_wri = phoenix_nightlife_user.num_reviews_written.quantile(0.75) - phoenix_nightlife_user.num_reviews_written.quantile(0.25) IQR_rev_count = phoenix_nightlife_user.review_count.quantile(0.75) - phoenix_nightlife_user.review_count.quantile(0.25) . Calculate thresholds for 3 variables to classify outliers. . outlier_stars = IQR_stars * 1.5 outlier_num_rev_wri = IQR_num_rev_wri * 1.5 outlier_rev_count = IQR_rev_count * 1.5 . Calculate Q1 and Q3 for 3 variables . Q1_stars = phoenix_nightlife_user.average_stars.quantile(0.25) Q3_stars = phoenix_nightlife_user.average_stars.quantile(0.75) Q1_num = phoenix_nightlife_user.num_reviews_written.quantile(0.25) Q3_num = phoenix_nightlife_user.num_reviews_written.quantile(0.75) Q1_rev = phoenix_nightlife_user.review_count.quantile(0.25) Q3_rev = phoenix_nightlife_user.review_count.quantile(0.75) . Create final data set, that contains businesses in Phoenix and their respective reviews, along with useful information about the user who gave said review. &quot;Outliers&quot; are removed from data set. . phoenix_nightlife_user = phoenix_nightlife_user[(phoenix_nightlife_user.average_stars &gt;= Q1_stars - outlier_stars) | (phoenix_nightlife_user.average_stars &lt;= Q3_stars + outlier_stars) &amp; (phoenix_nightlife_user.num_reviews_written &gt;= Q1_num - outlier_num_rev_wri) | (phoenix_nightlife_user.num_reviews_written &lt;= Q3_num + outlier_num_rev_wri) &amp; (phoenix_nightlife_user.review_count &gt;= Q1_rev - outlier_rev_count) | (phoenix_nightlife_user.review_count &lt;= Q3_rev + outlier_rev_count)] . phoenix_nightlife_user.shape . (211114, 19) . name = &#39;data/phoenix_users.csv&#39; phoenix_nightlife_user.to_csv(name, index= False) . Visualize distribution of columns after removing outliers . plt.title(&#39;Distribution of avarage star ratings of users&#39;) plt.hist(phoenix_nightlife_user.average_stars); . plt.title(&#39;Distribution of number of reviews written per user&#39;) plt.yscale(&#39;log&#39;) plt.hist(phoenix_nightlife_user.num_reviews_written); . plt.title(&#39;Distribution of number of reviews per business&#39;) plt.hist(phoenix_nightlife_user.review_count); . . Analysis . EDA - Exploratory Data Analysis . After the preprocessing of the data, we want to further explore the data and get a notion of the cahracteristics of the nightlife in Phoenix . Define data paths . path_phoenix_nightlife = &#39;/content/drive/MyDrive/DSBA_Project/yelp_dataset/phoenix_nightlife.csv&#39; . Load DataFrame . phoenix_nightlife = pd.read_csv(path_phoenix_nightlife) . phoenix_nightlife.head() . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date num_reviews_written useful friends average_stars experience . 0 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 1 ku9ak9cQnIGBCXBtRd61tQ | Spoke &amp; Wheel - Phoenix | Phoenix | AZ | 85020.0 | 4.0 | 357 | 1 | {&#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;, &#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;... | Bars, Beer, Wine &amp; Spirits, Sandwiches, Breakf... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | This is our favorite local spot! The wings are... | 2018-08-30 01:37:47 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 2 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 12 | 4 | p12DAvNJZ5szp8jP69NUbA, JdJ0b9QZKVrjv_nicDhABw... | 5.0 | 1 | . 3 0859wfd1BQHG46Zpwhc0ZQ | Oven + Vine | Phoenix | AZ | 85003.0 | 4.5 | 298 | 1 | {&#39;Caters&#39;: &#39;False&#39;, &#39;RestaurantsPriceRange2&#39;: ... | Restaurants, Pizza, American (New), Nightlife,... | MeLrLNf-aoz9niUmRMmb9g | 5 | My wife and our friends went to this restauran... | 2018-08-15 16:15:58 | 12 | 4 | p12DAvNJZ5szp8jP69NUbA, JdJ0b9QZKVrjv_nicDhABw... | 5.0 | 1 | . 4 PQicuLOZ3uNJKn4PtayjlQ | Shake Shack | Phoenix | AZ | 85012.0 | 3.5 | 440 | 1 | {&#39;WheelchairAccessible&#39;: &#39;True&#39;, &#39;BestNights&#39;:... | Fast Food, Restaurants, Burgers, Bars, Beer Ba... | MeLrLNf-aoz9niUmRMmb9g | 5 | So first time at shake shack. I ordered a Dou... | 2018-08-17 22:23:49 | 12 | 4 | p12DAvNJZ5szp8jP69NUbA, JdJ0b9QZKVrjv_nicDhABw... | 5.0 | 1 | . len(phoenix_nightlife) . 211114 . . Businesses with the highest and lowest average score . We start of by getting an overview of the top positive and negative ratings for the nightlife businesses in Phoenix . . star_rating = phoenix_nightlife.groupby([&#39;business_id&#39;, &#39;name&#39;, &#39;city&#39;, &#39;review_count&#39;])[&#39;stars&#39;].mean() star_rating = pd.DataFrame(star_rating).sort_values(by=[&#39;stars&#39;, &#39;review_count&#39;], ascending = [False, False]) star_rating.reset_index(inplace=True) star_rating . business_id name city review_count stars . 0 Xg5qEQiB-7L6kGJ5F4K3bQ | Little Miss BBQ | Phoenix | 2329 | 5.0 | . 1 zJ__js7-Cx_wU4GhdBdeRA | The Refuge Coffee &amp; Wine | Phoenix | 163 | 5.0 | . 2 eZqoDfBg-xOS8WdcZCYM2A | JL Smokehouse | Phoenix | 146 | 5.0 | . 3 O4kYogia0fbF85pCX10XiA | Koi Poke - Arcadia | Phoenix | 144 | 5.0 | . 4 fHKvkiSHuUYM10Z7KqBrbQ | ILLEET Entertainment | Phoenix | 124 | 5.0 | . ... ... | ... | ... | ... | ... | . 1587 ZhLDShf9HUHM6wr318fcog | Spirit Expeditions | Phoenix | 7 | 1.0 | . 1588 Oajq77cR9YXbYJT3l2c74Q | Empire Beauty School | Phoenix | 5 | 1.0 | . 1589 YQvqlA-klSRHKVxQc1_4Ew | Callahans Bar &amp; Grill | Phoenix | 5 | 1.0 | . 1590 z0ztEHnv9YLFsZ8KEN7LKA | Liquid Velvet Smoke Shop | Phoenix | 4 | 1.0 | . 1591 yvFSKXYIey7H9WdcHig2cA | Silverado Canta Bar | Phoenix | 3 | 1.0 | . 1592 rows × 5 columns . In the above table, we get an overview of the higest and lowest rated businesses and their resepctive review counts. In order to make our analysis more valid, we only want to consider businesses with above 1000 reviews for assessing the top rated businesses. It is very likely that a businesses with 5 stars rating and the highest amount of reviews are favoured by more visitors compared to a business with 5 star rating and relatively low amount of review counts. . Likewise, when assessing the worst performing businesses, we only want to consider the businesses with above 100 review counts. These businesses are constantly getting bad ratings compared to businesses with bad ratings, however, also low review counts. . By filtering out in such a way, we are able to select the businesses that are constantly performing at the higest and lowest level, which will give the foundation for building the perfect business concept in Phoenix. . star_rating_skimmed = star_rating[star_rating.review_count &gt;= 1000] star_rating_skimmed . business_id name city review_count stars . 0 Xg5qEQiB-7L6kGJ5F4K3bQ | Little Miss BBQ | Phoenix | 2329 | 5.0 | . 121 VyVIneSU7XAWgMBllI6LnQ | Bobby Q | Phoenix | 3302 | 4.5 | . 122 S-oLPRdhlyL5HAknBKTUcQ | Harumi Sushi | Phoenix | 1342 | 4.5 | . 123 u-SJ5QUwrNquL9VnXwl8cg | Postino Arcadia | Phoenix | 1307 | 4.5 | . 124 ZCzey5aPhd7jYIoHsUfjmQ | The Clever Koi | Phoenix | 1221 | 4.5 | . 125 ukCTLs6T8LY1eUBXiAlmCg | Steak 44 | Phoenix | 1201 | 4.5 | . 126 FogTa-wmjhVnJCoTiaxvZA | Postino Central | Phoenix | 1137 | 4.5 | . 127 cTZmf7B-4yciMc1WKiCVOA | Welcome Diner | Phoenix | 1073 | 4.5 | . 430 yNPh5SO-7wr8HPpVCDPbXQ | The Arrogant Butcher | Phoenix | 2358 | 4.0 | . 431 OgJ0KxwJcJ9R5bUK0ixCbg | Lux Central | Phoenix | 2210 | 4.0 | . 432 frCxZS7lPhEnQRJ3UY6m7A | La Santisima Gourmet Taco Shop | Phoenix | 2152 | 4.0 | . 433 3C5Z9homtzkWHouH2BHXYQ | Taco Guild | Phoenix | 1887 | 4.0 | . 434 J07TDs6qnTIaxm48EL1cKQ | Hula&#39;s Modern Tiki | Phoenix | 1235 | 4.0 | . 435 cTJjTKz2huGZ-ElScC2pSw | Windsor | Phoenix | 1207 | 4.0 | . 436 Gz9SlLqxS6wnxPvgdOQNrA | Bitter &amp; Twisted Cocktail Parlour | Phoenix | 1180 | 4.0 | . 437 plWuv4gda7m0KlqCNhrb4w | Angels Trumpet Ale House | Phoenix | 1168 | 4.0 | . 438 fT6Uwl6abRQfiNgxre_qbg | Cherryblossom Noodle Cafe | Phoenix | 1136 | 4.0 | . 439 NJ0RzuWd5xDqfJejYQZ65g | Delux | Phoenix | 1066 | 4.0 | . 440 LHyj66waFlDcw9UToo27JQ | Angry Crab Shack | Phoenix | 1028 | 4.0 | . 441 PVTfzxu7of57zo1jZwEzkg | FEZ | Phoenix | 1028 | 4.0 | . sns.barplot(star_rating_skimmed.review_count[:20], star_rating_skimmed.name[:20], ci=None, hue=star_rating_skimmed.stars[:20]); plt.title(&#39;Top 20 nightlife businesses in Phoenix&#39;) plt.xscale(&#39;log&#39;) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. FutureWarning . star_rating_skimmed = star_rating[star_rating.review_count &gt;= 100] star_rating_skimmed = pd.DataFrame(star_rating_skimmed).sort_values(by=[&#39;stars&#39;, &#39;review_count&#39;], ascending = [True, False]) star_rating_skimmed.head(20) . business_id name city review_count stars . 1530 k4qx8DacgRbM9vpVbWc3zA | Hooters | Phoenix | 237 | 2.0 | . 1531 5xCeuEI7Einoi5xYsNuDCQ | Applebee&#39;s Grill + Bar | Phoenix | 199 | 2.0 | . 1532 -0WegMt6Cy966qlDKhu6jA | Game Seven Grill | Phoenix | 119 | 2.0 | . 1533 U6eg7zI-0TosgVvmrOtlZg | Applebee&#39;s Grill + Bar | Phoenix | 115 | 2.0 | . 1534 YZeUH6zYS0dq5QHLYZhUnQ | Hooters | Phoenix | 106 | 2.0 | . 1421 YlwJYpBWa-oL0byTVPNKRQ | The Park | Phoenix | 397 | 2.5 | . 1422 W7Dt3b6H_pMIHfxn49Pkzg | Buffalo Wild Wings | Phoenix | 315 | 2.5 | . 1423 wERcL1KznuTgfltSKQt_jg | Zipps Sports Grill | Phoenix | 287 | 2.5 | . 1424 HTaA1mo9cB1dXMwfJC6yKg | Buffalo Wild Wings | Phoenix | 269 | 2.5 | . 1425 6FO2DTcN7zqFfl090zf12g | Humble Pie | Phoenix | 253 | 2.5 | . 1426 wJ84TZZTuT0EdLzPHt8RDw | Carlos O&#39;Brien&#39;s Mexican Restaurant | Phoenix | 213 | 2.5 | . 1427 JRo3APL5f4-TEkuI-SoDcA | Zipps Sports Grill | Phoenix | 198 | 2.5 | . 1428 EE_CKAAq7_oL7jfxmUKhuw | Applebee&#39;s Grill + Bar | Phoenix | 190 | 2.5 | . 1429 H1Mp8I2YuyBe8lFHnRk3iA | Brazilian Bull Steakhouse | Phoenix | 163 | 2.5 | . 1430 UX8xcfHhnRbgmUK1kXLYrQ | The Club at PHX | Phoenix | 158 | 2.5 | . 1431 kacZeom987POja3RwNUJpA | Gus&#39;s New York Pizza &amp; Bar | Phoenix | 149 | 2.5 | . 1432 0h5yI6np7weAVH0jsjHqPw | Humble Pie | Phoenix | 136 | 2.5 | . 1433 JlMYSLiLnpWiihmzZkQS-w | Olive Garden Italian Restaurant | Phoenix | 131 | 2.5 | . 1434 m3tNor-GTl-aAST5AmEqYA | Lin&#39;s Grand Buffet | Phoenix | 125 | 2.5 | . 1435 HVzH8CO3e1-tjr97cF_8LA | Catch 22 Sports Grill | Phoenix | 119 | 2.5 | . sns.barplot(star_rating_skimmed.review_count[:20], star_rating_skimmed.name[:20], ci=None, hue=star_rating_skimmed.stars[:20]); plt.title(&#39;Worst 20 nightlife businesses in Phoenix&#39;) plt.xscale(&#39;log&#39;) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. FutureWarning . We can conclude from the above two barplots that &#39;Little Miss BBQ&#39; has a significant review count, and still maintains to keep an average star rate at 5. On the contrary, one of the lowest performing entities which is interesting to look at is &#39;Hooters&#39; with a review count above 200, but remains as the worst performing business. These two companies will be used as case studies in the review insights chapter. . In the tabular tablefor worst performing businesses, Applebee&#39;s Grill + Bar shows up multiple times and these represent multiple entities in Phoenix, as these all have different business IDs. . . Most popular categories of nightlife in Phoenix . In this section, we want to explore which business concepts are the most popular in the nightlife of Phoenix . . In order to do this, we split the category column containing the various categories which a business belongs under into several rows. Now, the businesses occur in several rows with the respective category. In this way, we can count how mny reviews fall under each category. See below example with Spoke &amp; Wheel: . phoenix_top_cat = phoenix_nightlife.assign(categories = phoenix_nightlife.categories.str.split(&#39;, &#39;)).explode(&#39;categories&#39;) phoenix_top_cat = phoenix_top_cat[(phoenix_top_cat.categories != &#39;Bars&#39;) &amp; (phoenix_top_cat.categories != &#39;Nightlife&#39;)] phoenix_top_cat.head() . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date num_reviews_written useful friends average_stars experience . 0 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Arts &amp; Entertainment | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 0 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Music Venues | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 1 ku9ak9cQnIGBCXBtRd61tQ | Spoke &amp; Wheel - Phoenix | Phoenix | AZ | 85020.0 | 4.0 | 357 | 1 | {&#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;, &#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;... | Beer | 3i095Fnh08yC-Q3VY0KeHQ | 5 | This is our favorite local spot! The wings are... | 2018-08-30 01:37:47 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 1 ku9ak9cQnIGBCXBtRd61tQ | Spoke &amp; Wheel - Phoenix | Phoenix | AZ | 85020.0 | 4.0 | 357 | 1 | {&#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;, &#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;... | Wine &amp; Spirits | 3i095Fnh08yC-Q3VY0KeHQ | 5 | This is our favorite local spot! The wings are... | 2018-08-30 01:37:47 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 1 ku9ak9cQnIGBCXBtRd61tQ | Spoke &amp; Wheel - Phoenix | Phoenix | AZ | 85020.0 | 4.0 | 357 | 1 | {&#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;, &#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;... | Sandwiches | 3i095Fnh08yC-Q3VY0KeHQ | 5 | This is our favorite local spot! The wings are... | 2018-08-30 01:37:47 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . len(phoenix_top_cat) . 1421588 . The length of the DataFrame went from approx. 211K to 1,4 Million. Now, we only want businesses with above or equal to 10 reviews as.... . phoenix_weight = phoenix_top_cat[phoenix_top_cat.review_count &gt;= 10] print(&#39;The top 10 categories in Nightlife of Phoenix:&#39;) phoenix_weight.categories.value_counts()[:10] . The top 10 categories in Nightlife of Phoenix: . Restaurants 184396 American (New) 60183 Food 58267 American (Traditional) 46970 Breakfast &amp; Brunch 37741 Cocktail Bars 29090 Barbeque 25165 Wine Bars 24329 Sushi Bars 24198 Burgers 23502 Name: categories, dtype: int64 . Visualization = phoenix_weight.categories.value_counts()[:10] viz = pd.DataFrame(Visualization) plt.figure(figsize= (25, 15)) plt.style.use(&#39;ggplot&#39;) sns.barplot(viz.categories, viz.index) plt.title(&#39;The top 10 categories in Nightlife of Phoenix:&#39;, fontdict= {&#39;fontsize&#39;: 24}) plt.xlabel(&#39;Number of reviews&#39;, fontdict= {&#39;fontsize&#39;: 18}) plt.tick_params(labelsize= 16) plt.savefig(&#39;categories_nightlife.png&#39;) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. FutureWarning . From the above table, we can conclude that &#39;Restaurants&#39; is the most popular business concept that has been reviewed, specifically American (new) themed restaurants. Secondly, bars score highly, specifically cocktail bars are popular in Phoenix. . Assessing if experience has a significant effect on whether or not a business stays open . So how important are reviews for a business in Phoenix? Does it define whether a business will remain open or not? With these questions in mind, we want to test the probability that a business is closed based on experience . phoenix_weight.is_open.value_counts(normalize= True) . 1 0.867187 0 0.132813 Name: is_open, dtype: float64 . pd.crosstab(phoenix_weight.is_open, phoenix_weight.experience, normalize= True) . experience 0 1 . is_open . 0 0.045571 | 0.087242 | . 1 0.246586 | 0.620601 | . We want to compute a simple cross tabulation of the two factors, If a business is open and the overall experience. The return is a frequency table and here we can see that there is a significant proportion of positive experience for the businesses that closed down, compared to the negative experiences. Thus, there is a no correlation between the experience and whether the business stays open or not. . Review Insights . Positive experience . This section inspects the reviews that belong to the subgroup of phoenix businesses that have an avarage rating higher than or equal to 4 stars. . Read in Data . We use both kinds of vectorizer that sklearn offers and apply the SVD algorithm to both document term matrices to see if the outcome is similiar. We expect that the outcomes will be identical. . phoenix = pd.read_csv(&#39;data/phoenix_users.csv&#39;) phoenix_pos = phoenix[phoenix.experience == 1] phoenix_pos.head(3) . . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date num_reviews_written useful friends average_stars experience . 0 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 1 ku9ak9cQnIGBCXBtRd61tQ | Spoke &amp; Wheel - Phoenix | Phoenix | AZ | 85020.0 | 4.0 | 357 | 1 | {&#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;, &#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;... | Bars, Beer, Wine &amp; Spirits, Sandwiches, Breakf... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | This is our favorite local spot! The wings are... | 2018-08-30 01:37:47 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 2 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 12 | 4 | p12DAvNJZ5szp8jP69NUbA, JdJ0b9QZKVrjv_nicDhABw... | 5.0 | 1 | . Pick n = 5000 random sample, to save memory. Simple Random Sample assumption (a sufficient random! sample can be representative of the population that it is taken from). . text = phoenix_pos.text.sample(5000, random_state= 42) . . Create bag-of-words (discrete) representation of reviews . We create the document term matrix here, that we will decompose later with the intent to find dependencies in it. . c_vectorizer = TfidfVectorizer(stop_words= &#39;english&#39;) dtm_c = c_vectorizer.fit_transform(text).toarray() vocab_c = np.array(c_vectorizer.get_feature_names()) tf_vectorizer = CountVectorizer(stop_words= &#39;english&#39;) dtm_t = tf_vectorizer.fit_transform(text).todense() vocab_t = np.array(tf_vectorizer.get_feature_names()) # Check shape of document term matrix print(f&#39;The shape of the document term matrix is : {dtm_c.shape} and the number of tokens in the vocabulary is : {len(vocab_c)}.&#39;) dtm_c.shape == dtm_t.shape . . The shape of the document term matrix is : (5000, 14689) and the number of tokens in the vocabulary is : 14689. . True . We use a simple helper function to help extract the top words from the &quot;abstract&quot; topics. . # helper function def show_topics(V, vocab): top_words = lambda x: [vocab[i] for i in np.argsort(x)[:-num_top_words-1:-1]] topic_words = ([top_words(x) for x in V]) return [&#39; &#39;.join(x) for x in topic_words] . . Singular Value Decomposition (randomized in order to enhance speed) . This is a low rank approximation algorithm (we try to &quot;recreate&quot; the column space of our original matrix with a smaller matrix) and we compute a full svd on the smaller matrix. . d = 5 # number of topics num_top_words = 10 # number of top words U_c, s_c, Vh_c = utils.extmath.randomized_svd(dtm_c, d, random_state= 42) U_t, s_t, Vh_t = utils.extmath.randomized_svd(dtm_c, d, random_state= 42) . . Topics from the document term matrix by CountVectorizer. . show_topics(Vh_c, vocab_c) . . [&#39;great food place good service love time amazing best friendly&#39;, &#39;great food service atmosphere awesome amazing recommend drinks love place&#39;, &#39;sushi hour happy roll rolls fresh rice love price fish&#39;, &#39;service bbq food amazing brisket ribs delicious pork excellent best&#39;, &#39;love place best bbq friendly staff coffee amazing brisket ve&#39;] . Topics from the document term matrix by TfidfVectorizer. . show_topics(Vh_t, vocab_t) . . [&#39;great food place good service love time amazing best friendly&#39;, &#39;great food service atmosphere awesome amazing recommend drinks love place&#39;, &#39;sushi hour happy roll rolls fresh rice love price fish&#39;, &#39;service bbq food amazing brisket ribs delicious pork excellent best&#39;, &#39;love place best bbq friendly staff coffee amazing brisket ve&#39;] . Save top words into CSV . As they both produced the same outcome, we only save one list. We will import this list later when we create a visual summary of this finding. . positive_top_topics = show_topics(Vh_t, vocab_t) name = &#39;data/positive_top_words.csv&#39; pd.Series(positive_top_topics).to_csv(name, index= False) . . Negative experience . This section inspects the reviews that belong to the subgroup of phoenix businesses that have an avarage rating smaller than or equal to 3.5 stars. . Read in data . We use both kinds of vectorizer that sklearn offers and apply the SVD algorithm to both document term matrices to see if the outcome is similiar. We expect that the outcomes will be identical. . phoenix = pd.read_csv(&#39;data/phoenix_users.csv&#39;) phoenix_neg = phoenix[phoenix.experience == 0] phoenix_neg.head(3) . . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date num_reviews_written useful friends average_stars experience . 7 AueEbb9kao4lt6CYt06hqw | Okra Cookhouse &amp; Cocktails | Phoenix | AZ | 85014.0 | 4.0 | 227 | 0 | {&#39;Music&#39;: &quot;{&#39;dj&#39;: False}&quot;, &#39;RestaurantsDeliver... | Italian, Restaurants, Nightlife, American (New... | 7KZhUr0i3K202Ux1-OGOhQ | 2 | Good things: service was excellent and locatio... | 2016-01-26 00:08:15 | 69 | 90 | TBALUD-0FdJ6oGPqyCM8tQ, 6j_nmp1O3blJhCRDGQ5UvQ... | 3.64 | 0 | . 9 YM-nYIHd99qUt9n62AxIAg | Carlos O&#39;Brien&#39;s Mexican Restaurant | Phoenix | AZ | 85020.0 | 3.5 | 284 | 1 | {&#39;GoodForKids&#39;: &#39;True&#39;, &#39;RestaurantsGoodForGro... | Restaurants, Mexican, Salad, Bars, Nightlife, ... | 7KZhUr0i3K202Ux1-OGOhQ | 1 | Sorry, but the food here is terrible and overp... | 2018-05-16 23:05:59 | 69 | 90 | TBALUD-0FdJ6oGPqyCM8tQ, 6j_nmp1O3blJhCRDGQ5UvQ... | 3.64 | 0 | . 15 042IHd5KjHiMuBtGtugO_g | OHSO Brewery - Paradise Valley | Phoenix | AZ | 85028.0 | 4.0 | 719 | 1 | {&#39;GoodForKids&#39;: &#39;True&#39;, &#39;HasTV&#39;: &#39;True&#39;, &#39;Cate... | Nightlife, Burgers, Gluten-Free, Bars, Breakfa... | 7KZhUr0i3K202Ux1-OGOhQ | 3 | I was so excited about this place opening, and... | 2015-03-27 19:25:31 | 69 | 90 | TBALUD-0FdJ6oGPqyCM8tQ, 6j_nmp1O3blJhCRDGQ5UvQ... | 3.64 | 0 | . Pick n = 5000 random sample, to save memory. Simple Random Sample assumption (a sufficient random! sample can be representative of the population that it is taken from). . text = phoenix_neg.text.sample(5000, random_state= 42) . . Create bag-of-words (discrete) representation of reviews . We create the document term matrix here, that we will decompose later with the intent to find dependencies in it. . c_vectorizer = TfidfVectorizer(stop_words= &#39;english&#39;) dtm_c = c_vectorizer.fit_transform(text).toarray() vocab_c = np.array(c_vectorizer.get_feature_names()) tf_vectorizer = CountVectorizer(stop_words= &#39;english&#39;) dtm_t = tf_vectorizer.fit_transform(text).todense() vocab_t = np.array(tf_vectorizer.get_feature_names()) # Check shape of document term matrix print(f&#39;The shape of the document term matrix is : {dtm_c.shape} and the number of tokens in the vocabulary is : {len(vocab_c)}.&#39;) dtm_c.shape == dtm_t.shape . . The shape of the document term matrix is : (5000, 16930) and the number of tokens in the vocabulary is : 16930. . True . We use the same helper function that we used above to extract the top words. . # helper function def show_topics(V, vocab): top_words = lambda x: [vocab[i] for i in np.argsort(x)[:-num_top_words-1:-1]] topic_words = ([top_words(x) for x in V]) return [&#39; &#39;.join(x) for x in topic_words] . . Singular Value Decomposition (randomized in order to enhance speed) . This is a low rank approximation algorithm (we try to &quot;recreate&quot; the column space of our original matrix with a smaller matrix) and we compute a full svd on the smaller matrix. . d = 5 # number of topics num_top_words = 10 # number of top words U_c, s_c, Vh_c = utils.extmath.randomized_svd(dtm_c, d, random_state= 42) U_t, s_t, Vh_t = utils.extmath.randomized_svd(dtm_c, d, random_state= 42) . . Topics from the document term matrix created by CountVectorizer . show_topics(Vh_c, vocab_c) . . [&#39;food good place service just like time order great ordered&#39;, &#39;minutes waited order table asked said manager took told service&#39;, &#39;place bar service sushi great food good beer staff music&#39;, &#39;sushi roll rolls fish rice tuna fresh order ramen california&#39;, &#39;food service good slow great cold minutes took waited terrible&#39;] . Topics from the document term matrix created by TfidfVectorizer . show_topics(Vh_t, vocab_t) . . [&#39;food good place service just like time order great ordered&#39;, &#39;minutes waited order table asked said manager took told service&#39;, &#39;place bar service sushi great food good beer staff music&#39;, &#39;sushi roll rolls fish rice tuna fresh order ramen california&#39;, &#39;food service good slow great cold minutes took waited terrible&#39;] . Save top words into CSV . As they both produced the same outcome, we only save one list. We save it, so that later we can visualize the conclusion. . negative_top_topics = show_topics(Vh_t, vocab_t) name = &#39;data/negative_top_words.csv&#39; pd.Series(negative_top_topics).to_csv(name, index= False) . . 1-5 stars . In this section, we look into the differences of the businesses of the different &quot;levels&quot; of ratings that they achieved. . We use the TfidfVectorizer and apply the NMF algorithm to the document term matrix. Create a different document term matrix for each review stars to see if we can &quot;pick up&quot; some differences among the different reviews. . Read in data set . phoenix = pd.read_csv(&#39;data/phoenix_users.csv&#39;) phoenix_1 = phoenix[phoenix.review_stars == 1] phoenix_2 = phoenix[phoenix.review_stars == 2] phoenix_3 = phoenix[phoenix.review_stars == 3] phoenix_4 = phoenix[phoenix.review_stars == 4] phoenix_5 = phoenix[phoenix.review_stars == 5] phoenix_1.head(3) . . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date num_reviews_written useful friends average_stars experience . 9 YM-nYIHd99qUt9n62AxIAg | Carlos O&#39;Brien&#39;s Mexican Restaurant | Phoenix | AZ | 85020.0 | 3.5 | 284 | 1 | {&#39;GoodForKids&#39;: &#39;True&#39;, &#39;RestaurantsGoodForGro... | Restaurants, Mexican, Salad, Bars, Nightlife, ... | 7KZhUr0i3K202Ux1-OGOhQ | 1 | Sorry, but the food here is terrible and overp... | 2018-05-16 23:05:59 | 69 | 90 | TBALUD-0FdJ6oGPqyCM8tQ, 6j_nmp1O3blJhCRDGQ5UvQ... | 3.64 | 0 | . 44 BOD0yRkakyxXzJmbVVAxSA | Camp Social | Phoenix | AZ | 85014.0 | 3.5 | 636 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;RestaurantsTakeOut&#39;: ... | Restaurants, Bars, Nightlife, American (Tradit... | osIsgYzdCKDvEv0ddrrzMw | 1 | Came back on Friday night and noticed signific... | 2017-07-10 16:16:14 | 13 | 4 | OvxcsyUSl9d0mXweVBqRAQ, bCgVzrbeVe6zM_p_X7e-mA... | 2.60 | 0 | . 61 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | Zs6AfhzLlQ-YzWrVWr8-bA | 1 | Chemical spill! I had just paid $12 for a $9 7... | 2019-05-14 04:43:48 | 35 | 33 | None | 2.86 | 0 | . Pick n = 5000 random sample, to save memory. Simple Random Sample assumption. . text_1 = phoenix_1.text.sample(5000, random_state= 42) text_2 = phoenix_2.text.sample(5000, random_state= 42) text_3 = phoenix_3.text.sample(5000, random_state= 42) text_4 = phoenix_4.text.sample(5000, random_state= 42) text_5 = phoenix_5.text.sample(5000, random_state= 42) . . Create bag-of-words (discrete) representation of reviews . We create the document term matrices here for the different &quot;subgroups&quot;. . vectorizer1 = TfidfVectorizer(stop_words= &#39;english&#39;) dtm_1 = vectorizer1.fit_transform(text_1).toarray() vocab_1 = np.array(vectorizer1.get_feature_names()) vectorizer2 = TfidfVectorizer(stop_words= &#39;english&#39;) dtm_2 = vectorizer2.fit_transform(text_2).toarray() vocab_2 = np.array(vectorizer2.get_feature_names()) vectorizer3 = TfidfVectorizer(stop_words= &#39;english&#39;) dtm_3 = vectorizer3.fit_transform(text_3).toarray() vocab_3 = np.array(vectorizer3.get_feature_names()) vectorizer4 = TfidfVectorizer(stop_words= &#39;english&#39;) dtm_4 = vectorizer4.fit_transform(text_4).toarray() vocab_4 = np.array(vectorizer4.get_feature_names()) vectorizer5 = TfidfVectorizer(stop_words= &#39;english&#39;) dtm_5 = vectorizer5.fit_transform(text_5).toarray() vocab_5 = np.array(vectorizer5.get_feature_names()) . . Again, we use the helper function to extract the top 10 words from the topics. . # helper function def show_topics(H, vocab): top_words = lambda x: [vocab[i] for i in np.argsort(x)[:-num_top_words-1:-1]] topic_words = ([top_words(x) for x in H]) return [&#39; &#39;.join(x) for x in topic_words] . . Non-negative Matrix Factorization . This is not an exact decomposition, and a fairly new technique. Researchers have been working hard for decades to create this algorithm. We used sklearn&#39;s implementation (other ones exist too). . d = 5 # number of topics num_top_words = 10 # number of top words nnmf_1 = decomposition.NMF(n_components= d, max_iter= 500, random_state= 42) W_1 = nnmf_1.fit_transform(dtm_1) H_1 = nnmf_1.components_ nnmf_2 = decomposition.NMF(n_components= d, max_iter= 500, random_state= 42) W_2 = nnmf_2.fit_transform(dtm_2) H_2 = nnmf_2.components_ nnmf_3 = decomposition.NMF(n_components= d, max_iter= 500, random_state= 42) W_3 = nnmf_3.fit_transform(dtm_3) H_3 = nnmf_3.components_ nnmf_4 = decomposition.NMF(n_components= d, max_iter= 500, random_state= 42) W_4 = nnmf_4.fit_transform(dtm_4) H_4 = nnmf_4.components_ nnmf_5 = decomposition.NMF(n_components= d, max_iter= 500, random_state= 42) W_5 = nnmf_5.fit_transform(dtm_5) H_5 = nnmf_5.components_ . . Topics from 1 star reviews . show_topics(H_1, vocab_1) . . [&#39;minutes order table came waited server asked 10 got seated&#39;, &#39;chicken ordered food like sushi good salad sauce tasted cheese&#39;, &#39;bar place people just don like bartender rude time said&#39;, &#39;service food horrible terrible worst place bad customer good time&#39;, &#39;hair cut haircut barber shop time cutting barbers fade didn&#39;] . Topics from 2 star reviews . show_topics(H_2, vocab_2) . . [&#39;minutes order table server came took asked time waitress got&#39;, &#39;chicken cheese ordered sauce bbq salad good fries sandwich burger&#39;, &#39;place bar like just really beer don people nice drinks&#39;, &#39;sushi roll rolls fish rice fresh quality happy hour sashimi&#39;, &#39;food service good slow great restaurant times horrible bad poor&#39;] . Topics from 3 star reviews . show_topics(H_3, vocab_3) . . [&#39;bar place beer like drinks happy hour nice music drink&#39;, &#39;chicken cheese good sauce burger bbq fries sandwich salad ordered&#39;, &#39;sushi roll rolls hour happy spicy rice fish tuna fresh&#39;, &#39;time minutes order table server came took didn asked got&#39;, &#39;food service good great ok atmosphere place really average slow&#39;] . Topics from 4 star reviews . show_topics(H_4, vocab_4) . . [&#39;place bar like beer night cool really fun music just&#39;, &#39;good chicken ordered burger cheese salad really bbq fries got&#39;, &#39;sushi roll rolls fresh place lunch tempura sashimi tuna spicy&#39;, &#39;great food good service atmosphere friendly staff place nice drinks&#39;, &#39;happy hour wings menu drinks great appetizers deals specials awesome&#39;] . Topics from 5 star reviews . show_topics(H_5, vocab_5) . . [&#39;love place bar friendly fun drinks staff favorite beer phoenix&#39;, &#39;good delicious really time ordered got definitely food like came&#39;, &#39;sushi roll hour happy rolls fresh good place prices best&#39;, &#39;great food service atmosphere excellent awesome recommend staff amazing friendly&#39;, &#39;bbq best brisket ve ribs pork amazing pulled wait worth&#39;] . Save top words into CSVs . We save the topic words into CSVs, that we later import to create word clouds. . one_top_topics = show_topics(H_1, vocab_1) two_top_topics = show_topics(H_2, vocab_2) three_top_topics = show_topics(H_3, vocab_3) four_top_topics = show_topics(H_4, vocab_4) five_top_topics = show_topics(H_5, vocab_5) name1 = &#39;data/one_top_words.csv&#39; pd.Series(one_top_topics).to_csv(name1, index= False) name2 = &#39;data/two_top_words.csv&#39; pd.Series(two_top_topics).to_csv(name2, index= False) name3 = &#39;data/three_top_words.csv&#39; pd.Series(three_top_topics).to_csv(name3, index= False) name4 = &#39;data/four_top_words.csv&#39; pd.Series(four_top_topics).to_csv(name4, index= False) name5 = &#39;data/five_top_words.csv&#39; pd.Series(five_top_topics).to_csv(name5, index= False) . . Wordcloud visualization of topics . In this section we visualize the findings of the above described topic modeling tasks that we did. . Import data . We can see, that the all the imports have the same shape, 5 rows (topics) and 1 column (10 top words from each topic) . # Import all CSVs at once as the process of creating wordcloud is the same for all CSVs five = pd.read_csv(&#39;data/five_top_words.csv&#39;) four = pd.read_csv(&#39;data/four_top_words.csv&#39;) three = pd.read_csv(&#39;data/three_top_words.csv&#39;) two = pd.read_csv(&#39;data/two_top_words.csv&#39;) one = pd.read_csv(&#39;data/one_top_words.csv&#39;) positive = pd.read_csv(&#39;data/positive_top_words.csv&#39;) negative = pd.read_csv(&#39;data/negative_top_words.csv&#39;) # Check shapes of data frames, to make sure import worked five.shape, four.shape, three.shape, two.shape, one.shape, positive.shape, negative.shape . . ((5, 1), (5, 1), (5, 1), (5, 1), (5, 1), (5, 1), (5, 1)) . We transform the lists to long strings, as the WordCloud function only accepts strings. . # Concatenate top topic words into string text_five = &quot; &quot;.join(a for a in five.text) text_four = &quot; &quot;.join(b for b in four.text) text_three = &quot; &quot;.join(c for c in three.text) text_two = &quot; &quot;.join(d for d in two.text) text_one = &quot; &quot;.join(e for e in one.text) text_positive = &quot; &quot;.join(f for f in positive.text) text_negative = &quot; &quot;.join(g for g in negative.text) . . Create word clouds . Wordcloud 1 stars . wc1 = WordCloud(max_font_size= 50, max_words= 40, background_color= &#39;white&#39;).generate(text_one) plt.figure(figsize=[20, 10]) plt.imshow(wc1, interpolation= &#39;bilinear&#39;) plt.axis(&#39;off&#39;) plt.show() . . Wordcloud 2 stars . wc2 = WordCloud(max_font_size= 50, max_words= 40, background_color= &#39;white&#39;).generate(text_two) plt.figure(figsize= [20, 10]) plt.imshow(wc2, interpolation= &#39;bilinear&#39;) plt.axis(&#39;off&#39;) plt.show() . . Wordcloud 3 stars . wc3 = WordCloud(max_font_size= 50, max_words= 40, background_color= &#39;white&#39;).generate(text_three) plt.figure(figsize= [20, 10]) plt.imshow(wc3, interpolation= &#39;bilinear&#39;) plt.axis(&#39;off&#39;) plt.show() . . Wordcloud 4 stars . wc4 = WordCloud(max_font_size= 50, max_words= 40, background_color= &#39;white&#39;).generate(text_four) plt.figure(figsize= [20, 10]) plt.imshow(wc4, interpolation= &#39;bilinear&#39;) plt.axis(&#39;off&#39;) plt.show() . . Wordcloud 5 stars . wc5 = WordCloud(max_font_size= 50, max_words= 40, background_color= &#39;white&#39;).generate(text_five) plt.figure(figsize= [20, 10]) plt.imshow(wc4, interpolation= &#39;bilinear&#39;) plt.axis(&#39;off&#39;) plt.show() . . Wordcloud positive experience . wc6 = WordCloud(max_font_size= 50, max_words= 40, background_color= &#39;white&#39;).generate(text_positive) plt.figure(figsize= [20, 10]) plt.imshow(wc4, interpolation= &#39;bilinear&#39;) plt.axis(&#39;off&#39;) plt.show() . . Wordcloud negative experience . wc7 = WordCloud(max_font_size= 50, max_words= 40, background_color= &#39;white&#39;).generate(text_negative) plt.figure(figsize= [20, 10]) plt.imshow(wc4, interpolation= &#39;bilinear&#39;) plt.axis(&#39;off&#39;) plt.show() . . Little Miss BBQ . In this section we inspect Little Miss BBQ as it is this business is rather liked in Phoenix. . Import data . df = pd.read_csv(&#39;data/phoenix_users.csv&#39;) df.head(3) . . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date num_reviews_written useful friends average_stars experience . 0 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 1 ku9ak9cQnIGBCXBtRd61tQ | Spoke &amp; Wheel - Phoenix | Phoenix | AZ | 85020.0 | 4.0 | 357 | 1 | {&#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;, &#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;... | Bars, Beer, Wine &amp; Spirits, Sandwiches, Breakf... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | This is our favorite local spot! The wings are... | 2018-08-30 01:37:47 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 2 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 12 | 4 | p12DAvNJZ5szp8jP69NUbA, JdJ0b9QZKVrjv_nicDhABw... | 5.0 | 1 | . Data Frame that only contains entries for Little Miss BBQ . # Subset data set little_miss = df[df.name == &#39;Little Miss BBQ&#39;] little_miss.head(3) . . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date num_reviews_written useful friends average_stars experience . 164 Xg5qEQiB-7L6kGJ5F4K3bQ | Little Miss BBQ | Phoenix | AZ | 85034.0 | 5.0 | 2329 | 1 | {&#39;RestaurantsDelivery&#39;: &#39;False&#39;, &#39;RestaurantsA... | Barbeque, Restaurants | ocB1WhramMTkICc5sZ1bUQ | 5 | Hands down the best bbq I&#39;ve had in my whole l... | 2016-07-08 19:00:46 | 371 | 658 | MfxdEmaH-0_ITpuXU4Hgzg, Jl3FZ3tPi0GpBIogfUNnPg... | 3.71 | 1 | . 888 Xg5qEQiB-7L6kGJ5F4K3bQ | Little Miss BBQ | Phoenix | AZ | 85034.0 | 5.0 | 2329 | 1 | {&#39;RestaurantsDelivery&#39;: &#39;False&#39;, &#39;RestaurantsA... | Barbeque, Restaurants | sTcYq6goD1Fa2WS9MSkSvQ | 5 | Holy mother of god why did it take me so long ... | 2017-11-07 18:22:17 | 841 | 3749 | B820kFgFc1HyTFIuMoWH-w, PMe-hl9fP2g074H4SAfIKA... | 3.62 | 1 | . 1155 Xg5qEQiB-7L6kGJ5F4K3bQ | Little Miss BBQ | Phoenix | AZ | 85034.0 | 5.0 | 2329 | 1 | {&#39;RestaurantsDelivery&#39;: &#39;False&#39;, &#39;RestaurantsA... | Barbeque, Restaurants | ZE67Ck4gWtJBAN95AKMyZg | 5 | I mean, does this place need another 5 star re... | 2016-03-02 18:00:31 | 32 | 105 | Hyli6YWc-0PxRAerObzZIQ, LIj_X_4luQAWf3i10Gx1OA... | 3.91 | 1 | . Vectorize text . We create the document term matrix here. The shape of the matrix (2387 x 7806) can be seen below along with the length of the vocabulary (7806). This means that we have 2387 reviews (documents) for Little Miss BBQ and got 7806 tokens after vectorization. . # get reviews text = little_miss.text # vectorize vectorizer = TfidfVectorizer(stop_words= &#39;english&#39;) dtm = vectorizer.fit_transform(text).toarray() vocab = np.array(vectorizer.get_feature_names()) # shape of dtm dtm.shape, len(vocab) . . ((2387, 7806), 7806) . Helper function to extract top words . # Helper function def show_topics(H, vocab): top_words = lambda x: [vocab[i] for i in np.argsort(x)[:-num_top_words-1:-1]] topic_words = ([top_words(x) for x in H]) return [&#39; &#39;.join(x) for x in topic_words] . . Matrix decomposition . We used the non-negative matrix factorization. . d = 5 # number of topics num_top_words = 10 # number of top words nnmf = decomposition.NMF(n_components= d, max_iter= 500, random_state= 42) W = nnmf.fit_transform(dtm) H = nnmf.components_ . . Topics extracted . show_topics(H, vocab) . . [&#39;line time got just people order good meat waiting parking&#39;, &#39;bbq best ve miss phoenix hands little texas place az&#39;, &#39;wait worth long line hour brisket amazing totally best definitely&#39;, &#39;brisket ribs pork grits fatty sausage pulled beans beef pie&#39;, &#39;great food service place friendly staff amazing awesome customer recommend&#39;] . Wordcloud Little Miss BBQ . words = show_topics(H, vocab) # join list elements into one string text_little_miss = &quot; &quot;.join(a for a in words) wc = WordCloud(max_font_size= 50, max_words= 40, background_color= &#39;white&#39;).generate(text_little_miss) plt.figure(figsize=[20, 10]) plt.imshow(wc, interpolation= &#39;bilinear&#39;) plt.axis(&#39;off&#39;) plt.show() . . Hooters . In this section we have a closer look at one of the worst performing business in Phoenix. . Import data . data = pd.read_csv(&#39;data/phoenix_users.csv&#39;) # Subset data set hooters = data[data.name == &#39;Hooters&#39;] hooters.head(3) . . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date num_reviews_written useful friends average_stars experience . 568 YZeUH6zYS0dq5QHLYZhUnQ | Hooters | Phoenix | AZ | 85035.0 | 2.0 | 106 | 1 | {&#39;NoiseLevel&#39;: &quot;&#39;very_loud&#39;&quot;, &#39;WiFi&#39;: &quot;&#39;no&#39;&quot;, ... | Nightlife, American (Traditional), Chicken Win... | zY4RR6kG0AgioqbgpXCsFg | 1 | I hate to give a one star, but this place need... | 2019-01-19 03:05:09 | 50 | 12 | Ar1JMNPrOA4lCj8RkjmWoQ, XpofMKrKlQhx1hXunBPIqA... | 3.85 | 0 | . 734 k4qx8DacgRbM9vpVbWc3zA | Hooters | Phoenix | AZ | 85004.0 | 2.0 | 237 | 1 | {&#39;RestaurantsDelivery&#39;: &#39;False&#39;, &#39;BusinessAcce... | Nightlife, Bars, Sports Bars, American (Tradit... | 8Aj0YKThtXkSuauONIzYfQ | 4 | This downtown Phoenix Hooters has become a com... | 2011-08-18 00:17:21 | 176 | 313 | QyXoqXAxOV2DLNPOZKuEIw, F6uSoMUXNssNTlNRzfjXYg... | 4.21 | 1 | . 1129 k4qx8DacgRbM9vpVbWc3zA | Hooters | Phoenix | AZ | 85004.0 | 2.0 | 237 | 1 | {&#39;RestaurantsDelivery&#39;: &#39;False&#39;, &#39;BusinessAcce... | Nightlife, Bars, Sports Bars, American (Tradit... | Z4jbHK1-U6pVfI6RfNUSow | 3 | After catching a movie, I tagged along with my... | 2018-05-24 23:02:41 | 37 | 32 | dlIugG_I6E3R6H35oDFC9w, _u_OiLc12aVBp9ckzKpvvg... | 3.73 | 0 | . Vectorize text . We create the document term matrix here. The shape of the matrix (478 x 3683) can be seen below along with the length of the vocabulary (3683). This means that we have 487 reviews (documents) for Hooters and got 3683 tokens after vectorization. . text = hooters.text # vectorize text vectorizer = TfidfVectorizer(stop_words= &#39;english&#39;) dtm = vectorizer.fit_transform(text).toarray() vocab = np.array(vectorizer.get_feature_names()) # check dtm and vocab size dtm.shape, len(vocab) . . ((478, 3683), 3683) . Helper function to extract top words . # Helper function def show_topics(H, vocab): top_words = lambda x: [vocab[i] for i in np.argsort(x)[:-num_top_words-1:-1]] topic_words = ([top_words(x) for x in H]) return [&#39; &#39;.join(x) for x in topic_words] . . Matrix decomposition . We used the non-negative matrix factorization. . d = 5 # number of topics num_top_words = 10 # number of top words nnmf = decomposition.NMF(n_components= d, max_iter= 500, random_state= 42) W = nnmf.fit_transform(dtm) H = nnmf.components_ . . Topics top words for Hooters . show_topics(H, vocab) . . [&#39;said manager asked just told came table tables wait did&#39;, &#39;wings chicken ordered fries got hot sauce like salad buffalo&#39;, &#39;great service atmosphere care server veronica job teams fish favorite&#39;, &#39;good hooters food beer girls cold service place pretty bad&#39;, &#39;minutes order waited service took food 20 worst waitress drinks&#39;] . Wordcloud Hooters . words = show_topics(H, vocab) # concatenate string elements into a string text_hooters = &quot; &quot;.join(a for a in words) wc = WordCloud(max_font_size= 50, max_words= 40, background_color= &#39;white&#39;).generate(text_hooters) plt.figure(figsize=[20, 10]) plt.imshow(wc, interpolation= &#39;bilinear&#39;) plt.axis(&#39;off&#39;) plt.show() . . Summary of topic modeling . The outcome of the topic modeling corresponds to our intuition, that businesses would get bad reviewsif their staff was rude, the service took ages and the quality of the product was sub-optimal. Words, such as &quot;horrible&quot;, &quot;terrible&quot; and &quot;rude&quot; were found among the 1 star reviews, indicating, that potentially the staff was rude, as well as their overall experience was bad. The 2 star reviews contained words such as &quot;slow&quot; and &quot;hour&quot; which allows us to assume that the businesses were down-rated because of the speed of their service. Reviews from the 4, 5 star ranges seemed to highlight the fact, that the stuff was rather friendly, the product was fresh and good quality and the service was fast. The above described tendency was found in the positive vs negative experience topic modeling too. . As the business called &quot;Little Miss BBQ&quot; was the best performing business in Phoenix, we looked into their reviews to see what could cause their success. The outcome seems to be that their service is rather friendly and their food (especially their meat products) are praised for their tastiness. In order to get a more concrete view on what makes a business a &quot;worst performing one&quot;, we looked into &quot;Hooters&quot; as their rating is 2 and a large number of reviews agree on the aforementioned star value. Their rating potentially can be explained by slow service and bad enough food. . Supervised Machine Learning . In this section, we create a classifier that predicts the experience of the reviewer. . Read in data . phoenix_sentiment = pd.read_csv(&#39;data/phoenix_users.csv&#39;) phoenix_sentiment.head(3) . . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date num_reviews_written useful friends average_stars experience . 0 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 1 ku9ak9cQnIGBCXBtRd61tQ | Spoke &amp; Wheel - Phoenix | Phoenix | AZ | 85020.0 | 4.0 | 357 | 1 | {&#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;, &#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;... | Bars, Beer, Wine &amp; Spirits, Sandwiches, Breakf... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | This is our favorite local spot! The wings are... | 2018-08-30 01:37:47 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 2 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 12 | 4 | p12DAvNJZ5szp8jP69NUbA, JdJ0b9QZKVrjv_nicDhABw... | 5.0 | 1 | . Build pipeline . Pipeline allows us to combine preprocessing and modelling in one object (which can be useful as we can cross-validate different preprocessing methods with different potential model representations). . # vectorizer vectorizer = CountVectorizer(stop_words= &#39;english&#39;) # model classifier = MultinomialNB() # pipeline pipe = Pipeline([(&#39;vect&#39;, vectorizer), (&#39;class&#39;, classifier)]) . . RandomizedSearchCV . This is a method to search through the space of different combinations of hyper-parameters. We used the randomized method to decrease the amount of computation needed. Instead, we could hve used GridSearchCV, however, we would have had to search through 288 (6 4 6 * 2) parameter combination. The cost for less computation is a slight chance that RandomizedSearchCV does not find the global best hyper-parameter combination, however this is rather unlikely. . # dictionary of hyper parameter options params = {} params[&#39;vect__ngram_range&#39;] = [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)] params[&#39;vect__max_df&#39;] = [1.0, 0.99, 0.98, 0.97] params[&#39;class__alpha&#39;] = [1.0, 0.9, 0.8, 0.7, 0.6, 0.5] params[&#39;class__fit_prior&#39;] = [True, False] . . RandomizedSearchCv object . CV = RandomizedSearchCV(pipe, params, cv= 3, scoring= &#39;accuracy&#39;) CV.fit(X_train, y_train) . . RandomizedSearchCV(cv=3, estimator=Pipeline(steps=[(&#39;vect&#39;, CountVectorizer(stop_words=&#39;english&#39;)), (&#39;class&#39;, MultinomialNB())]), param_distributions={&#39;class__alpha&#39;: [1.0, 0.9, 0.8, 0.7, 0.6, 0.5], &#39;class__fit_prior&#39;: [True, False], &#39;vect__max_df&#39;: [1.0, 0.99, 0.98, 0.97], &#39;vect__ngram_range&#39;: [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]}, scoring=&#39;accuracy&#39;) . print(&#39;The best score and parameter combination is the following: &#39;) CV.best_score_, CV.best_params_ . . The best score and parameter combination is the following: . (0.8963253460872941, {&#39;vect__ngram_range&#39;: (1, 2), &#39;vect__max_df&#39;: 0.99, &#39;class__fit_prior&#39;: True, &#39;class__alpha&#39;: 0.7}) . Recreate best performing pipeline . # Build best performing vectorizer and model into a pipeline pipe_best = make_pipeline(CountVectorizer(stop_words= &#39;english&#39;, ngram_range= (1, 2), max_df= 0.99), MultinomialNB(alpha= 0.7)) # fit pipeline with training data pipe_best.fit(X_train, y_train) . . Pipeline(steps=[(&#39;countvectorizer&#39;, CountVectorizer(max_df=0.99, ngram_range=(1, 2), stop_words=&#39;english&#39;)), (&#39;multinomialnb&#39;, MultinomialNB(alpha=0.7))]) . Model Evaluation . Get baseline accuracy . # Get predictions for the test set y_pred = pipe_best.predict(X_test) phoenix_sentiment.experience.value_counts(normalize= True) . . 1 0.704534 0 0.295466 Name: experience, dtype: float64 . If we predict positive sentiment for all entries, we get it right 70% of the time. . Get accuracy of pipeline . metrics.accuracy_score(y_test, y_pred) . . 0.8983832259694329 . Confusion matrix . metrics.confusion_matrix(y_test, y_pred) . . array([[ 7015, 2401], [ 817, 21435]], dtype=int64) . Assign the different entries of the matrix to variables, to create other performance evaluation metrics below. . confusion = metrics.confusion_matrix(y_test, y_pred) TP = confusion[1, 1] TN = confusion[0, 0] FP = confusion[0, 1] FN = confusion[1, 0] . . Summary of model performance . data = {&#39;Sensitivity&#39;: sen, &#39;Specificity&#39;: spe, &#39;False positive rate&#39;: fpr, &#39;Precision&#39;: prec} pd.DataFrame(data= data, index= [0], dtype= np.float32) . . Sensitivity Specificity False positive rate Precision . 0 0.963284 | 0.745008 | 0.254992 | 0.89927 | . The model does a good job of identifying true positives and an &quot;OK&quot; job of identifying the true negatives. We are happy with the model performance, as the precision (positive predictive value) is close to 90 %. . Save Model params . Following the practices of Data Science, we created a saved version of the model that could later be deployed. Deployment depends on a great variety of factors, for instance it would have to hold true, that the incoming data source does not change, otherwise the model could break. . Summary of Supervised Machine Learning . We used the combination of pipelines and randomized search CV. According to our studies, this is a really powerful way to develop proficient models. Moreover, we decided to create a test set, that was only used for validation (not even used in grid search) in order to get the most unbiased estimate of accuracy. We used CountVectorizer to represent text numerically, as MultinomialNB may have problems working with non-integer values. We imagined that this model could be useful for businesses to keep track of the customers who provide a bad review and potentially, the business can follow up with that customer to improve their experience and as a consequence increase the busnibusiness&#39;s overall rating. An evaluation criterion for this specific use-case that should be as high as possible is the specifity, thus the business could reach out to the highest number of customers who had a potentially negative experience. .",
            "url": "https://achnito.github.io/DSBA/fastpages/jupyter/2020/11/28/Exam_Project-(1).html",
            "relUrl": "/fastpages/jupyter/2020/11/28/Exam_Project-(1).html",
            "date": " • Nov 28, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Data Science for Business Applications",
            "content": "Pokemon - Assignment 1 . %%shell jupyter nbconvert --to html /content/M1_Assignment.ipynb . [NbConvertApp] Converting notebook /content/M1_Assignment.ipynb to html [NbConvertApp] Writing 1689830 bytes to /content/M1_Assignment.html . . from IPython.display import HTML HTML(&#39;&#39;&#39;&lt;script&gt; code_show=true; function code_toggle() { if (code_show){ $(&#39;div.input&#39;).hide(); } else { $(&#39;div.input&#39;).show(); } code_show = !code_show } $( document ).ready(code_toggle); &lt;/script&gt; &lt;form action=&quot;javascript:code_toggle()&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Click here to toggle on/off the raw code.&quot;&gt;&lt;/form&gt;&#39;&#39;&#39;) . Initialize . Imports . import pandas as pd #DataFrame awesomeness import numpy as np #Math library import matplotlib.pyplot as plt #Statistics Visualization Library import seaborn as sns #2nd Gen StatsViz! import plotly.express as px #Visualization tool! import sklearn.metrics as mt #Metrics - measure model performance #Data Preprocessing tools from sklearn.preprocessing import StandardScaler #transformsdata to having mean=0 &amp; std=1 from sklearn.preprocessing import MinMaxScaler #Dimensionality Reduction tools from sklearn.decomposition import PCA from sklearn.decomposition import nmf import umap as umap #Get ready to plot those umaps!! !pip install umap-learn[plot] import umap.plot #Something else I forgot sns.set(color_codes=True, rc={&#39;figure.figsize&#39;:(10,8)}) . Requirement already satisfied: umap-learn[plot] in /usr/local/lib/python3.6/dist-packages (0.4.6) Requirement already satisfied: scikit-learn&gt;=0.20 in /usr/local/lib/python3.6/dist-packages (from umap-learn[plot]) (0.22.2.post1) Requirement already satisfied: scipy&gt;=1.3.1 in /usr/local/lib/python3.6/dist-packages (from umap-learn[plot]) (1.4.1) Requirement already satisfied: numba!=0.47,&gt;=0.46 in /usr/local/lib/python3.6/dist-packages (from umap-learn[plot]) (0.48.0) Requirement already satisfied: numpy&gt;=1.17 in /usr/local/lib/python3.6/dist-packages (from umap-learn[plot]) (1.18.5) Requirement already satisfied: matplotlib; extra == &#34;plot&#34; in /usr/local/lib/python3.6/dist-packages (from umap-learn[plot]) (3.2.2) Requirement already satisfied: datashader; extra == &#34;plot&#34; in /usr/local/lib/python3.6/dist-packages (from umap-learn[plot]) (0.11.1) Requirement already satisfied: pandas; extra == &#34;plot&#34; in /usr/local/lib/python3.6/dist-packages (from umap-learn[plot]) (1.1.3) Requirement already satisfied: colorcet; extra == &#34;plot&#34; in /usr/local/lib/python3.6/dist-packages (from umap-learn[plot]) (2.0.2) Requirement already satisfied: bokeh; extra == &#34;plot&#34; in /usr/local/lib/python3.6/dist-packages (from umap-learn[plot]) (2.1.1) Requirement already satisfied: holoviews; extra == &#34;plot&#34; in /usr/local/lib/python3.6/dist-packages (from umap-learn[plot]) (1.13.4) Requirement already satisfied: joblib&gt;=0.11 in /usr/local/lib/python3.6/dist-packages (from scikit-learn&gt;=0.20-&gt;umap-learn[plot]) (0.17.0) Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from numba!=0.47,&gt;=0.46-&gt;umap-learn[plot]) (50.3.0) Requirement already satisfied: llvmlite&lt;0.32.0,&gt;=0.31.0dev0 in /usr/local/lib/python3.6/dist-packages (from numba!=0.47,&gt;=0.46-&gt;umap-learn[plot]) (0.31.0) Requirement already satisfied: cycler&gt;=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (0.10.0) Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,&gt;=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2.4.7) Requirement already satisfied: kiwisolver&gt;=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (1.2.0) Requirement already satisfied: python-dateutil&gt;=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2.8.1) Requirement already satisfied: dask[complete]&gt;=0.18.0 in /usr/local/lib/python3.6/dist-packages (from datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2.12.0) Requirement already satisfied: param&gt;=1.6.0 in /usr/local/lib/python3.6/dist-packages (from datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (1.9.3) Requirement already satisfied: datashape&gt;=0.5.1 in /usr/local/lib/python3.6/dist-packages (from datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (0.5.2) Requirement already satisfied: pillow&gt;=3.1.1 in /usr/local/lib/python3.6/dist-packages (from datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (7.0.0) Requirement already satisfied: toolz&gt;=0.7.4 in /usr/local/lib/python3.6/dist-packages (from datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (0.11.1) Requirement already satisfied: xarray&gt;=0.9.6 in /usr/local/lib/python3.6/dist-packages (from datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (0.15.1) Requirement already satisfied: pyct[cmd]==0.4.6 in /usr/local/lib/python3.6/dist-packages (from datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (0.4.6) Requirement already satisfied: pytz&gt;=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2018.9) Requirement already satisfied: Jinja2&gt;=2.7 in /usr/local/lib/python3.6/dist-packages (from bokeh; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2.11.2) Requirement already satisfied: packaging&gt;=16.8 in /usr/local/lib/python3.6/dist-packages (from bokeh; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (20.4) Requirement already satisfied: typing-extensions&gt;=3.7.4 in /usr/local/lib/python3.6/dist-packages (from bokeh; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (3.7.4.3) Requirement already satisfied: PyYAML&gt;=3.10 in /usr/local/lib/python3.6/dist-packages (from bokeh; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (3.13) Requirement already satisfied: tornado&gt;=5.1 in /usr/local/lib/python3.6/dist-packages (from bokeh; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (5.1.1) Requirement already satisfied: panel&gt;=0.8.0 in /usr/local/lib/python3.6/dist-packages (from holoviews; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (0.9.7) Requirement already satisfied: pyviz-comms&gt;=0.7.3 in /usr/local/lib/python3.6/dist-packages (from holoviews; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (0.7.6) Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from cycler&gt;=0.10-&gt;matplotlib; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (1.15.0) Requirement already satisfied: fsspec&gt;=0.6.0; extra == &#34;complete&#34; in /usr/local/lib/python3.6/dist-packages (from dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (0.8.4) Requirement already satisfied: distributed&gt;=2.0; extra == &#34;complete&#34; in /usr/local/lib/python3.6/dist-packages (from dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2.30.0) Requirement already satisfied: cloudpickle&gt;=0.2.1; extra == &#34;complete&#34; in /usr/local/lib/python3.6/dist-packages (from dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (1.3.0) Requirement already satisfied: partd&gt;=0.3.10; extra == &#34;complete&#34; in /usr/local/lib/python3.6/dist-packages (from dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (1.1.0) Requirement already satisfied: multipledispatch&gt;=0.4.7 in /usr/local/lib/python3.6/dist-packages (from datashape&gt;=0.5.1-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (0.6.0) Requirement already satisfied: requests; extra == &#34;cmd&#34; in /usr/local/lib/python3.6/dist-packages (from pyct[cmd]==0.4.6-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2.23.0) Requirement already satisfied: MarkupSafe&gt;=0.23 in /usr/local/lib/python3.6/dist-packages (from Jinja2&gt;=2.7-&gt;bokeh; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (1.1.1) Requirement already satisfied: tqdm in /usr/local/lib/python3.6/dist-packages (from panel&gt;=0.8.0-&gt;holoviews; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (4.41.1) Requirement already satisfied: markdown in /usr/local/lib/python3.6/dist-packages (from panel&gt;=0.8.0-&gt;holoviews; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (3.3.2) Requirement already satisfied: psutil&gt;=5.0 in /usr/local/lib/python3.6/dist-packages (from distributed&gt;=2.0; extra == &#34;complete&#34;-&gt;dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (5.4.8) Requirement already satisfied: zict&gt;=0.1.3 in /usr/local/lib/python3.6/dist-packages (from distributed&gt;=2.0; extra == &#34;complete&#34;-&gt;dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2.0.0) Requirement already satisfied: tblib&gt;=1.6.0 in /usr/local/lib/python3.6/dist-packages (from distributed&gt;=2.0; extra == &#34;complete&#34;-&gt;dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (1.7.0) Requirement already satisfied: msgpack&gt;=0.6.0 in /usr/local/lib/python3.6/dist-packages (from distributed&gt;=2.0; extra == &#34;complete&#34;-&gt;dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (1.0.0) Requirement already satisfied: contextvars; python_version &lt; &#34;3.7&#34; in /usr/local/lib/python3.6/dist-packages (from distributed&gt;=2.0; extra == &#34;complete&#34;-&gt;dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2.4) Requirement already satisfied: sortedcontainers!=2.0.0,!=2.0.1 in /usr/local/lib/python3.6/dist-packages (from distributed&gt;=2.0; extra == &#34;complete&#34;-&gt;dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2.2.2) Requirement already satisfied: click&gt;=6.6 in /usr/local/lib/python3.6/dist-packages (from distributed&gt;=2.0; extra == &#34;complete&#34;-&gt;dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (7.1.2) Requirement already satisfied: locket in /usr/local/lib/python3.6/dist-packages (from partd&gt;=0.3.10; extra == &#34;complete&#34;-&gt;dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (0.2.0) Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests; extra == &#34;cmd&#34;-&gt;pyct[cmd]==0.4.6-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (1.24.3) Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests; extra == &#34;cmd&#34;-&gt;pyct[cmd]==0.4.6-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2020.6.20) Requirement already satisfied: idna&lt;3,&gt;=2.5 in /usr/local/lib/python3.6/dist-packages (from requests; extra == &#34;cmd&#34;-&gt;pyct[cmd]==0.4.6-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2.10) Requirement already satisfied: chardet&lt;4,&gt;=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests; extra == &#34;cmd&#34;-&gt;pyct[cmd]==0.4.6-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (3.0.4) Requirement already satisfied: importlib-metadata; python_version &lt; &#34;3.8&#34; in /usr/local/lib/python3.6/dist-packages (from markdown-&gt;panel&gt;=0.8.0-&gt;holoviews; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2.0.0) Requirement already satisfied: heapdict in /usr/local/lib/python3.6/dist-packages (from zict&gt;=0.1.3-&gt;distributed&gt;=2.0; extra == &#34;complete&#34;-&gt;dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (1.0.1) Requirement already satisfied: immutables&gt;=0.9 in /usr/local/lib/python3.6/dist-packages (from contextvars; python_version &lt; &#34;3.7&#34;-&gt;distributed&gt;=2.0; extra == &#34;complete&#34;-&gt;dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (0.14) Requirement already satisfied: zipp&gt;=0.5 in /usr/local/lib/python3.6/dist-packages (from importlib-metadata; python_version &lt; &#34;3.8&#34;-&gt;markdown-&gt;panel&gt;=0.8.0-&gt;holoviews; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (3.3.1) . Get Data . pokemon_URL = &#39;https://sds-aau.github.io/SDS-master/00_data/pokemon.csv&#39; . pokemon = pd.read_csv(pokemon_URL) . Task 1 - Data Preprocessing . Give a brief overview of data, what variables are there, how are the variables scaled and variation of the data columns. . pokemon.head() . Number Name Type1 Type2 Total HitPoints Attack Defense SpecialAttack SpecialDefense Speed Generation Legendary . 0 1 | Bulbasaur | Grass | Poison | 318 | 45 | 49 | 49 | 65 | 65 | 45 | 1 | False | . 1 2 | Ivysaur | Grass | Poison | 405 | 60 | 62 | 63 | 80 | 80 | 60 | 1 | False | . 2 3 | Venusaur | Grass | Poison | 525 | 80 | 82 | 83 | 100 | 100 | 80 | 1 | False | . 3 3 | VenusaurMega Venusaur | Grass | Poison | 625 | 80 | 100 | 123 | 122 | 120 | 80 | 1 | False | . 4 4 | Charmander | Fire | NaN | 309 | 39 | 52 | 43 | 60 | 50 | 65 | 1 | False | . pokemon.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 800 entries, 0 to 799 Data columns (total 13 columns): # Column Non-Null Count Dtype -- -- 0 Number 800 non-null int64 1 Name 800 non-null object 2 Type1 800 non-null object 3 Type2 414 non-null object 4 Total 800 non-null int64 5 HitPoints 800 non-null int64 6 Attack 800 non-null int64 7 Defense 800 non-null int64 8 SpecialAttack 800 non-null int64 9 SpecialDefense 800 non-null int64 10 Speed 800 non-null int64 11 Generation 800 non-null int64 12 Legendary 800 non-null bool dtypes: bool(1), int64(9), object(3) memory usage: 75.9+ KB . We see that the data lists 800 Pokemons divided by 13 columns. . Data Types: . string: Name | categorical: Type1, Type2, Generation and Legendary | numerical: all other | . Note that some values in Type2 are missing. This indicates pokemon that does not have a second type. . Even though Generation and legendary data are numerical, we will work with them as if they were categorical. . Some change should be added: . Replace missing values in Type2 with &#39;None&#39; | Change Type1, Type2, Generation, and Legendary to category data. | Edit Name: Total and Legendary should be renamed to Total_Stats and Legendary_Status to avoid confusion. | Fixing data before further investigation . pokemon.Type2.fillna(&#39;None&#39;,inplace=True) #Set variables as categorical pokemon[&#39;Type1&#39;] = pokemon.Type1.astype(&#39;category&#39;) pokemon[&#39;Type2&#39;] = pokemon.Type2.astype(&#39;category&#39;) pokemon[&#39;Generation&#39;] = pokemon.Generation.astype(&#39;category&#39;) pokemon[&#39;Legendary&#39;] = pokemon.Legendary.astype(&#39;category&#39;) #Change name of column pokemon.rename(columns={&#39;Total&#39;: &#39;Total_Stats&#39;,&#39;Legendary&#39;:&#39;Legendary_Status&#39;}, inplace=True) . Inspect the data further . type1 = pokemon[&#39;Type1&#39;].value_counts() . type1 . Water 112 Normal 98 Grass 70 Bug 69 Psychic 57 Fire 52 Rock 44 Electric 44 Ground 32 Dragon 32 Ghost 32 Dark 31 Poison 28 Steel 27 Fighting 27 Ice 24 Fairy 17 Flying 4 Name: Type1, dtype: int64 . type2 = pokemon[&#39;Type2&#39;].value_counts() . type2 . None 386 Flying 97 Ground 35 Poison 34 Psychic 33 Fighting 26 Grass 25 Fairy 23 Steel 22 Dark 20 Dragon 18 Water 14 Ghost 14 Ice 14 Rock 14 Fire 12 Electric 6 Normal 4 Bug 3 Name: Type2, dtype: int64 . type_total = (type1+type2).sort_values(ascending=False) . type_total . Water 126.0 Normal 102.0 Flying 101.0 Grass 95.0 Psychic 90.0 Bug 72.0 Ground 67.0 Fire 64.0 Poison 62.0 Rock 58.0 Fighting 53.0 Dark 51.0 Electric 50.0 Dragon 50.0 Steel 49.0 Ghost 46.0 Fairy 40.0 Ice 38.0 None NaN dtype: float64 . pokemon[&#39;Legendary_Status&#39;].value_counts() . False 735 True 65 Name: Legendary_Status, dtype: int64 . pokemon.describe() . Number Total_Stats HitPoints Attack Defense SpecialAttack SpecialDefense Speed . count 800.000000 | 800.00000 | 800.000000 | 800.000000 | 800.000000 | 800.000000 | 800.000000 | 800.000000 | . mean 362.813750 | 435.10250 | 69.258750 | 79.001250 | 73.842500 | 72.820000 | 71.902500 | 68.277500 | . std 208.343798 | 119.96304 | 25.534669 | 32.457366 | 31.183501 | 32.722294 | 27.828916 | 29.060474 | . min 1.000000 | 180.00000 | 1.000000 | 5.000000 | 5.000000 | 10.000000 | 20.000000 | 5.000000 | . 25% 184.750000 | 330.00000 | 50.000000 | 55.000000 | 50.000000 | 49.750000 | 50.000000 | 45.000000 | . 50% 364.500000 | 450.00000 | 65.000000 | 75.000000 | 70.000000 | 65.000000 | 70.000000 | 65.000000 | . 75% 539.250000 | 515.00000 | 80.000000 | 100.000000 | 90.000000 | 95.000000 | 90.000000 | 90.000000 | . max 721.000000 | 780.00000 | 255.000000 | 190.000000 | 230.000000 | 194.000000 | 230.000000 | 180.000000 | . pokemon[pokemon.Legendary_Status == True].describe() . Number Total_Stats HitPoints Attack Defense SpecialAttack SpecialDefense Speed . count 65.000000 | 65.000000 | 65.000000 | 65.000000 | 65.000000 | 65.000000 | 65.000000 | 65.000000 | . mean 470.215385 | 637.384615 | 92.738462 | 116.676923 | 99.661538 | 122.184615 | 105.938462 | 100.184615 | . std 173.651095 | 60.937389 | 21.722164 | 30.348037 | 28.255131 | 31.104608 | 28.827004 | 22.952323 | . min 144.000000 | 580.000000 | 50.000000 | 50.000000 | 20.000000 | 50.000000 | 20.000000 | 50.000000 | . 25% 381.000000 | 580.000000 | 80.000000 | 100.000000 | 90.000000 | 100.000000 | 90.000000 | 90.000000 | . 50% 483.000000 | 600.000000 | 91.000000 | 110.000000 | 100.000000 | 120.000000 | 100.000000 | 100.000000 | . 75% 642.000000 | 680.000000 | 105.000000 | 131.000000 | 115.000000 | 150.000000 | 120.000000 | 110.000000 | . max 721.000000 | 780.000000 | 150.000000 | 190.000000 | 200.000000 | 194.000000 | 200.000000 | 180.000000 | . pokemon[pokemon.Legendary_Status == False].describe() . Number Total_Stats HitPoints Attack Defense SpecialAttack SpecialDefense Speed . count 735.000000 | 735.000000 | 735.000000 | 735.000000 | 735.000000 | 735.000000 | 735.000000 | 735.000000 | . mean 353.315646 | 417.213605 | 67.182313 | 75.669388 | 71.559184 | 68.454422 | 68.892517 | 65.455782 | . std 208.590419 | 106.760417 | 24.808849 | 30.490153 | 30.408194 | 29.091705 | 25.669310 | 27.843038 | . min 1.000000 | 180.000000 | 1.000000 | 5.000000 | 5.000000 | 10.000000 | 20.000000 | 5.000000 | . 25% 175.500000 | 324.000000 | 50.000000 | 54.500000 | 50.000000 | 45.000000 | 50.000000 | 45.000000 | . 50% 346.000000 | 425.000000 | 65.000000 | 72.000000 | 66.000000 | 65.000000 | 65.000000 | 64.000000 | . 75% 533.500000 | 498.000000 | 79.500000 | 95.000000 | 85.000000 | 85.000000 | 85.000000 | 85.000000 | . max 715.000000 | 700.000000 | 255.000000 | 185.000000 | 230.000000 | 175.000000 | 230.000000 | 160.000000 | . pokemon.sort_values(by=&#39;Total_Stats&#39;, ascending=False).head(10) . Number Name Type1 Type2 Total_Stats HitPoints Attack Defense SpecialAttack SpecialDefense Speed Generation Legendary_Status . 426 384 | RayquazaMega Rayquaza | Dragon | Flying | 780 | 105 | 180 | 100 | 180 | 100 | 115 | 3 | True | . 164 150 | MewtwoMega Mewtwo Y | Psychic | None | 780 | 106 | 150 | 70 | 194 | 120 | 140 | 1 | True | . 163 150 | MewtwoMega Mewtwo X | Psychic | Fighting | 780 | 106 | 190 | 100 | 154 | 100 | 130 | 1 | True | . 422 382 | KyogrePrimal Kyogre | Water | None | 770 | 100 | 150 | 90 | 180 | 160 | 90 | 3 | True | . 424 383 | GroudonPrimal Groudon | Ground | Fire | 770 | 100 | 180 | 160 | 150 | 90 | 90 | 3 | True | . 552 493 | Arceus | Normal | None | 720 | 120 | 120 | 120 | 120 | 120 | 120 | 4 | True | . 712 646 | KyuremWhite Kyurem | Dragon | Ice | 700 | 125 | 120 | 90 | 170 | 100 | 95 | 5 | True | . 711 646 | KyuremBlack Kyurem | Dragon | Ice | 700 | 125 | 170 | 100 | 120 | 90 | 95 | 5 | True | . 409 373 | SalamenceMega Salamence | Dragon | Flying | 700 | 95 | 145 | 130 | 120 | 90 | 120 | 3 | False | . 413 376 | MetagrossMega Metagross | Steel | Psychic | 700 | 80 | 145 | 150 | 105 | 110 | 110 | 3 | False | . pokemon.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 800 entries, 0 to 799 Data columns (total 13 columns): # Column Non-Null Count Dtype -- -- 0 Number 800 non-null int64 1 Name 800 non-null object 2 Type1 800 non-null category 3 Type2 800 non-null category 4 Total_Stats 800 non-null int64 5 HitPoints 800 non-null int64 6 Attack 800 non-null int64 7 Defense 800 non-null int64 8 SpecialAttack 800 non-null int64 9 SpecialDefense 800 non-null int64 10 Speed 800 non-null int64 11 Generation 800 non-null category 12 Legendary_Status 800 non-null category dtypes: category(4), int64(8), object(1) memory usage: 61.3+ KB . After some data preprocessing, we now have: . 4 categorical variables (Type1, Type2, Generation, and Legendary) | 8 numerical variables (Number, 6 different stats, and total stats) | . We find that all numerical values are normally distributed (mean and median are almost identical). . Types of pokemons . Water is the most common type , whilst Ice is the least common type. Water is seen 126 times, and Ice is only seen 38 times in the 800 observed pokemons. . Allmost half (386) of the pokemons do not have a Type2. . 65 pokemons are Legendary. . Pokemon Stats . The pokemon with the least amount of stats only has 180 total stat, while the pokemon with the most has 780. . Stats generally range from 1 to 255 and with a standard dev. of ~25-32 . Legendary Pokemons are generally higher in all stats. However, some normal pokemons are included in the top 10 most powerful pokemon (Total_Stats), just 80 points short from most powerful pokemon. . Side note: The most powerful normal pokemons tend to have &quot;Mega&quot; in their name. . Visualization of Pokemon Stats . pokemon_num = pokemon._get_numeric_data() #select all numeric values! . pokemon_num . Number Total_Stats HitPoints Attack Defense SpecialAttack SpecialDefense Speed . 0 1 | 318 | 45 | 49 | 49 | 65 | 65 | 45 | . 1 2 | 405 | 60 | 62 | 63 | 80 | 80 | 60 | . 2 3 | 525 | 80 | 82 | 83 | 100 | 100 | 80 | . 3 3 | 625 | 80 | 100 | 123 | 122 | 120 | 80 | . 4 4 | 309 | 39 | 52 | 43 | 60 | 50 | 65 | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 795 719 | 600 | 50 | 100 | 150 | 100 | 150 | 50 | . 796 719 | 700 | 50 | 160 | 110 | 160 | 110 | 110 | . 797 720 | 600 | 80 | 110 | 60 | 150 | 130 | 70 | . 798 720 | 680 | 80 | 160 | 60 | 170 | 130 | 80 | . 799 721 | 600 | 80 | 110 | 120 | 130 | 90 | 70 | . 800 rows × 8 columns . sns.pairplot( pokemon, vars = pokemon_num, hue = &#39;Legendary_Status&#39;, kind = &#39;reg&#39;, corner = True, plot_kws = {&#39;line_kws&#39;:{&#39;color&#39;:&#39;black&#39;}} ) . &lt;seaborn.axisgrid.PairGrid at 0x7f3dd9053f60&gt; . Task 2 - Scaling &amp; PCA Analysis . Execute a PCA analysis on all numerical variables in the dataset. Hint: Don&#39;t forget to scale them first. Use 4 components. What is the individuel and cumulative explained variance? . . Scale that bish! . Since the data appears to be normally distributed we apply the StandardScaler . scaler = StandardScaler() . scaled_pokemon = scaler.fit_transform(pokemon_num) . for i in range(8): #We use 8 here since there are 8 features (columns) sns.distplot(scaled_pokemon[:,i],hist=False) . /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). . Perform PCA on that nig! . pca = PCA(n_components=4) . pca_pokemon = pca.fit_transform(scaled_pokemon) . pca_shape = pca_pokemon.shape # 800 rows, 4 columns - As we wanted :-) . Investigate Principal Component Variance! . Now that we have performed a PCA reduction of the pokemon data, let&#39;s see how the components perform! . pca_variance = pca.explained_variance_ratio_ #lists the variance ratio of each component (how much of the data&#39;s variance does the component explain?) . pca_cumVar =np.cumsum(pca_variance) #calculate the cumulative variance ratio of the components . pd.DataFrame({&#39;variance ratio&#39;:pca_variance, &#39;cumulative variance ratio&#39;:pca_cumVar}) . variance ratio cumulative variance ratio . 0 0.466172 | 0.466172 | . 1 0.139397 | 0.605569 | . 2 0.120448 | 0.726018 | . 3 0.097013 | 0.823031 | . The individually explained variance for the principal components are 47, 14, 12 and 9%. Overall explained variance is 82%! . Visualize PCA on Legendary Status . Note, that we have taken away all categorical data. Let&#39;s see if the PCA can distinguish between pokemon generation and legendary status, using the provided data . Legendary! . . pca_labels = { str(i): f&quot;PC {i+1} ({var:.1f}%)&quot; for i, var in enumerate(pca_variance* 100) } . fig = px.scatter_matrix( pca_pokemon, # data to plot labels=pca_labels, dimensions=range(4), color=pokemon[&quot;Legendary_Status&quot;], title = &#39;PCA on numeric types, colored by Legendary Status&#39; #found it interesting to color by Legendary Status, as these may introduce different stats ) fig.update_traces(diagonal_visible=False) fig.show() . . . sns.scatterplot(pca_pokemon[:,0], pca_pokemon[:,1], hue = pokemon[&#39;Legendary_Status&#39;]) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f3dd207dc50&gt; . PC1 is generally good at explaining the legendary status of a pokemon. However, some overlapping occurs! . Generation! . fig = px.scatter_matrix( pca_pokemon, # data to plot labels=pca_labels, dimensions=range(4), #We only have 4 components color=pokemon[&quot;Generation&quot;], title = &#39;PCA on numeric types, colored by Generation&#39; #found it interesting to color by Generation, as these may introduce different stats ) fig.update_traces(diagonal_visible=False) fig.show() . . . sns.scatterplot(pca_pokemon[:,2], pca_pokemon[:,1], hue = pokemon[&#39;Generation&#39;]) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f3dd2071390&gt; . PC2 is surprisingly good at finding the hidden patterns of the generations in combination with PC3. . Overall PCA performs really well on the pokemon data! . Task 3 - UMAP / NMF . Use a different dimensionality reduction method (eg. UMAP/NMF) – do the findings differ? . Sidenote: UMAP (Uniform Manifold Approximation and Projection) and NMF (Non-negative matrix factorization) are non-linear algorithms. NMF is mostly used for text and imagery while UMAP is mostly used for visualization purposes. . In the case of the pokemon data, we find that most have a LINEAR relationship. Thus we can expect PCA to outperform both UMAP and NMF. . . UMAP . Let&#39;s try to UMAP a picachu! . umap_model = umap.UMAP() . umap_pokemon = umap_model.fit_transform(scaled_pokemon) . UMAP_shape = umap_pokemon.shape #Woah only 2 components! . viz that Biz! . to_plot = umap_model.fit(scaled_pokemon) . sns.scatterplot(umap_pokemon[:,0],umap_pokemon[:,1], hue= pokemon[&#39;Legendary_Status&#39;]) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f3dd20d3b70&gt; . umap.plot.points( to_plot, #data we want to plot theme=&#39;fire&#39; ) . *c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* &amp; *y*. Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points. . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f3dd136f3c8&gt; . hover_data = pd.DataFrame({&#39;index&#39;: np.arange(800), &#39;label&#39;:pokemon.Generation[:800]}) hover_data[&#39;item&#39;] = hover_data.label.map( { 1:&#39;1st Gen&#39;, 2:&#39;2nd Gen&#39;, 3:&#39;3rd Gen&#39;, 4:&#39;4th Gen&#39;, 5:&#39;5th Gen&#39;, 6:&#39;6th Gen&#39; } ) . hover_data . index label item . 0 0 | 1 | 1st Gen | . 1 1 | 1 | 1st Gen | . 2 2 | 1 | 1st Gen | . 3 3 | 1 | 1st Gen | . 4 4 | 1 | 1st Gen | . ... ... | ... | ... | . 795 795 | 6 | 6th Gen | . 796 796 | 6 | 6th Gen | . 797 797 | 6 | 6th Gen | . 798 798 | 6 | 6th Gen | . 799 799 | 6 | 6th Gen | . 800 rows × 3 columns . p = umap.plot.interactive(to_plot, labels=pokemon.Generation, hover_data=hover_data, point_size=2) umap.plot.show(p) . sns.scatterplot(umap_pokemon[:,0],umap_pokemon[:,1], hue= pokemon[&#39;Generation&#39;]) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fe12e5199e8&gt; . It appears that UMAP in this situation does a much worse job at finding the underlying pattern of the data. . Let&#39;s give NMF a shot . NMF . Very similar to PCA! However, since NMF only takes positive values, we need to rescale it using the MinMaxScaler . ##import Decomposition: NMF, ##Metrics: explained_variance_score ##Preprocessing: MinMaxScaler . Scale that bish! . scaler_min_max = MinMaxScaler() . minmax_pokemon = scaler_min_max.fit_transform(pokemon_num) # scale data to range from 0 to 1. Very useful since NMF only takes positive values . for i in range(8): #We use 8 here since there are 8 features (columns) sns.distplot(minmax_pokemon[:,i],hist=False) . /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). . Perform NMF on that nig! . nmf_model = nmf.NMF(n_components=4) . nmf_pokemon = nmf_model.fit_transform(minmax_pokemon) . nmf_shape = nmf_pokemon.shape . def get_score(model, data, scorer=mt.explained_variance_score): &quot;&quot;&quot;Estimate performance of the model on the data&quot;&quot;&quot; model = model.fit(data) prediction = model.inverse_transform(model.transform(data)) #Transform data, then ... return scorer(data, prediction) # Will show how much of variance the model can recreate . PCA_score = get_score(pca,pokemon_num) . UMAP_score = get_score(umap_model, pokemon_num) . NMF_score = get_score(nmf_model, pokemon_num) . print(&#39;Shape of PCA: &#39;, pca_shape) print(&#39;Shape of UMAP: &#39;, umap_shape) print(&#39;Shape of NMF: &#39;, nmf_shape) print (&#39; &#39;) print(&#39;PCA Score &#39;,PCA_score) print(&#39;UMAP Score &#39;,UMAP_score) print(&#39;NMF Score &#39;,NMF_score) . fig = px.scatter_matrix( nmf_reduced_pokemon, #data to plot labels=pca_labels, dimensions=range(4), #We only have 4 components color=pokemon[&quot;Generation&quot;], title = &#39;NMF on numeric types, colored by Generation&#39; #found it interesting to color by Generation, as these may introduce different stats ) fig.update_traces(diagonal_visible=False) fig.show() . fig = px.scatter_matrix( nmf_reduced_pokemon, #data to plot labels=pca_labels, dimensions=range(4), #We only have 4 components color=pokemon[&quot;Legendary_Status&quot;], title = &#39;NMF on numeric types, colored by Generation&#39; #found it interesting to color by Generation, as these may introduce different stats ) fig.update_traces(diagonal_visible=False) fig.show() .",
            "url": "https://achnito.github.io/DSBA/fastpages/jupyter/2020/11/26/M1_Assignment.html",
            "relUrl": "/fastpages/jupyter/2020/11/26/M1_Assignment.html",
            "date": " • Nov 26, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Data Science for Business Applications",
            "content": ". The above code is not visible for the reader. . delete this text box . . . Introduction . In this project, we have chosen to work with an open dataset provided by Yelp. You can download and read more about the data set here: Yelp Dataset. . Yelp is an online review platform that enables people to find user recommendations of a wide range of businesses - and write reviews of their own experiences. To give a review as user is asked to give a star rating on a scale from 1 to 5 and include a description of the experience the user had with the entity. &lt;/br&gt;&lt;/br&gt; . A Breif explanation of the data . This dataset was made available for use in personal, educational and academic purposes. It is a subset consisting of reviews, businesses and users across 10 metropolitan areas. More specifically, it contains data on more than 8 million reviews, two-hundred-thousand businesses, and almost 2 million users. The dataset is downloaded as a compressed tar-file format. Uncompressed there are 5 json-files and a total of 9.8GB data - a rather huge dataset. . On a Data Science stand point this dataset is rather interesting as it contains a vast amount of data, including structured and unstructured data (text). For the more demanding project, Yelp has made an additional dataset available containing 200.000 photos that has been posted on their platform in connection with the reviews. These photos however, are not included in this project. . Description of the Datasets . A description of the dataset is listed in the documentation of the dataset. . Here, we provide you with a simplified description of the data in the datasets: . Business.json . Contains bussiness data including location data, attributes and categories: . business_id: ID of the business | name: name of the business | address: address of the business | city: city of the business | state: state of the business | postal_code: postal code of the business | latitude: latitude of the business | longitude: longitude of the business | stars: average rating of the business | review_count: number of reviews received | is_open: 1 if the business is open, 0 otherwise | attributes: | categories: multiple categories of the business | hours: business opening hours | . Review.json . Contains full review text data including the user_id that wrote the review and the business_id the review was written for: . review_id: ID of the review | user_id: ID of the user | business_id: ID of the business | stars: stars given in review | date: time of review | text: the review | useful: number of people that found the review useful | funny: number of people that found the review funny | cool: number of people that found the review cool | . User.json . Contains user data including the user&#39;s friend mapping and all the metadata associated with the user. . user_id: ID of the review | name: name of the user | review_count: number of reviews given | yelping_since: user creation date | friends: the user’s friends as an array of user_ids | useful: number of useful vores sent by the user | funny: number of funny vores sent by the user | cool: number of cool vores sent by the user | fans: number of fans the user has | elite: years the user had elite status as an array. | average_stars: average star rating given by the user | compliments: number of times the user was complimented. | . After a thorough inspection of the documentation, we decided to use three main data sets: Business.json, review.json and user.json. . These datasets contained features that we found interesting for our project as thought we could use to create our own data set. The business.json contains information about the different businesses, what kind of business they conduct, where they are located and their respective average ratings. . Review.json contains the actual review of the respective business as well the corresponding “review star”. Lastly, user.json contains information about the user who provided the review. Some of the useful columns that we thought would use are the average review score of the user, the “usefulness” of the user (an integer value, that represents how many other “yelpers” thought that this user provided valuable feedback) and the users friend list. We intended to conduct a network analysis based on the information that we have from user.json and the average review score of the users proved to be of value, as we could use this to clean the data set from “extreme” behaviour (people who are “notorious complainers” or from users who uprated a friend’s restaurant). Moreover, we planned to use the reviews (text) from review.json to experiment with Topic Modeling as well as to create a SML model that predicts the sentiment of the reviews. Despite the fact that the reviews have stars, we thought this would be a great opportunity to practice our skills. Lastly, the business.json file was intended to be used to learn facts about businesses. User_id and business_id columns were used to merge the data sources coming from different json files. Limitation: We only read in 1,000,000 lines from the review.json as well as from the user.json. Those 2 data sets were rather large, and our computers lacked the necessary memory to work with them. What this means is that we “lost” some information, however we thought that this would not interfere with our ability to demonstrate our proficiency of the newly acquired methods and tools. (Data preprocessing, EDA, Topic Modeling, SML, etc.) Eventually, our “final” data set (csv) reached a size of 1 GB, thus we had plenty of data to work with. . Installation &amp; Libraries . #Installations #Imports import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt %matplotlib inline from google.colab import files #Use to upload single files from local directory from google.colab import drive #Use to mount google drive to access documents saved in the cloud . . Get Data . drive.mount(&#39;/content/drive&#39;) #Mounts Google Drive that holds the data. . Mounted at /content/drive . . Create data set top categories.ipynb . Create a CSV file . The original file is downloaded from Yelp and we create a subset that contains the useful data. . business_json_path = &#39;D:/projects/NLP project DS/yelp_academic_dataset_business.json&#39; business = pd.read_json(business_json_path, lines=True) . business.head() . business_id name address city state postal_code latitude longitude stars review_count is_open attributes categories hours . 0 f9NumwFMBDn751xgFiRbNA | The Range At Lake Norman | 10913 Bailey Rd | Cornelius | NC | 28031 | 35.462724 | -80.852612 | 3.5 | 36 | 1 | {&#39;BusinessAcceptsCreditCards&#39;: &#39;True&#39;, &#39;BikePa... | Active Life, Gun/Rifle Ranges, Guns &amp; Ammo, Sh... | {&#39;Monday&#39;: &#39;10:0-18:0&#39;, &#39;Tuesday&#39;: &#39;11:0-20:0&#39;... | . 1 Yzvjg0SayhoZgCljUJRF9Q | Carlos Santo, NMD | 8880 E Via Linda, Ste 107 | Scottsdale | AZ | 85258 | 33.569404 | -111.890264 | 5.0 | 4 | 1 | {&#39;GoodForKids&#39;: &#39;True&#39;, &#39;ByAppointmentOnly&#39;: &#39;... | Health &amp; Medical, Fitness &amp; Instruction, Yoga,... | None | . 2 XNoUzKckATkOD1hP6vghZg | Felinus | 3554 Rue Notre-Dame O | Montreal | QC | H4C 1P4 | 45.479984 | -73.580070 | 5.0 | 5 | 1 | None | Pets, Pet Services, Pet Groomers | None | . 3 6OAZjbxqM5ol29BuHsil3w | Nevada House of Hose | 1015 Sharp Cir | North Las Vegas | NV | 89030 | 36.219728 | -115.127725 | 2.5 | 3 | 0 | {&#39;BusinessAcceptsCreditCards&#39;: &#39;True&#39;, &#39;ByAppo... | Hardware Stores, Home Services, Building Suppl... | {&#39;Monday&#39;: &#39;7:0-16:0&#39;, &#39;Tuesday&#39;: &#39;7:0-16:0&#39;, ... | . 4 51M2Kk903DFYI6gnB5I6SQ | USE MY GUY SERVICES LLC | 4827 E Downing Cir | Mesa | AZ | 85205 | 33.428065 | -111.726648 | 4.5 | 26 | 1 | {&#39;BusinessAcceptsCreditCards&#39;: &#39;True&#39;, &#39;ByAppo... | Home Services, Plumbing, Electricians, Handyma... | {&#39;Monday&#39;: &#39;0:0-0:0&#39;, &#39;Tuesday&#39;: &#39;9:0-16:0&#39;, &#39;... | . drop_columns = [&#39;address&#39;, &#39;latitude&#39;, &#39;longitude&#39;, &#39;hours&#39;] business = business.drop(drop_columns, axis= 1) . Show business into categories . business.categories.sample(10) . 46949 Nightlife, Bars, Whiskey Bars, Beer, Wine &amp; Sp... 89731 Windshield Installation &amp; Repair, Automotive, ... 66695 Hair Salons, Beauty &amp; Spas 99255 Professional Services, Lawyers, Financial Serv... 171605 Nail Salons, Massage, Health &amp; Medical, Cosmet... 171992 Fashion, Used, Vintage &amp; Consignment, Shopping... 79846 Salad, Ramen, Japanese, Asian Fusion, Restaurants 140752 Adult Entertainment, Counseling &amp; Mental Healt... 123696 Chicken Wings, Pizza, Italian, Restaurants 149195 Outlet Stores, Shopping Name: categories, dtype: object . Look for businesses where category contains the word Nightlife or Bar. . business_nightlife = business[business[&#39;categories&#39;].str.contains(&#39;Nightlife|Bar&#39;, case= False, na= False)] . business_explode = business.assign(categories = business.categories.str.split(&#39;, &#39;)).explode(&#39;categories&#39;) . print(&#39;The top 10 categories:&#39;) business_explode.categories.value_counts()[:10] . The top 10 categories: . Restaurants 63944 Shopping 34644 Food 32991 Home Services 22487 Beauty &amp; Spas 20520 Health &amp; Medical 19227 Local Services 15783 Automotive 14720 Nightlife 14211 Bars 12400 Name: categories, dtype: int64 . visuals = business_explode.categories.value_counts()[:10] . vis = pd.DataFrame(visuals) . vis . categories . Restaurants 63944 | . Shopping 34644 | . Food 32991 | . Home Services 22487 | . Beauty &amp; Spas 20520 | . Health &amp; Medical 19227 | . Local Services 15783 | . Automotive 14720 | . Nightlife 14211 | . Bars 12400 | . plt.figure(figsize= (25, 15)) plt.style.use(&#39;ggplot&#39;) sns.barplot(vis.categories, vis.index) plt.title(&#39;Top 10 categories of businesses&#39;, fontdict= {&#39;fontsize&#39;: 24}) plt.xlabel(&#39;Number of businesses&#39;, fontdict= {&#39;fontsize&#39;: 18}) plt.tick_params(labelsize= 16) plt.savefig(&#39;categories.png&#39;) . Reade in a chunk of reviews from the original dataset. . reviews_json_path = &#39;D:/projects/NLP project DS/yelp_academic_dataset_review.json&#39; . size = 1000000 . review = pd.read_json(reviews_json_path, lines=True, dtype={&#39;review_id&#39;:str,&#39;user_id&#39;:str, &#39;business_id&#39;:str,&#39;stars&#39;:int, &#39;date&#39;:str,&#39;text&#39;:str,&#39;useful&#39;:int, &#39;funny&#39;:int,&#39;cool&#39;:int}, chunksize=size) . If you read in a chunk, read_json() return a JsonReader object for iteration. . Merge business and reviews dataset . chunk_list = [] for chunk_review in review: chunk_review = chunk_review.drop([&#39;review_id&#39;,&#39;useful&#39;,&#39;funny&#39;,&#39;cool&#39;], axis= 1) chunk_review = chunk_review.rename(columns= {&#39;stars&#39;: &#39;review_stars&#39;}) chunk_merged = pd.merge(business_nightlife, chunk_review, on= &#39;business_id&#39;, how= &#39;inner&#39;) print(f&quot;{chunk_merged.shape[0]} out of {size:,} related reviews&quot;) chunk_list.append(chunk_merged) . 273589 out of 1,000,000 related reviews 276014 out of 1,000,000 related reviews 264422 out of 1,000,000 related reviews 272956 out of 1,000,000 related reviews 261842 out of 1,000,000 related reviews 259562 out of 1,000,000 related reviews 260244 out of 1,000,000 related reviews 256680 out of 1,000,000 related reviews 4378 out of 1,000,000 related reviews . business_nightlife_review = pd.concat(chunk_list, ignore_index=True, join=&#39;outer&#39;, axis=0) . Check merged dataset . business_nightlife_review.head() . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date . 0 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &#39;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | cSQnJ7JTY78ki5ai57kZ9A | 4 | 9.99 for a dozen raised is a Lil much the cake... | 2015-08-07 15:02:50 | . 1 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &#39;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | 5_CoaRC22jwmuUzZwlRG_g | 1 | Dirty dinning list will not go here again sad ... | 2016-02-13 17:50:23 | . 2 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &#39;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | 5_CoaRC22jwmuUzZwlRG_g | 5 | Just went here for a late night donut fix lol.... | 2015-09-29 06:18:47 | . 3 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &#39;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | c5ebpS7ex6npffT9Nlvqvw | 1 | Would of given 0 stars if possible first impre... | 2015-11-10 18:55:53 | . 4 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &#39;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | EXys-sSmm5auoqs6Jkyh7g | 5 | This is my first Yelp review. We just tried Mi... | 2016-01-25 02:26:47 | . business_nightlife_review.sample(5) . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date . 1256429 pDSl9xdKJCdN4vu8z26cEA | Coyote Ugly Saloon | Las Vegas | NV | 89109 | 2.5 | 344 | 1 | {&#39;Alcohol&#39;: &#39;u&#39;full_bar&#39;&#39;, &#39;OutdoorSeating&#39;: &#39;... | Bars, Nightlife, Adult Entertainment | W4MoCkTR35IIflqBl-SGQw | 5 | They played a good variety of music. The coyot... | 2013-10-28 16:49:18 | . 323651 DK-RfkH_GXFqjEOipl8kOw | Abbey Road Pub &amp; Patio | Mississauga | ON | L5L 1W8 | 3.5 | 23 | 1 | {&#39;RestaurantsGoodForGroups&#39;: &#39;True&#39;, &#39;Business... | Pubs, Bars, Nightlife | RRP7_dqWbnpeQx7LE0x3CA | 3 | Love the front section...Great atmosphere on F... | 2018-02-17 01:28:46 | . 2030367 1aEx-I_JdWPl6ITQDQAJxQ | Village Barber Shop | Henderson | NV | 89052 | 4.0 | 113 | 1 | {&#39;BusinessParking&#39;: &#39;{&#39;garage&#39;: False, &#39;street... | Barbers, Beauty &amp; Spas, Hair Stylists, Hair Sa... | bgJLZAEaB04x9UQIm3sATQ | 5 | Love this place. The folks who run the chairs ... | 2014-06-24 15:40:39 | . 1921867 5j2ugUALtjsa2nkV1YGq5Q | House Modern Sushi Restaurant | Mesa | AZ | 85204 | 4.0 | 311 | 1 | {&#39;RestaurantsReservations&#39;: &#39;True&#39;, &#39;Caters&#39;: ... | Restaurants, Sushi Bars, Japanese, Asian Fusion | 7v7-05j0pi5RDbvNJQB5LA | 2 | You get what you pay for. The prices here are ... | 2014-02-23 01:00:16 | . 448286 HG3ROmv3FJZTMJPpThSXOw | Luke Wholey&#39;s Wild Alaskan Grille | Pittsburgh | PA | 15222 | 4.0 | 470 | 1 | {&#39;RestaurantsPriceRange2&#39;: &#39;2&#39;, &#39;OutdoorSeatin... | Cocktail Bars, Sushi Bars, Bars, Nightlife, Re... | 5NiG9F8yaZ9KIsfk3TGAYQ | 5 | I am a seafood lover.. Not ever terribly picky... | 2014-09-17 23:16:45 | . business_nightlife_review.shape . (2129687, 14) . Save to a CSV file . name = &#39;business_nightlife_review.csv&#39; business_nightlife_review.to_csv(name, index= False) . . Market delimination . Read in data . df = pd.read_csv(&#39;data/nightlife_review.csv&#39;) . df.shape . (2129687, 15) . Look at the top of data set . df.head(10) . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date experience . 0 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | cSQnJ7JTY78ki5ai57kZ9A | 4 | 9.99 for a dozen raised is a Lil much the cake... | 2015-08-07 15:02:50 | 0 | . 1 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | 5_CoaRC22jwmuUzZwlRG_g | 1 | Dirty dinning list will not go here again sad ... | 2016-02-13 17:50:23 | 0 | . 2 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | 5_CoaRC22jwmuUzZwlRG_g | 5 | Just went here for a late night donut fix lol.... | 2015-09-29 06:18:47 | 0 | . 3 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | c5ebpS7ex6npffT9Nlvqvw | 1 | Would of given 0 stars if possible first impre... | 2015-11-10 18:55:53 | 0 | . 4 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | EXys-sSmm5auoqs6Jkyh7g | 5 | This is my first Yelp review. We just tried Mi... | 2016-01-25 02:26:47 | 0 | . 5 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | TPXPy309BrtLXbRorw3WKg | 2 | The second star is for the delicious apple fri... | 2015-09-19 18:22:09 | 0 | . 6 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | PNa8MaoGmptKej1K3hPVow | 2 | Ok service &amp; donuts. Bad boba(boba was hard an... | 2016-03-05 20:45:48 | 0 | . 7 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | YEg0bICRG3o_MSNqbcIZaw | 2 | Update: Wow. I just read through Missy&#39;s healt... | 2016-03-08 15:43:15 | 0 | . 8 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 1 | . 9 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 1 | . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 2129687 entries, 0 to 2129686 Data columns (total 15 columns): # Column Dtype -- 0 business_id object 1 name object 2 city object 3 state object 4 postal_code object 5 stars float64 6 review_count int64 7 is_open int64 8 attributes object 9 categories object 10 user_id object 11 review_stars int64 12 text object 13 date object 14 experience int64 dtypes: float64(1), int64(4), object(10) memory usage: 243.7+ MB . Create supply and demand proxies &amp; pandas data frame . supply = pd.DataFrame(df.groupby(&#39;city&#39;).name.nunique().sort_values(ascending= False)) . supply.columns = [&#39;supply&#39;] . supply.head() . supply . city . Las Vegas 3080 | . Toronto 2755 | . Phoenix 1449 | . Montréal 1166 | . Charlotte 1093 | . demand = pd.DataFrame(df.groupby(&#39;city&#39;).size().sort_values(ascending= False)) . demand.columns = [&#39;demand&#39;] . demand.head() . demand . city . Las Vegas 727107 | . Phoenix 211114 | . Toronto 156352 | . Scottsdale 141971 | . Charlotte 120033 | . df_dem_sup = supply.merge(demand, on= &#39;city&#39;) . df_dem_sup.head() . supply demand . city . Las Vegas 3080 | 727107 | . Toronto 2755 | 156352 | . Phoenix 1449 | 211114 | . Montréal 1166 | 38870 | . Charlotte 1093 | 120033 | . Calculate market saturation and save it in column . df_dem_sup[&#39;market_saturation&#39;] = df_dem_sup.supply / df_dem_sup.demand * 100 . Sort the dataframe entries by market saturation (ascending) . df_dem_sup = df_dem_sup[(df_dem_sup.demand &gt; 5000)] . df_dem_sup = df_dem_sup.sort_values(by= &#39;market_saturation&#39;) . df_dem_sup.shape . (28, 3) . df_dem_sup.head(20) . supply demand market_saturation . city . Las Vegas 3080 | 727107 | 0.423597 | . Henderson 328 | 53926 | 0.608241 | . Scottsdale 866 | 141971 | 0.609984 | . Gilbert 208 | 31056 | 0.669758 | . Phoenix 1449 | 211114 | 0.686359 | . Chandler 337 | 47316 | 0.712233 | . Goodyear 67 | 9083 | 0.737642 | . Tempe 418 | 55787 | 0.749279 | . Peoria 137 | 16001 | 0.856196 | . Charlotte 1093 | 120033 | 0.910583 | . Surprise 84 | 8546 | 0.982916 | . North Las Vegas 102 | 10260 | 0.994152 | . Huntersville 61 | 6004 | 1.015989 | . Mesa 367 | 35609 | 1.030638 | . Glendale 286 | 26991 | 1.059612 | . Pittsburgh 985 | 82639 | 1.191931 | . Madison 482 | 37497 | 1.285436 | . Cleveland 637 | 48335 | 1.317886 | . Lakewood 114 | 8371 | 1.361844 | . Markham 191 | 12081 | 1.580995 | . Create visual summary of market saturation . plt.figure(figsize= (25, 15)) plt.title(&#39;20 LOWEST SATURATED MARKETS (LOWER IS BETTER)&#39;, fontdict= {&#39;fontsize&#39;: 24}) sns.barplot(df_dem_sup.market_saturation[:20], df_dem_sup.index[:20]) plt.ylabel(&#39;cities&#39;, fontdict= {&#39;fontsize&#39;: 18}) plt.xlabel(&#39;market saturation&#39;, rotation= 0, fontdict= {&#39;fontsize&#39;: 18}) plt.tick_params(labelsize= 16) plt.savefig(&#39;market_saturation.png&#39;) . Phoenix is the chosen city, as the market saturation is relatively low and there is a rather high demand present in the city. . phoenix = df[(df.city == &#39;Phoenix&#39;)] phoenix.head() . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date experience . 8 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 1 | . 9 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 1 | . 10 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | E9IJMZ2njmG1LOMmOhzeBg | 5 | Such a fun atmosphere!! Went there last night ... | 2019-01-12 21:25:24 | 1 | . 11 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 7KZhUr0i3K202Ux1-OGOhQ | 4 | This place is new and very close to us, so we ... | 2018-07-30 01:57:23 | 1 | . 12 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | UIKrJGEyTCWKaAvWDhLJug | 5 | This is exactly what this neighborhood needed.... | 2018-07-23 02:01:32 | 1 | . phoenix.shape . (211114, 15) . phoenix.isnull().sum() . business_id 0 name 0 city 0 state 0 postal_code 7 stars 0 review_count 0 is_open 0 attributes 106 categories 0 user_id 0 review_stars 0 text 0 date 0 experience 0 dtype: int64 . Save data set to CSV . name = &#39;data/phoenix_nightlife.csv&#39; phoenix.to_csv(name, index= False) . . Merge users phoenix. . Import JSON in chunk . path = &#39;data/yelp_academic_dataset_user.json&#39; . size = 1000000 . users = pd.read_json(path, lines= True, dtype= {&#39;user_id&#39;: str, &#39;name&#39;: str, &#39;review_count&#39;: int, &#39;yelping_since&#39;: str, &#39;friends&#39;: list, &#39;useful&#39;: int, &#39;funny&#39;: int, &#39;cool&#39;: int, &#39;fans&#39;: int, &#39;elite&#39;: list, &#39;avarage_stars&#39;: float, &#39;compliment_hot&#39;: int, &#39;comliment_more&#39;: int, &#39;compliment_profile&#39;: 42, &#39;compliment_cute&#39;: int, &#39;comliment_list&#39;: int, &#39;compliment_note&#39;: int, &#39;comliment_plain&#39;: int, &#39;compliment_cool&#39;: int, &#39;compliment_funny&#39;: int, &#39;compliment_writer&#39;: int, &#39;compliment_photos&#39;: int}, chunksize= size) . Import phoenix data set . phoenix = pd.read_csv(&#39;data/phoenix_nightlife.csv&#39;) . phoenix.shape . (211114, 15) . phoenix.head(3) . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date experience . 0 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 1 | . 1 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 1 | . 2 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | E9IJMZ2njmG1LOMmOhzeBg | 5 | Such a fun atmosphere!! Went there last night ... | 2019-01-12 21:25:24 | 1 | . Iterate through users and merge with phoenix data set . Rename review_count column in users. Review count column now refers to number of reviews for the specific business and num_review_written refers to the number of reviews written by that user. . chunk_list = [] for chunk_user in users: chunk_user = chunk_user.drop([&#39;name&#39;, &#39;yelping_since&#39;, &#39;funny&#39;, &#39;cool&#39;, &#39;fans&#39;, &#39;elite&#39;, &#39;compliment_hot&#39;, &#39;compliment_more&#39;, &#39;compliment_profile&#39;, &#39;compliment_cute&#39;, &#39;compliment_list&#39;, &#39;compliment_note&#39;, &#39;compliment_plain&#39;, &#39;compliment_cool&#39;, &#39;compliment_funny&#39;, &#39;compliment_writer&#39;, &#39;compliment_photos&#39;], axis= 1) chunk_user = chunk_user.rename(columns= {&#39;review_count&#39;: &#39;num_reviews_written&#39;}) chunk_merged = pd.merge(phoenix, chunk_user, on= &#39;user_id&#39;, how= &#39;inner&#39;) print(f&quot;{chunk_merged.shape[0]} out of {size:,} related users.&quot;) chunk_list.append(chunk_merged) . 180426 out of 1,000,000 related users. 30688 out of 1,000,000 related users. . Concatenate data frame &quot;pieces&quot; into one data frame. . phoenix_nightlife_user = pd.concat(chunk_list, ignore_index= True, join= &#39;outer&#39;, axis= 0) . phoenix_nightlife_user.shape . (211114, 19) . phoenix_nightlife_user.head(3) . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date experience num_reviews_written useful friends average_stars . 0 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 1 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | . 1 ku9ak9cQnIGBCXBtRd61tQ | Spoke &amp; Wheel - Phoenix | Phoenix | AZ | 85020.0 | 4.0 | 357 | 1 | {&#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;, &#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;... | Bars, Beer, Wine &amp; Spirits, Sandwiches, Breakf... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | This is our favorite local spot! The wings are... | 2018-08-30 01:37:47 | 1 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | . 2 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 1 | 12 | 4 | p12DAvNJZ5szp8jP69NUbA, JdJ0b9QZKVrjv_nicDhABw... | 5.0 | . Create experience column, based on review star. . phoenix_nightlife_user = phoenix_nightlife_user.drop(&#39;experience&#39;, axis= 1) phoenix_nightlife_user.shape . (211114, 18) . Positive experience = 1, Negative experience = 0 . mappings = {1: 0, 2: 0, 3: 0, 4: 1, 5: 1} phoenix_nightlife_user[&#39;experience&#39;] = phoenix_nightlife_user.review_stars.map(mappings) phoenix_nightlife_user.experience.sample(5) . 27665 1 90276 1 5348 1 131733 1 160394 0 Name: experience, dtype: int64 . Visualize distribution of columns before removing outliers . plt.title(&#39;Distribution of avarage star ratings of users&#39;) plt.hist(phoenix_nightlife_user.average_stars); . plt.title(&#39;Distribution of number of reviews written per user&#39;) plt.yscale(&#39;log&#39;) plt.hist(phoenix_nightlife_user.num_reviews_written); . plt.title(&#39;Distribution of number of reviews per business&#39;) plt.hist(phoenix_nightlife_user.review_count); . Remove outliers . IQR = 75th percentile - 25th percentile (Q3 - Q1). Outlier (left tail) = 25th percentile - IQR 1.5. Outlier (right tail) = 75th percentile + IQR 1.5. . Calculate IQR for the columns we intend to &quot;clean&quot;. . IQR_stars = phoenix_nightlife_user.average_stars.quantile(0.75) - phoenix_nightlife_user.average_stars.quantile(0.25) IQR_num_rev_wri = phoenix_nightlife_user.num_reviews_written.quantile(0.75) - phoenix_nightlife_user.num_reviews_written.quantile(0.25) IQR_rev_count = phoenix_nightlife_user.review_count.quantile(0.75) - phoenix_nightlife_user.review_count.quantile(0.25) . Calculate thresholds for 3 variables to classify outliers. . outlier_stars = IQR_stars * 1.5 outlier_num_rev_wri = IQR_num_rev_wri * 1.5 outlier_rev_count = IQR_rev_count * 1.5 . Calculate Q1 and Q3 for 3 variables . Q1_stars = phoenix_nightlife_user.average_stars.quantile(0.25) Q3_stars = phoenix_nightlife_user.average_stars.quantile(0.75) Q1_num = phoenix_nightlife_user.num_reviews_written.quantile(0.25) Q3_num = phoenix_nightlife_user.num_reviews_written.quantile(0.75) Q1_rev = phoenix_nightlife_user.review_count.quantile(0.25) Q3_rev = phoenix_nightlife_user.review_count.quantile(0.75) . Create final data set, that contains businesses in Phoenix and their respective reviews, along with useful information about the user who gave said review. &quot;Outliers&quot; are removed from data set. . phoenix_nightlife_user = phoenix_nightlife_user[(phoenix_nightlife_user.average_stars &gt;= Q1_stars - outlier_stars) | (phoenix_nightlife_user.average_stars &lt;= Q3_stars + outlier_stars) &amp; (phoenix_nightlife_user.num_reviews_written &gt;= Q1_num - outlier_num_rev_wri) | (phoenix_nightlife_user.num_reviews_written &lt;= Q3_num + outlier_num_rev_wri) &amp; (phoenix_nightlife_user.review_count &gt;= Q1_rev - outlier_rev_count) | (phoenix_nightlife_user.review_count &lt;= Q3_rev + outlier_rev_count)] . phoenix_nightlife_user.shape . (211114, 19) . name = &#39;data/phoenix_users.csv&#39; phoenix_nightlife_user.to_csv(name, index= False) . Visualize distribution of columns after removing outliers . plt.title(&#39;Distribution of avarage star ratings of users&#39;) plt.hist(phoenix_nightlife_user.average_stars); . plt.title(&#39;Distribution of number of reviews written per user&#39;) plt.yscale(&#39;log&#39;) plt.hist(phoenix_nightlife_user.num_reviews_written); . plt.title(&#39;Distribution of number of reviews per business&#39;) plt.hist(phoenix_nightlife_user.review_count); . . Data Exploration . Define data paths . path = &#39;/content/drive/MyDrive/DSBA_Project/yelp_dataset/phoenix_nightlife.csv&#39; . Load DataFrame . df = pd.read_csv(path) . df.head() . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date experience . 0 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 1 | . 1 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 1 | . 2 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | E9IJMZ2njmG1LOMmOhzeBg | 5 | Such a fun atmosphere!! Went there last night ... | 2019-01-12 21:25:24 | 1 | . 3 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 7KZhUr0i3K202Ux1-OGOhQ | 4 | This place is new and very close to us, so we ... | 2018-07-30 01:57:23 | 1 | . 4 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | UIKrJGEyTCWKaAvWDhLJug | 5 | This is exactly what this neighborhood needed.... | 2018-07-23 02:01:32 | 1 | . We start of by getting an overview of the positive and negative ratings . star_rating = df.groupby([&#39;business_id&#39;, &#39;name&#39;, &#39;city&#39;, &#39;review_count&#39;])[&#39;stars&#39;].mean() . star_rating = pd.DataFrame(star_rating).sort_values(by=[&#39;stars&#39;, &#39;review_count&#39;], ascending = [False, False]) . star_rating.reset_index(inplace=True) . star_rating.head(20) . index business_id name city review_count stars . 0 845 | Xg5qEQiB-7L6kGJ5F4K3bQ | Little Miss BBQ | Phoenix | 2329 | 5.0 | . 1 1579 | zJ__js7-Cx_wU4GhdBdeRA | The Refuge Coffee &amp; Wine | Phoenix | 163 | 5.0 | . 2 1038 | eZqoDfBg-xOS8WdcZCYM2A | JL Smokehouse | Phoenix | 146 | 5.0 | . 3 612 | O4kYogia0fbF85pCX10XiA | Koi Poke - Arcadia | Phoenix | 144 | 5.0 | . 4 1059 | fHKvkiSHuUYM10Z7KqBrbQ | ILLEET Entertainment | Phoenix | 124 | 5.0 | . 5 170 | 5pEQwYimyfp5wpeudYNahw | El Charro Hipster Bar and Cafe | Phoenix | 122 | 5.0 | . 6 1051 | exwQfCcTmOnMFn94SQZORw | Pure Barre - Phoenix | Phoenix | 82 | 5.0 | . 7 826 | X1-AbThDu9tmijcGnsi8Ug | Binkley&#39;s Restaurant | Phoenix | 79 | 5.0 | . 8 680 | R9GAIXv4DcbgZH-eUd_qIw | Giving Tree Cafe | Phoenix | 67 | 5.0 | . 9 1521 | x0g7c-7tnsMaZtnlZ4CadQ | True North Barber Shop | Phoenix | 52 | 5.0 | . 10 607 | NvdId69PI1Fq9d8EfzxQ0g | Snip Snip | Phoenix | 49 | 5.0 | . 11 326 | COfmsJPeRu_4qFzDpvAAgw | Rewined Beer And Wine Bar | Phoenix | 46 | 5.0 | . 12 835 | XRp0fJNimSJz2ZINgz3nDA | Niza Lideo | Phoenix | 42 | 5.0 | . 13 912 | _TVPXjF1gDXEiWrKAYo1XA | Sidecar Social Club | Phoenix | 33 | 5.0 | . 14 35 | 0P7gYbegHEH0lFkwBoA0og | Front Pourch Brewing | Phoenix | 32 | 5.0 | . 15 1239 | l9uGl3sRTpws4ulfwH3Cmw | Pop&#39;s Barbershop | Phoenix | 31 | 5.0 | . 16 1143 | i8nem7_isYgxPgEs1UV_xg | El Migos WATER-N-ICE | Phoenix | 30 | 5.0 | . 17 279 | AftgPs11yy6D__xM4yr2FQ | The Studio - A Social Fitness Club | Phoenix | 29 | 5.0 | . 18 475 | IVLxwoFx_zXuWJt3cEveAA | Limoz | Phoenix | 29 | 5.0 | . 19 749 | UB-tbeHJk6z9IOEzl_EY3g | Lacuna Kava Bar | Phoenix | 28 | 5.0 | . star_rating_skimmed = star_rating[star_rating.review_count &gt;= 10] . star_rating_skimmed . index business_id name city review_count stars . 0 845 | Xg5qEQiB-7L6kGJ5F4K3bQ | Little Miss BBQ | Phoenix | 2329 | 5.0 | . 1 1579 | zJ__js7-Cx_wU4GhdBdeRA | The Refuge Coffee &amp; Wine | Phoenix | 163 | 5.0 | . 2 1038 | eZqoDfBg-xOS8WdcZCYM2A | JL Smokehouse | Phoenix | 146 | 5.0 | . 3 612 | O4kYogia0fbF85pCX10XiA | Koi Poke - Arcadia | Phoenix | 144 | 5.0 | . 4 1059 | fHKvkiSHuUYM10Z7KqBrbQ | ILLEET Entertainment | Phoenix | 124 | 5.0 | . ... ... | ... | ... | ... | ... | ... | . 1558 203 | 7U7C1xcvuObJqXFp6IWKWQ | J &amp; Gios Barber Shop | Phoenix | 10 | 2.0 | . 1559 799 | W6Do-RqSULOil1LtZ6XwxA | The Original BBQ 2 U | Phoenix | 10 | 2.0 | . 1577 1027 | e69v6hfCkr25M5DaLSS8CQ | Long Wongs | Phoenix | 76 | 1.5 | . 1578 956 | avcKxfAIAImSWv8bKcnGzg | Club Luxx | Phoenix | 58 | 1.5 | . 1579 1093 | g7EXpsDsd-xLQVajvEUnrg | Fruitlicious | Phoenix | 13 | 1.5 | . 1232 rows × 6 columns . sns.barplot(star_rating_skimmed.review_count[:20], star_rating_skimmed.name[:20]) plt.xscale(&#39;log&#39;) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. FutureWarning . You were here . negative_ratings = len(df[df[&quot;stars&quot;]&lt;2]) positive_ratings = len(df[df[&quot;stars&quot;]&gt;3]) . print(&quot;Total negative reviews: {}&quot;.format(negative_ratings)) print(&quot;Total positive reviews: {}&quot;.format(positive_ratings)) . Total negative reviews: 204 Total positive reviews: 186212 . Let us now get an overview of the top rated businesses in phoenix . top_rated = df[df[&quot;stars&quot;]&gt;3] top_rated_dict ={} for business_id in top_rated[&quot;business_id&quot;].values: try : top_rated_dict[business_id] = top_rated_dict[business_id]=5 except: top_rated_dict[business_id]=0 # topbusiness = pd.DataFrame.from_dict(data= top_rated_dict,orient=&quot;index&quot;) topbusiness.reset_index(inplace=True) topbusiness.columns = [&#39;business_id&#39;, &#39;stars&#39;] del(top_rated_dict) del(top_rated) . top_count= 20 right=pd.DataFrame(df[[&#39;business_id&#39;,&quot;name&quot;,]].values, columns=[&#39;business_id&#39;,&quot;Business name&quot;]) top_business_data = pd.merge(topbusiness,right=right, how=&quot;inner&quot;,on=&#39;business_id&#39;) top_business_data.sort_values(&quot;stars&quot;)[::-1][:top_count].plot(x=&quot;Business name&quot;,y=&quot;stars&quot;, kind=&quot;bar&quot;,figsize=(14,6), title=&#39;Positive reviews&#39;).set_ylabel(&quot;Total ratings&quot;) del(topbusiness) del(right) .",
            "url": "https://achnito.github.io/DSBA/fastpages/jupyter/2020/11/26/Exam_Project_Hide.html",
            "relUrl": "/fastpages/jupyter/2020/11/26/Exam_Project_Hide.html",
            "date": " • Nov 26, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Data Science for Business Applications",
            "content": ". The above code is not visible for the reader. . delete this text box . . . Introduction . In this project, we have chosen to work with an open dataset provided by Yelp. You can download and read more about the data set here: Yelp Dataset. . Yelp is an online review platform that enables people to find user recommendations of a wide range of businesses - and write reviews of their own experiences. To give a review as user is asked to give a star rating on a scale from 1 to 5 and include a description of the experience the user had with the entity. &lt;/br&gt;&lt;/br&gt; . A Breif explanation of the data . This dataset was made available for use in personal, educational and academic purposes. It is a subset consisting of reviews, businesses and users across 10 metropolitan areas. More specifically, it contains data on more than 8 million reviews, two-hundred-thousand businesses, and almost 2 million users. The dataset is downloaded as a compressed tar-file format. Uncompressed there are 5 json-files and a total of 9.8GB data - a rather huge dataset. . On a Data Science stand point this dataset is rather interesting as it contains a vast amount of data, including structured and unstructured data (text). For the more demanding project, Yelp has made an additional dataset available containing 200.000 photos that has been posted on their platform in connection with the reviews. These photos however, are not included in this project. . Description of the Datasets . A description of the dataset is listed in the documentation of the dataset. . Here, we provide you with a simplified description of the data in the datasets: . Business.json . Contains bussiness data including location data, attributes and categories: . business_id: ID of the business | name: name of the business | address: address of the business | city: city of the business | state: state of the business | postal_code: postal code of the business | latitude: latitude of the business | longitude: longitude of the business | stars: average rating of the business | review_count: number of reviews received | is_open: 1 if the business is open, 0 otherwise | attributes: | categories: multiple categories of the business | hours: business opening hours | . Review.json . Contains full review text data including the user_id that wrote the review and the business_id the review was written for: . review_id: ID of the review | user_id: ID of the user | business_id: ID of the business | stars: stars given in review | date: time of review | text: the review | useful: number of people that found the review useful | funny: number of people that found the review funny | cool: number of people that found the review cool | . User.json . Contains user data including the user&#39;s friend mapping and all the metadata associated with the user. . user_id: ID of the review | name: name of the user | review_count: number of reviews given | yelping_since: user creation date | friends: the user’s friends as an array of user_ids | useful: number of useful vores sent by the user | funny: number of funny vores sent by the user | cool: number of cool vores sent by the user | fans: number of fans the user has | elite: years the user had elite status as an array. | average_stars: average star rating given by the user | compliments: number of times the user was complimented. | . After a thorough inspection of the documentation, we decided to use three main data sets: Business.json, review.json and user.json. . These datasets contained features that we found interesting for our project as thought we could use to create our own data set. The business.json contains information about the different businesses, what kind of business they conduct, where they are located and their respective average ratings. . Review.json contains the actual review of the respective business as well the corresponding “review star”. Lastly, user.json contains information about the user who provided the review. Some of the useful columns that we thought would use are the average review score of the user, the “usefulness” of the user (an integer value, that represents how many other “yelpers” thought that this user provided valuable feedback) and the users friend list. We intended to conduct a network analysis based on the information that we have from user.json and the average review score of the users proved to be of value, as we could use this to clean the data set from “extreme” behaviour (people who are “notorious complainers” or from users who uprated a friend’s restaurant). Moreover, we planned to use the reviews (text) from review.json to experiment with Topic Modeling as well as to create a SML model that predicts the sentiment of the reviews. Despite the fact that the reviews have stars, we thought this would be a great opportunity to practice our skills. Lastly, the business.json file was intended to be used to learn facts about businesses. User_id and business_id columns were used to merge the data sources coming from different json files. Limitation: We only read in 1,000,000 lines from the review.json as well as from the user.json. Those 2 data sets were rather large, and our computers lacked the necessary memory to work with them. What this means is that we “lost” some information, however we thought that this would not interfere with our ability to demonstrate our proficiency of the newly acquired methods and tools. (Data preprocessing, EDA, Topic Modeling, SML, etc.) Eventually, our “final” data set (csv) reached a size of 1 GB, thus we had plenty of data to work with. . Installation &amp; Libraries . #Imports import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt %matplotlib inline from google.colab import files #Use to upload single files from local directory from google.colab import drive #Use to mount google drive to access documents saved in the cloud . Get Data . drive.mount(&#39;/content/drive&#39;) #Mounts Google Drive that holds the data. . Mounted at /content/drive . . Create data set top categories.ipynb . Create a CSV file . The original file is downloaded from Yelp and we create a subset that contains the useful data. . business_json_path = &#39;D:/projects/NLP project DS/yelp_academic_dataset_business.json&#39; business = pd.read_json(business_json_path, lines=True) . business.head() . business_id name address city state postal_code latitude longitude stars review_count is_open attributes categories hours . 0 f9NumwFMBDn751xgFiRbNA | The Range At Lake Norman | 10913 Bailey Rd | Cornelius | NC | 28031 | 35.462724 | -80.852612 | 3.5 | 36 | 1 | {&#39;BusinessAcceptsCreditCards&#39;: &#39;True&#39;, &#39;BikePa... | Active Life, Gun/Rifle Ranges, Guns &amp; Ammo, Sh... | {&#39;Monday&#39;: &#39;10:0-18:0&#39;, &#39;Tuesday&#39;: &#39;11:0-20:0&#39;... | . 1 Yzvjg0SayhoZgCljUJRF9Q | Carlos Santo, NMD | 8880 E Via Linda, Ste 107 | Scottsdale | AZ | 85258 | 33.569404 | -111.890264 | 5.0 | 4 | 1 | {&#39;GoodForKids&#39;: &#39;True&#39;, &#39;ByAppointmentOnly&#39;: &#39;... | Health &amp; Medical, Fitness &amp; Instruction, Yoga,... | None | . 2 XNoUzKckATkOD1hP6vghZg | Felinus | 3554 Rue Notre-Dame O | Montreal | QC | H4C 1P4 | 45.479984 | -73.580070 | 5.0 | 5 | 1 | None | Pets, Pet Services, Pet Groomers | None | . 3 6OAZjbxqM5ol29BuHsil3w | Nevada House of Hose | 1015 Sharp Cir | North Las Vegas | NV | 89030 | 36.219728 | -115.127725 | 2.5 | 3 | 0 | {&#39;BusinessAcceptsCreditCards&#39;: &#39;True&#39;, &#39;ByAppo... | Hardware Stores, Home Services, Building Suppl... | {&#39;Monday&#39;: &#39;7:0-16:0&#39;, &#39;Tuesday&#39;: &#39;7:0-16:0&#39;, ... | . 4 51M2Kk903DFYI6gnB5I6SQ | USE MY GUY SERVICES LLC | 4827 E Downing Cir | Mesa | AZ | 85205 | 33.428065 | -111.726648 | 4.5 | 26 | 1 | {&#39;BusinessAcceptsCreditCards&#39;: &#39;True&#39;, &#39;ByAppo... | Home Services, Plumbing, Electricians, Handyma... | {&#39;Monday&#39;: &#39;0:0-0:0&#39;, &#39;Tuesday&#39;: &#39;9:0-16:0&#39;, &#39;... | . drop_columns = [&#39;address&#39;, &#39;latitude&#39;, &#39;longitude&#39;, &#39;hours&#39;] business = business.drop(drop_columns, axis= 1) . Show business into categories . business.categories.sample(10) . 46949 Nightlife, Bars, Whiskey Bars, Beer, Wine &amp; Sp... 89731 Windshield Installation &amp; Repair, Automotive, ... 66695 Hair Salons, Beauty &amp; Spas 99255 Professional Services, Lawyers, Financial Serv... 171605 Nail Salons, Massage, Health &amp; Medical, Cosmet... 171992 Fashion, Used, Vintage &amp; Consignment, Shopping... 79846 Salad, Ramen, Japanese, Asian Fusion, Restaurants 140752 Adult Entertainment, Counseling &amp; Mental Healt... 123696 Chicken Wings, Pizza, Italian, Restaurants 149195 Outlet Stores, Shopping Name: categories, dtype: object . Look for businesses where category contains the word Nightlife or Bar. . business_nightlife = business[business[&#39;categories&#39;].str.contains(&#39;Nightlife|Bar&#39;, case= False, na= False)] . business_explode = business.assign(categories = business.categories.str.split(&#39;, &#39;)).explode(&#39;categories&#39;) . print(&#39;The top 10 categories:&#39;) business_explode.categories.value_counts()[:10] . The top 10 categories: . Restaurants 63944 Shopping 34644 Food 32991 Home Services 22487 Beauty &amp; Spas 20520 Health &amp; Medical 19227 Local Services 15783 Automotive 14720 Nightlife 14211 Bars 12400 Name: categories, dtype: int64 . visuals = business_explode.categories.value_counts()[:10] . vis = pd.DataFrame(visuals) . vis . categories . Restaurants 63944 | . Shopping 34644 | . Food 32991 | . Home Services 22487 | . Beauty &amp; Spas 20520 | . Health &amp; Medical 19227 | . Local Services 15783 | . Automotive 14720 | . Nightlife 14211 | . Bars 12400 | . plt.figure(figsize= (25, 15)) plt.style.use(&#39;ggplot&#39;) sns.barplot(vis.categories, vis.index) plt.title(&#39;Top 10 categories of businesses&#39;, fontdict= {&#39;fontsize&#39;: 24}) plt.xlabel(&#39;Number of businesses&#39;, fontdict= {&#39;fontsize&#39;: 18}) plt.tick_params(labelsize= 16) plt.savefig(&#39;categories.png&#39;) . Reade in a chunk of reviews from the original dataset. . reviews_json_path = &#39;D:/projects/NLP project DS/yelp_academic_dataset_review.json&#39; . size = 1000000 . review = pd.read_json(reviews_json_path, lines=True, dtype={&#39;review_id&#39;:str,&#39;user_id&#39;:str, &#39;business_id&#39;:str,&#39;stars&#39;:int, &#39;date&#39;:str,&#39;text&#39;:str,&#39;useful&#39;:int, &#39;funny&#39;:int,&#39;cool&#39;:int}, chunksize=size) . If you read in a chunk, read_json() return a JsonReader object for iteration. . Merge business and reviews dataset . chunk_list = [] for chunk_review in review: chunk_review = chunk_review.drop([&#39;review_id&#39;,&#39;useful&#39;,&#39;funny&#39;,&#39;cool&#39;], axis= 1) chunk_review = chunk_review.rename(columns= {&#39;stars&#39;: &#39;review_stars&#39;}) chunk_merged = pd.merge(business_nightlife, chunk_review, on= &#39;business_id&#39;, how= &#39;inner&#39;) print(f&quot;{chunk_merged.shape[0]} out of {size:,} related reviews&quot;) chunk_list.append(chunk_merged) . 273589 out of 1,000,000 related reviews 276014 out of 1,000,000 related reviews 264422 out of 1,000,000 related reviews 272956 out of 1,000,000 related reviews 261842 out of 1,000,000 related reviews 259562 out of 1,000,000 related reviews 260244 out of 1,000,000 related reviews 256680 out of 1,000,000 related reviews 4378 out of 1,000,000 related reviews . business_nightlife_review = pd.concat(chunk_list, ignore_index=True, join=&#39;outer&#39;, axis=0) . Check merged dataset . business_nightlife_review.head() . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date . 0 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &#39;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | cSQnJ7JTY78ki5ai57kZ9A | 4 | 9.99 for a dozen raised is a Lil much the cake... | 2015-08-07 15:02:50 | . 1 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &#39;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | 5_CoaRC22jwmuUzZwlRG_g | 1 | Dirty dinning list will not go here again sad ... | 2016-02-13 17:50:23 | . 2 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &#39;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | 5_CoaRC22jwmuUzZwlRG_g | 5 | Just went here for a late night donut fix lol.... | 2015-09-29 06:18:47 | . 3 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &#39;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | c5ebpS7ex6npffT9Nlvqvw | 1 | Would of given 0 stars if possible first impre... | 2015-11-10 18:55:53 | . 4 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &#39;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | EXys-sSmm5auoqs6Jkyh7g | 5 | This is my first Yelp review. We just tried Mi... | 2016-01-25 02:26:47 | . business_nightlife_review.sample(5) . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date . 1256429 pDSl9xdKJCdN4vu8z26cEA | Coyote Ugly Saloon | Las Vegas | NV | 89109 | 2.5 | 344 | 1 | {&#39;Alcohol&#39;: &#39;u&#39;full_bar&#39;&#39;, &#39;OutdoorSeating&#39;: &#39;... | Bars, Nightlife, Adult Entertainment | W4MoCkTR35IIflqBl-SGQw | 5 | They played a good variety of music. The coyot... | 2013-10-28 16:49:18 | . 323651 DK-RfkH_GXFqjEOipl8kOw | Abbey Road Pub &amp; Patio | Mississauga | ON | L5L 1W8 | 3.5 | 23 | 1 | {&#39;RestaurantsGoodForGroups&#39;: &#39;True&#39;, &#39;Business... | Pubs, Bars, Nightlife | RRP7_dqWbnpeQx7LE0x3CA | 3 | Love the front section...Great atmosphere on F... | 2018-02-17 01:28:46 | . 2030367 1aEx-I_JdWPl6ITQDQAJxQ | Village Barber Shop | Henderson | NV | 89052 | 4.0 | 113 | 1 | {&#39;BusinessParking&#39;: &#39;{&#39;garage&#39;: False, &#39;street... | Barbers, Beauty &amp; Spas, Hair Stylists, Hair Sa... | bgJLZAEaB04x9UQIm3sATQ | 5 | Love this place. The folks who run the chairs ... | 2014-06-24 15:40:39 | . 1921867 5j2ugUALtjsa2nkV1YGq5Q | House Modern Sushi Restaurant | Mesa | AZ | 85204 | 4.0 | 311 | 1 | {&#39;RestaurantsReservations&#39;: &#39;True&#39;, &#39;Caters&#39;: ... | Restaurants, Sushi Bars, Japanese, Asian Fusion | 7v7-05j0pi5RDbvNJQB5LA | 2 | You get what you pay for. The prices here are ... | 2014-02-23 01:00:16 | . 448286 HG3ROmv3FJZTMJPpThSXOw | Luke Wholey&#39;s Wild Alaskan Grille | Pittsburgh | PA | 15222 | 4.0 | 470 | 1 | {&#39;RestaurantsPriceRange2&#39;: &#39;2&#39;, &#39;OutdoorSeatin... | Cocktail Bars, Sushi Bars, Bars, Nightlife, Re... | 5NiG9F8yaZ9KIsfk3TGAYQ | 5 | I am a seafood lover.. Not ever terribly picky... | 2014-09-17 23:16:45 | . business_nightlife_review.shape . (2129687, 14) . Save to a CSV file . name = &#39;business_nightlife_review.csv&#39; business_nightlife_review.to_csv(name, index= False) . . Market delimination . Read in data . df = pd.read_csv(&#39;data/nightlife_review.csv&#39;) . df.shape . (2129687, 15) . Look at the top of data set . df.head(10) . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date experience . 0 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | cSQnJ7JTY78ki5ai57kZ9A | 4 | 9.99 for a dozen raised is a Lil much the cake... | 2015-08-07 15:02:50 | 0 | . 1 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | 5_CoaRC22jwmuUzZwlRG_g | 1 | Dirty dinning list will not go here again sad ... | 2016-02-13 17:50:23 | 0 | . 2 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | 5_CoaRC22jwmuUzZwlRG_g | 5 | Just went here for a late night donut fix lol.... | 2015-09-29 06:18:47 | 0 | . 3 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | c5ebpS7ex6npffT9Nlvqvw | 1 | Would of given 0 stars if possible first impre... | 2015-11-10 18:55:53 | 0 | . 4 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | EXys-sSmm5auoqs6Jkyh7g | 5 | This is my first Yelp review. We just tried Mi... | 2016-01-25 02:26:47 | 0 | . 5 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | TPXPy309BrtLXbRorw3WKg | 2 | The second star is for the delicious apple fri... | 2015-09-19 18:22:09 | 0 | . 6 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | PNa8MaoGmptKej1K3hPVow | 2 | Ok service &amp; donuts. Bad boba(boba was hard an... | 2016-03-05 20:45:48 | 0 | . 7 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | YEg0bICRG3o_MSNqbcIZaw | 2 | Update: Wow. I just read through Missy&#39;s healt... | 2016-03-08 15:43:15 | 0 | . 8 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 1 | . 9 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 1 | . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 2129687 entries, 0 to 2129686 Data columns (total 15 columns): # Column Dtype -- 0 business_id object 1 name object 2 city object 3 state object 4 postal_code object 5 stars float64 6 review_count int64 7 is_open int64 8 attributes object 9 categories object 10 user_id object 11 review_stars int64 12 text object 13 date object 14 experience int64 dtypes: float64(1), int64(4), object(10) memory usage: 243.7+ MB . Create supply and demand proxies &amp; pandas data frame . supply = pd.DataFrame(df.groupby(&#39;city&#39;).name.nunique().sort_values(ascending= False)) . supply.columns = [&#39;supply&#39;] . supply.head() . supply . city . Las Vegas 3080 | . Toronto 2755 | . Phoenix 1449 | . Montréal 1166 | . Charlotte 1093 | . demand = pd.DataFrame(df.groupby(&#39;city&#39;).size().sort_values(ascending= False)) . demand.columns = [&#39;demand&#39;] . demand.head() . demand . city . Las Vegas 727107 | . Phoenix 211114 | . Toronto 156352 | . Scottsdale 141971 | . Charlotte 120033 | . df_dem_sup = supply.merge(demand, on= &#39;city&#39;) . df_dem_sup.head() . supply demand . city . Las Vegas 3080 | 727107 | . Toronto 2755 | 156352 | . Phoenix 1449 | 211114 | . Montréal 1166 | 38870 | . Charlotte 1093 | 120033 | . Calculate market saturation and save it in column . df_dem_sup[&#39;market_saturation&#39;] = df_dem_sup.supply / df_dem_sup.demand * 100 . Sort the dataframe entries by market saturation (ascending) . df_dem_sup = df_dem_sup[(df_dem_sup.demand &gt; 5000)] . df_dem_sup = df_dem_sup.sort_values(by= &#39;market_saturation&#39;) . df_dem_sup.shape . (28, 3) . df_dem_sup.head(20) . supply demand market_saturation . city . Las Vegas 3080 | 727107 | 0.423597 | . Henderson 328 | 53926 | 0.608241 | . Scottsdale 866 | 141971 | 0.609984 | . Gilbert 208 | 31056 | 0.669758 | . Phoenix 1449 | 211114 | 0.686359 | . Chandler 337 | 47316 | 0.712233 | . Goodyear 67 | 9083 | 0.737642 | . Tempe 418 | 55787 | 0.749279 | . Peoria 137 | 16001 | 0.856196 | . Charlotte 1093 | 120033 | 0.910583 | . Surprise 84 | 8546 | 0.982916 | . North Las Vegas 102 | 10260 | 0.994152 | . Huntersville 61 | 6004 | 1.015989 | . Mesa 367 | 35609 | 1.030638 | . Glendale 286 | 26991 | 1.059612 | . Pittsburgh 985 | 82639 | 1.191931 | . Madison 482 | 37497 | 1.285436 | . Cleveland 637 | 48335 | 1.317886 | . Lakewood 114 | 8371 | 1.361844 | . Markham 191 | 12081 | 1.580995 | . Create visual summary of market saturation . plt.figure(figsize= (25, 15)) plt.title(&#39;20 LOWEST SATURATED MARKETS (LOWER IS BETTER)&#39;, fontdict= {&#39;fontsize&#39;: 24}) sns.barplot(df_dem_sup.market_saturation[:20], df_dem_sup.index[:20]) plt.ylabel(&#39;cities&#39;, fontdict= {&#39;fontsize&#39;: 18}) plt.xlabel(&#39;market saturation&#39;, rotation= 0, fontdict= {&#39;fontsize&#39;: 18}) plt.tick_params(labelsize= 16) plt.savefig(&#39;market_saturation.png&#39;) . Phoenix is the chosen city, as the market saturation is relatively low and there is a rather high demand present in the city. . phoenix = df[(df.city == &#39;Phoenix&#39;)] phoenix.head() . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date experience . 8 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 1 | . 9 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 1 | . 10 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | E9IJMZ2njmG1LOMmOhzeBg | 5 | Such a fun atmosphere!! Went there last night ... | 2019-01-12 21:25:24 | 1 | . 11 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 7KZhUr0i3K202Ux1-OGOhQ | 4 | This place is new and very close to us, so we ... | 2018-07-30 01:57:23 | 1 | . 12 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | UIKrJGEyTCWKaAvWDhLJug | 5 | This is exactly what this neighborhood needed.... | 2018-07-23 02:01:32 | 1 | . phoenix.shape . (211114, 15) . phoenix.isnull().sum() . business_id 0 name 0 city 0 state 0 postal_code 7 stars 0 review_count 0 is_open 0 attributes 106 categories 0 user_id 0 review_stars 0 text 0 date 0 experience 0 dtype: int64 . Save data set to CSV . name = &#39;data/phoenix_nightlife.csv&#39; phoenix.to_csv(name, index= False) . . Merge users phoenix. . Import JSON in chunk . path = &#39;data/yelp_academic_dataset_user.json&#39; . size = 1000000 . users = pd.read_json(path, lines= True, dtype= {&#39;user_id&#39;: str, &#39;name&#39;: str, &#39;review_count&#39;: int, &#39;yelping_since&#39;: str, &#39;friends&#39;: list, &#39;useful&#39;: int, &#39;funny&#39;: int, &#39;cool&#39;: int, &#39;fans&#39;: int, &#39;elite&#39;: list, &#39;avarage_stars&#39;: float, &#39;compliment_hot&#39;: int, &#39;comliment_more&#39;: int, &#39;compliment_profile&#39;: 42, &#39;compliment_cute&#39;: int, &#39;comliment_list&#39;: int, &#39;compliment_note&#39;: int, &#39;comliment_plain&#39;: int, &#39;compliment_cool&#39;: int, &#39;compliment_funny&#39;: int, &#39;compliment_writer&#39;: int, &#39;compliment_photos&#39;: int}, chunksize= size) . Import phoenix data set . phoenix = pd.read_csv(&#39;data/phoenix_nightlife.csv&#39;) . phoenix.shape . (211114, 15) . phoenix.head(3) . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date experience . 0 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 1 | . 1 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 1 | . 2 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | E9IJMZ2njmG1LOMmOhzeBg | 5 | Such a fun atmosphere!! Went there last night ... | 2019-01-12 21:25:24 | 1 | . Iterate through users and merge with phoenix data set . Rename review_count column in users. Review count column now refers to number of reviews for the specific business and num_review_written refers to the number of reviews written by that user. . chunk_list = [] for chunk_user in users: chunk_user = chunk_user.drop([&#39;name&#39;, &#39;yelping_since&#39;, &#39;funny&#39;, &#39;cool&#39;, &#39;fans&#39;, &#39;elite&#39;, &#39;compliment_hot&#39;, &#39;compliment_more&#39;, &#39;compliment_profile&#39;, &#39;compliment_cute&#39;, &#39;compliment_list&#39;, &#39;compliment_note&#39;, &#39;compliment_plain&#39;, &#39;compliment_cool&#39;, &#39;compliment_funny&#39;, &#39;compliment_writer&#39;, &#39;compliment_photos&#39;], axis= 1) chunk_user = chunk_user.rename(columns= {&#39;review_count&#39;: &#39;num_reviews_written&#39;}) chunk_merged = pd.merge(phoenix, chunk_user, on= &#39;user_id&#39;, how= &#39;inner&#39;) print(f&quot;{chunk_merged.shape[0]} out of {size:,} related users.&quot;) chunk_list.append(chunk_merged) . 180426 out of 1,000,000 related users. 30688 out of 1,000,000 related users. . Concatenate data frame &quot;pieces&quot; into one data frame. . phoenix_nightlife_user = pd.concat(chunk_list, ignore_index= True, join= &#39;outer&#39;, axis= 0) . phoenix_nightlife_user.shape . (211114, 19) . phoenix_nightlife_user.head(3) . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date experience num_reviews_written useful friends average_stars . 0 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 1 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | . 1 ku9ak9cQnIGBCXBtRd61tQ | Spoke &amp; Wheel - Phoenix | Phoenix | AZ | 85020.0 | 4.0 | 357 | 1 | {&#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;, &#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;... | Bars, Beer, Wine &amp; Spirits, Sandwiches, Breakf... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | This is our favorite local spot! The wings are... | 2018-08-30 01:37:47 | 1 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | . 2 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 1 | 12 | 4 | p12DAvNJZ5szp8jP69NUbA, JdJ0b9QZKVrjv_nicDhABw... | 5.0 | . Create experience column, based on review star. . phoenix_nightlife_user = phoenix_nightlife_user.drop(&#39;experience&#39;, axis= 1) phoenix_nightlife_user.shape . (211114, 18) . Positive experience = 1, Negative experience = 0 . mappings = {1: 0, 2: 0, 3: 0, 4: 1, 5: 1} phoenix_nightlife_user[&#39;experience&#39;] = phoenix_nightlife_user.review_stars.map(mappings) phoenix_nightlife_user.experience.sample(5) . 27665 1 90276 1 5348 1 131733 1 160394 0 Name: experience, dtype: int64 . Visualize distribution of columns before removing outliers . plt.title(&#39;Distribution of avarage star ratings of users&#39;) plt.hist(phoenix_nightlife_user.average_stars); . plt.title(&#39;Distribution of number of reviews written per user&#39;) plt.yscale(&#39;log&#39;) plt.hist(phoenix_nightlife_user.num_reviews_written); . plt.title(&#39;Distribution of number of reviews per business&#39;) plt.hist(phoenix_nightlife_user.review_count); . Remove outliers . IQR = 75th percentile - 25th percentile (Q3 - Q1). Outlier (left tail) = 25th percentile - IQR 1.5. Outlier (right tail) = 75th percentile + IQR 1.5. . Calculate IQR for the columns we intend to &quot;clean&quot;. . IQR_stars = phoenix_nightlife_user.average_stars.quantile(0.75) - phoenix_nightlife_user.average_stars.quantile(0.25) IQR_num_rev_wri = phoenix_nightlife_user.num_reviews_written.quantile(0.75) - phoenix_nightlife_user.num_reviews_written.quantile(0.25) IQR_rev_count = phoenix_nightlife_user.review_count.quantile(0.75) - phoenix_nightlife_user.review_count.quantile(0.25) . Calculate thresholds for 3 variables to classify outliers. . outlier_stars = IQR_stars * 1.5 outlier_num_rev_wri = IQR_num_rev_wri * 1.5 outlier_rev_count = IQR_rev_count * 1.5 . Calculate Q1 and Q3 for 3 variables . Q1_stars = phoenix_nightlife_user.average_stars.quantile(0.25) Q3_stars = phoenix_nightlife_user.average_stars.quantile(0.75) Q1_num = phoenix_nightlife_user.num_reviews_written.quantile(0.25) Q3_num = phoenix_nightlife_user.num_reviews_written.quantile(0.75) Q1_rev = phoenix_nightlife_user.review_count.quantile(0.25) Q3_rev = phoenix_nightlife_user.review_count.quantile(0.75) . Create final data set, that contains businesses in Phoenix and their respective reviews, along with useful information about the user who gave said review. &quot;Outliers&quot; are removed from data set. . phoenix_nightlife_user = phoenix_nightlife_user[(phoenix_nightlife_user.average_stars &gt;= Q1_stars - outlier_stars) | (phoenix_nightlife_user.average_stars &lt;= Q3_stars + outlier_stars) &amp; (phoenix_nightlife_user.num_reviews_written &gt;= Q1_num - outlier_num_rev_wri) | (phoenix_nightlife_user.num_reviews_written &lt;= Q3_num + outlier_num_rev_wri) &amp; (phoenix_nightlife_user.review_count &gt;= Q1_rev - outlier_rev_count) | (phoenix_nightlife_user.review_count &lt;= Q3_rev + outlier_rev_count)] . phoenix_nightlife_user.shape . (211114, 19) . name = &#39;data/phoenix_users.csv&#39; phoenix_nightlife_user.to_csv(name, index= False) . Visualize distribution of columns after removing outliers . plt.title(&#39;Distribution of avarage star ratings of users&#39;) plt.hist(phoenix_nightlife_user.average_stars); . plt.title(&#39;Distribution of number of reviews written per user&#39;) plt.yscale(&#39;log&#39;) plt.hist(phoenix_nightlife_user.num_reviews_written); . plt.title(&#39;Distribution of number of reviews per business&#39;) plt.hist(phoenix_nightlife_user.review_count); . . Data Exploration . Define data paths . path = &#39;/content/drive/MyDrive/DSBA_Project/yelp_dataset/phoenix_nightlife.csv&#39; . Load DataFrame . df = pd.read_csv(path) . df.head() . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date experience . 0 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 1 | . 1 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 1 | . 2 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | E9IJMZ2njmG1LOMmOhzeBg | 5 | Such a fun atmosphere!! Went there last night ... | 2019-01-12 21:25:24 | 1 | . 3 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 7KZhUr0i3K202Ux1-OGOhQ | 4 | This place is new and very close to us, so we ... | 2018-07-30 01:57:23 | 1 | . 4 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | UIKrJGEyTCWKaAvWDhLJug | 5 | This is exactly what this neighborhood needed.... | 2018-07-23 02:01:32 | 1 | . We start of by getting an overview of the positive and negative ratings . star_rating = df.groupby([&#39;business_id&#39;, &#39;name&#39;, &#39;city&#39;, &#39;review_count&#39;])[&#39;stars&#39;].mean() . star_rating = pd.DataFrame(star_rating).sort_values(by=[&#39;stars&#39;, &#39;review_count&#39;], ascending = [False, False]) . star_rating.reset_index(inplace=True) . star_rating.head(20) . index business_id name city review_count stars . 0 845 | Xg5qEQiB-7L6kGJ5F4K3bQ | Little Miss BBQ | Phoenix | 2329 | 5.0 | . 1 1579 | zJ__js7-Cx_wU4GhdBdeRA | The Refuge Coffee &amp; Wine | Phoenix | 163 | 5.0 | . 2 1038 | eZqoDfBg-xOS8WdcZCYM2A | JL Smokehouse | Phoenix | 146 | 5.0 | . 3 612 | O4kYogia0fbF85pCX10XiA | Koi Poke - Arcadia | Phoenix | 144 | 5.0 | . 4 1059 | fHKvkiSHuUYM10Z7KqBrbQ | ILLEET Entertainment | Phoenix | 124 | 5.0 | . 5 170 | 5pEQwYimyfp5wpeudYNahw | El Charro Hipster Bar and Cafe | Phoenix | 122 | 5.0 | . 6 1051 | exwQfCcTmOnMFn94SQZORw | Pure Barre - Phoenix | Phoenix | 82 | 5.0 | . 7 826 | X1-AbThDu9tmijcGnsi8Ug | Binkley&#39;s Restaurant | Phoenix | 79 | 5.0 | . 8 680 | R9GAIXv4DcbgZH-eUd_qIw | Giving Tree Cafe | Phoenix | 67 | 5.0 | . 9 1521 | x0g7c-7tnsMaZtnlZ4CadQ | True North Barber Shop | Phoenix | 52 | 5.0 | . 10 607 | NvdId69PI1Fq9d8EfzxQ0g | Snip Snip | Phoenix | 49 | 5.0 | . 11 326 | COfmsJPeRu_4qFzDpvAAgw | Rewined Beer And Wine Bar | Phoenix | 46 | 5.0 | . 12 835 | XRp0fJNimSJz2ZINgz3nDA | Niza Lideo | Phoenix | 42 | 5.0 | . 13 912 | _TVPXjF1gDXEiWrKAYo1XA | Sidecar Social Club | Phoenix | 33 | 5.0 | . 14 35 | 0P7gYbegHEH0lFkwBoA0og | Front Pourch Brewing | Phoenix | 32 | 5.0 | . 15 1239 | l9uGl3sRTpws4ulfwH3Cmw | Pop&#39;s Barbershop | Phoenix | 31 | 5.0 | . 16 1143 | i8nem7_isYgxPgEs1UV_xg | El Migos WATER-N-ICE | Phoenix | 30 | 5.0 | . 17 279 | AftgPs11yy6D__xM4yr2FQ | The Studio - A Social Fitness Club | Phoenix | 29 | 5.0 | . 18 475 | IVLxwoFx_zXuWJt3cEveAA | Limoz | Phoenix | 29 | 5.0 | . 19 749 | UB-tbeHJk6z9IOEzl_EY3g | Lacuna Kava Bar | Phoenix | 28 | 5.0 | . star_rating_skimmed = star_rating[star_rating.review_count &gt;= 10] . star_rating_skimmed . index business_id name city review_count stars . 0 845 | Xg5qEQiB-7L6kGJ5F4K3bQ | Little Miss BBQ | Phoenix | 2329 | 5.0 | . 1 1579 | zJ__js7-Cx_wU4GhdBdeRA | The Refuge Coffee &amp; Wine | Phoenix | 163 | 5.0 | . 2 1038 | eZqoDfBg-xOS8WdcZCYM2A | JL Smokehouse | Phoenix | 146 | 5.0 | . 3 612 | O4kYogia0fbF85pCX10XiA | Koi Poke - Arcadia | Phoenix | 144 | 5.0 | . 4 1059 | fHKvkiSHuUYM10Z7KqBrbQ | ILLEET Entertainment | Phoenix | 124 | 5.0 | . ... ... | ... | ... | ... | ... | ... | . 1558 203 | 7U7C1xcvuObJqXFp6IWKWQ | J &amp; Gios Barber Shop | Phoenix | 10 | 2.0 | . 1559 799 | W6Do-RqSULOil1LtZ6XwxA | The Original BBQ 2 U | Phoenix | 10 | 2.0 | . 1577 1027 | e69v6hfCkr25M5DaLSS8CQ | Long Wongs | Phoenix | 76 | 1.5 | . 1578 956 | avcKxfAIAImSWv8bKcnGzg | Club Luxx | Phoenix | 58 | 1.5 | . 1579 1093 | g7EXpsDsd-xLQVajvEUnrg | Fruitlicious | Phoenix | 13 | 1.5 | . 1232 rows × 6 columns . sns.barplot(star_rating_skimmed.review_count[:20], star_rating_skimmed.name[:20]) plt.xscale(&#39;log&#39;) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. FutureWarning . You were here . negative_ratings = len(df[df[&quot;stars&quot;]&lt;2]) positive_ratings = len(df[df[&quot;stars&quot;]&gt;3]) . print(&quot;Total negative reviews: {}&quot;.format(negative_ratings)) print(&quot;Total positive reviews: {}&quot;.format(positive_ratings)) . Total negative reviews: 204 Total positive reviews: 186212 . Let us now get an overview of the top rated businesses in phoenix . top_rated = df[df[&quot;stars&quot;]&gt;3] top_rated_dict ={} for business_id in top_rated[&quot;business_id&quot;].values: try : top_rated_dict[business_id] = top_rated_dict[business_id]=5 except: top_rated_dict[business_id]=0 # topbusiness = pd.DataFrame.from_dict(data= top_rated_dict,orient=&quot;index&quot;) topbusiness.reset_index(inplace=True) topbusiness.columns = [&#39;business_id&#39;, &#39;stars&#39;] del(top_rated_dict) del(top_rated) . top_count= 20 right=pd.DataFrame(df[[&#39;business_id&#39;,&quot;name&quot;,]].values, columns=[&#39;business_id&#39;,&quot;Business name&quot;]) top_business_data = pd.merge(topbusiness,right=right, how=&quot;inner&quot;,on=&#39;business_id&#39;) top_business_data.sort_values(&quot;stars&quot;)[::-1][:top_count].plot(x=&quot;Business name&quot;,y=&quot;stars&quot;, kind=&quot;bar&quot;,figsize=(14,6), title=&#39;Positive reviews&#39;).set_ylabel(&quot;Total ratings&quot;) del(topbusiness) del(right) .",
            "url": "https://achnito.github.io/DSBA/fastpages/jupyter/2020/11/26/Exam_Project.html",
            "relUrl": "/fastpages/jupyter/2020/11/26/Exam_Project.html",
            "date": " • Nov 26, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Data Science for Business Applications",
            "content": ". Introduction to the Data . In this project, we have chosen to work with an open dataset provided by Yelp (you can download and read more about the data set here). . Yelp is an online review platform that enables people to find user recommendations of a wide range of businesses - and write reviews of their own experiences. To give a review as user is asked to give a star rating on a scale from 1 to 5 and include a description of the experience the user had with the entity. . This dataset was made available for use in personal, educational and academic purposes. It is a subset consisting of reviews, businesses and users across 10 metropolitan areas. More specifically, it contains data on more than 8 million reviews, two-hundred-thousand businesses, and almost 2 million users. The dataset is downloaded as a compressed tar-file format. Uncompressed there are 5 json-files and a total of 9.8GB data - a rather huge dataset. . On a Data Science stand point this dataset is rather interesting as it contains a vast amount of data, including structured and unstructured data (text). For the more demanding project, Yelp has made an additional dataset available containing 200.000 photos that has been posted on their platform in connection with the reviews. These photos however, are not included in this project. . Problem Statement . After a thorough inspection of the documentation, we decided to use three main data sets: Business.json, review.json and user.json. Thus, check-ins and tips (shorter reviews) has been excluded from the analysis. . We found these datasets to be interesting for our project as they contain text reviews and additional related data about the users that has writes the reviews and the businesses that reviewed. This allows us to extract features of the data to gain important and actionable insights about the businesses and the markets they operate in. . Inspired by House of Cards (How Netflix Used Data Science to Create One of the Most Loved Shows Ever: House of Cards) we came up with an interesting subject for analysis - our problem statement: . Problem Statement . What are the features that seperates the best and worst performing businesses - and how can we use these insights to create a successful new business concept? . Description of the Datasets . A description of the dataset is listed in the documentation. Here, we provide you with a simplified description of the datasets: . Business.json . Contains bussiness data including location data, attributes and categories: . business_id: ID of the business | name: name of the business | address: address of the business | city: city of the business | state: state of the business | postal_code: postal code of the business | latitude: latitude of the business | longitude: longitude of the business | stars: average rating of the business | review_count: number of reviews received | is_open: 1 if the business is open, 0 otherwise | attributes: | categories: multiple categories of the business | hours: business opening hours | . Review.json . Contains full review text data including the user_id that wrote the review and the business_id the review was written for: . review_id: ID of the review | user_id: ID of the user | business_id: ID of the business | stars: stars given in review | date: time of review | text: the review | useful: number of people that found the review useful | funny: number of people that found the review funny | cool: number of people that found the review cool | . User.json . Contains user data including the user&#39;s friend mapping and all the metadata associated with the user. . user_id: ID of the review | name: name of the user | review_count: number of reviews given | yelping_since: user creation date | friends: the user’s friends as an array of user_ids | useful: number of useful vores sent by the user | funny: number of funny vores sent by the user | cool: number of cool vores sent by the user | fans: number of fans the user has | elite: years the user had elite status as an array. | average_stars: average star rating given by the user | compliments: number of times the user was complimented. | . Methodology (how to answer the question) . What are the features that seperates the best and worst performing businesses - and how can we use these insights to create a successful new business concept? . Steps of Analysis . Once, the location and business area is identified, we will further investigate the business landscape to understand which businesses are the most popular choices Then, looking at customers, we will try to filter out those users that are . Then, the data is preprocessed before the analysis can begin . Preprocessing (high-level description of the preprocessing) . To answer the question for analysis we will start by delimitting the data to represent a business category and location of interest. We do this as we assume that customer demand may wary across different locations and categories. . Moving on, we will look at the users and identify those that tend to be too negative or positive in their reviews. This is an important step, as these users might skew the results otherwise. . Similarly, the number of reviews assigned to a business is an important aspect to consider - the less amount of data the less representative. These businesses will therefore present unreliable results. In order to avoid this problem, we will filter out businesses that fail to exceed a number of reviews assigned to them. . Analysis . Further Data Exploration (Idris) Which businesses have the highest and lowest average score? (Idris) | Which categories are popular within the nightlife category? | Probability that a business is closed based on star rating? Crosstab (compare if business is open - see if there is positive or negative experience) - see Are there correlation between review scores and whether a business stays on or not? | . | . | Review insights (Andras) Natural Language Processing | Topic Modelling | What set the best performers and lowest performers apart? Gradual change (1 - 5)? If it holds true | Negative vs positive experience | . | SML Sentiment classification (Based on the word occurence the model categorizes whether the review is positive or negative) Bag of Words | Word contribution towards a negative/positive review | . | . | User insights (Kim) Network analysis on user’s friends (Kim) | User Analysis Who writes the most useful reviews? | . | . | . . Review.json contains the actual review of the respective business as well the corresponding “review star”. Lastly, user.json contains information about the user who provided the review. . Some of the useful columns that we thought would use are the average review score of the user, the “usefulness” of the user (an integer value, that represents how many other “yelpers” thought that this user provided valuable feedback) and the users friend list. . We intended to conduct a network analysis based on the information that we have from user.json and the average review score of the users proved to be of value, as we could use this to clean the data set from “extreme” behaviour (people who are “notorious complainers” or from users who uprated a friend’s restaurant). . Moreover, we planned to use the reviews (text) from review.json to experiment with Topic Modeling as well as to create a SML model that predicts the experience (binary classyfier) of the reviews. Despite the fact that the reviews have stars, we thought this would be a great opportunity to practice our skills, therefore we created a mapping from stars to experience. . Lastly, the business.json file was intended to be used to learn facts about businesses. . User_id and business_id columns were used to merge the data sources coming from different json files. . Limitation: . We only read in 1,000,000 lines from the review.json as well as from the user.json. Those 2 data sets were rather large, and our computers lacked the necessary memory to work with them. What this means is that we “lost” some information, however we thought that this would not interfere with our ability to demonstrate our proficiency of the newly acquired methods and tools. (Data preprocessing, EDA, Topic Modeling, SML, etc.) Eventually, our “final” data set (csv) reached a size of 1 GB, thus we had plenty of data to work with. . . . Business Context . This section elaborates on the relevance of our analysis and methods utilized in this paper for business-decision purposes. . The main purpose with this paper is to allow a chosen category of businesses, in a specific area, to filter relevant reviews and based on this, make better-informed choices. In this paper we discover the most popular categories and cities that have been reviewed. Based on that, we chose to delve into Phoenix with relatively high demand(reviews) and low market saturation. We conduct a thorough sentiment analysis on the negative and positive reviews, which allows the businesses to grasp an understanding of what their customers are satisfied and dissatisfied about. This entails a comprehension of what facets to improve in the various nightlife entities. By also identifying the customers that tend to be extremely positive and negative, we aim to exclude the reviews that tend to be too extreme in order to reduce the biases in our project. Specifically, when analysing the nightlife in Phoenix, we figure out the most popular nightlife categories, which draws a picture of what new entrants should consider opening in order to increase the success rate at launch. ((((Write about topic modeling)))) . . Preprocessing Steps . Installation &amp; Libraries . #Installations ! pip install wordcloud #Imports import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt %matplotlib inline from wordcloud import Wordcloud from sklearn import metric from sklearn import decomposition from sklearn.model_selection import train_test_split from sklearn.model_selection import RandomizedSearchCV from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer import sklearn.utils as utils from sklearn.naive_bayes import MultinomialNB import joblib as joblib from google.colab import files #Use to upload single files from local directory from google.colab import drive #Use to mount google drive to access documents saved in the cloud . . Get Data . drive.mount(&#39;/content/drive&#39;) #Mounts Google Drive that holds the data. . . Mounted at /content/drive . . Create data set top categories.ipynb . Create a CSV file . The original file is downloaded from Yelp and we create a subset that contains the useful data. . business_json_path = &#39;D:/projects/NLP project DS/yelp_academic_dataset_business.json&#39; business = pd.read_json(business_json_path, lines=True) business.head() . . business_id name address city state postal_code latitude longitude stars review_count is_open attributes categories hours . 0 f9NumwFMBDn751xgFiRbNA | The Range At Lake Norman | 10913 Bailey Rd | Cornelius | NC | 28031 | 35.462724 | -80.852612 | 3.5 | 36 | 1 | {&#39;BusinessAcceptsCreditCards&#39;: &#39;True&#39;, &#39;BikePa... | Active Life, Gun/Rifle Ranges, Guns &amp; Ammo, Sh... | {&#39;Monday&#39;: &#39;10:0-18:0&#39;, &#39;Tuesday&#39;: &#39;11:0-20:0&#39;... | . 1 Yzvjg0SayhoZgCljUJRF9Q | Carlos Santo, NMD | 8880 E Via Linda, Ste 107 | Scottsdale | AZ | 85258 | 33.569404 | -111.890264 | 5.0 | 4 | 1 | {&#39;GoodForKids&#39;: &#39;True&#39;, &#39;ByAppointmentOnly&#39;: &#39;... | Health &amp; Medical, Fitness &amp; Instruction, Yoga,... | None | . 2 XNoUzKckATkOD1hP6vghZg | Felinus | 3554 Rue Notre-Dame O | Montreal | QC | H4C 1P4 | 45.479984 | -73.580070 | 5.0 | 5 | 1 | None | Pets, Pet Services, Pet Groomers | None | . 3 6OAZjbxqM5ol29BuHsil3w | Nevada House of Hose | 1015 Sharp Cir | North Las Vegas | NV | 89030 | 36.219728 | -115.127725 | 2.5 | 3 | 0 | {&#39;BusinessAcceptsCreditCards&#39;: &#39;True&#39;, &#39;ByAppo... | Hardware Stores, Home Services, Building Suppl... | {&#39;Monday&#39;: &#39;7:0-16:0&#39;, &#39;Tuesday&#39;: &#39;7:0-16:0&#39;, ... | . 4 51M2Kk903DFYI6gnB5I6SQ | USE MY GUY SERVICES LLC | 4827 E Downing Cir | Mesa | AZ | 85205 | 33.428065 | -111.726648 | 4.5 | 26 | 1 | {&#39;BusinessAcceptsCreditCards&#39;: &#39;True&#39;, &#39;ByAppo... | Home Services, Plumbing, Electricians, Handyma... | {&#39;Monday&#39;: &#39;0:0-0:0&#39;, &#39;Tuesday&#39;: &#39;9:0-16:0&#39;, &#39;... | . drop_columns = [&#39;address&#39;, &#39;latitude&#39;, &#39;longitude&#39;, &#39;hours&#39;] business = business.drop(drop_columns, axis= 1) . Show business into categories . business.categories.sample(10) . 46949 Nightlife, Bars, Whiskey Bars, Beer, Wine &amp; Sp... 89731 Windshield Installation &amp; Repair, Automotive, ... 66695 Hair Salons, Beauty &amp; Spas 99255 Professional Services, Lawyers, Financial Serv... 171605 Nail Salons, Massage, Health &amp; Medical, Cosmet... 171992 Fashion, Used, Vintage &amp; Consignment, Shopping... 79846 Salad, Ramen, Japanese, Asian Fusion, Restaurants 140752 Adult Entertainment, Counseling &amp; Mental Healt... 123696 Chicken Wings, Pizza, Italian, Restaurants 149195 Outlet Stores, Shopping Name: categories, dtype: object . Look for businesses where category contains the word Nightlife or Bar. . business_nightlife = business[business[&#39;categories&#39;].str.contains(&#39;Nightlife|Bar&#39;, case= False, na= False)] . business_explode = business.assign(categories = business.categories.str.split(&#39;, &#39;)).explode(&#39;categories&#39;) . print(&#39;The top 10 categories:&#39;) business_explode.categories.value_counts()[:10] . The top 10 categories: . Restaurants 63944 Shopping 34644 Food 32991 Home Services 22487 Beauty &amp; Spas 20520 Health &amp; Medical 19227 Local Services 15783 Automotive 14720 Nightlife 14211 Bars 12400 Name: categories, dtype: int64 . visuals = business_explode.categories.value_counts()[:10] . vis = pd.DataFrame(visuals) . vis . categories . Restaurants 63944 | . Shopping 34644 | . Food 32991 | . Home Services 22487 | . Beauty &amp; Spas 20520 | . Health &amp; Medical 19227 | . Local Services 15783 | . Automotive 14720 | . Nightlife 14211 | . Bars 12400 | . plt.figure(figsize= (25, 15)) plt.style.use(&#39;ggplot&#39;) sns.barplot(vis.categories, vis.index) plt.title(&#39;Top 10 categories of businesses&#39;, fontdict= {&#39;fontsize&#39;: 24}) plt.xlabel(&#39;Number of businesses&#39;, fontdict= {&#39;fontsize&#39;: 18}) plt.tick_params(labelsize= 16) plt.savefig(&#39;categories.png&#39;) . Reade in a chunk of reviews from the original dataset. . reviews_json_path = &#39;D:/projects/NLP project DS/yelp_academic_dataset_review.json&#39; . size = 1000000 . review = pd.read_json(reviews_json_path, lines=True, dtype={&#39;review_id&#39;:str,&#39;user_id&#39;:str, &#39;business_id&#39;:str,&#39;stars&#39;:int, &#39;date&#39;:str,&#39;text&#39;:str,&#39;useful&#39;:int, &#39;funny&#39;:int,&#39;cool&#39;:int}, chunksize=size) . If you read in a chunk, read_json() return a JsonReader object for iteration. . Merge business and reviews dataset . chunk_list = [] for chunk_review in review: chunk_review = chunk_review.drop([&#39;review_id&#39;,&#39;useful&#39;,&#39;funny&#39;,&#39;cool&#39;], axis= 1) chunk_review = chunk_review.rename(columns= {&#39;stars&#39;: &#39;review_stars&#39;}) chunk_merged = pd.merge(business_nightlife, chunk_review, on= &#39;business_id&#39;, how= &#39;inner&#39;) print(f&quot;{chunk_merged.shape[0]} out of {size:,} related reviews&quot;) chunk_list.append(chunk_merged) . 273589 out of 1,000,000 related reviews 276014 out of 1,000,000 related reviews 264422 out of 1,000,000 related reviews 272956 out of 1,000,000 related reviews 261842 out of 1,000,000 related reviews 259562 out of 1,000,000 related reviews 260244 out of 1,000,000 related reviews 256680 out of 1,000,000 related reviews 4378 out of 1,000,000 related reviews . business_nightlife_review = pd.concat(chunk_list, ignore_index=True, join=&#39;outer&#39;, axis=0) . Check merged dataset . business_nightlife_review.head() . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date . 0 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &#39;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | cSQnJ7JTY78ki5ai57kZ9A | 4 | 9.99 for a dozen raised is a Lil much the cake... | 2015-08-07 15:02:50 | . 1 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &#39;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | 5_CoaRC22jwmuUzZwlRG_g | 1 | Dirty dinning list will not go here again sad ... | 2016-02-13 17:50:23 | . 2 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &#39;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | 5_CoaRC22jwmuUzZwlRG_g | 5 | Just went here for a late night donut fix lol.... | 2015-09-29 06:18:47 | . 3 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &#39;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | c5ebpS7ex6npffT9Nlvqvw | 1 | Would of given 0 stars if possible first impre... | 2015-11-10 18:55:53 | . 4 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &#39;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | EXys-sSmm5auoqs6Jkyh7g | 5 | This is my first Yelp review. We just tried Mi... | 2016-01-25 02:26:47 | . business_nightlife_review.sample(5) . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date . 1256429 pDSl9xdKJCdN4vu8z26cEA | Coyote Ugly Saloon | Las Vegas | NV | 89109 | 2.5 | 344 | 1 | {&#39;Alcohol&#39;: &#39;u&#39;full_bar&#39;&#39;, &#39;OutdoorSeating&#39;: &#39;... | Bars, Nightlife, Adult Entertainment | W4MoCkTR35IIflqBl-SGQw | 5 | They played a good variety of music. The coyot... | 2013-10-28 16:49:18 | . 323651 DK-RfkH_GXFqjEOipl8kOw | Abbey Road Pub &amp; Patio | Mississauga | ON | L5L 1W8 | 3.5 | 23 | 1 | {&#39;RestaurantsGoodForGroups&#39;: &#39;True&#39;, &#39;Business... | Pubs, Bars, Nightlife | RRP7_dqWbnpeQx7LE0x3CA | 3 | Love the front section...Great atmosphere on F... | 2018-02-17 01:28:46 | . 2030367 1aEx-I_JdWPl6ITQDQAJxQ | Village Barber Shop | Henderson | NV | 89052 | 4.0 | 113 | 1 | {&#39;BusinessParking&#39;: &#39;{&#39;garage&#39;: False, &#39;street... | Barbers, Beauty &amp; Spas, Hair Stylists, Hair Sa... | bgJLZAEaB04x9UQIm3sATQ | 5 | Love this place. The folks who run the chairs ... | 2014-06-24 15:40:39 | . 1921867 5j2ugUALtjsa2nkV1YGq5Q | House Modern Sushi Restaurant | Mesa | AZ | 85204 | 4.0 | 311 | 1 | {&#39;RestaurantsReservations&#39;: &#39;True&#39;, &#39;Caters&#39;: ... | Restaurants, Sushi Bars, Japanese, Asian Fusion | 7v7-05j0pi5RDbvNJQB5LA | 2 | You get what you pay for. The prices here are ... | 2014-02-23 01:00:16 | . 448286 HG3ROmv3FJZTMJPpThSXOw | Luke Wholey&#39;s Wild Alaskan Grille | Pittsburgh | PA | 15222 | 4.0 | 470 | 1 | {&#39;RestaurantsPriceRange2&#39;: &#39;2&#39;, &#39;OutdoorSeatin... | Cocktail Bars, Sushi Bars, Bars, Nightlife, Re... | 5NiG9F8yaZ9KIsfk3TGAYQ | 5 | I am a seafood lover.. Not ever terribly picky... | 2014-09-17 23:16:45 | . business_nightlife_review.shape . (2129687, 14) . Save to a CSV file . name = &#39;business_nightlife_review.csv&#39; business_nightlife_review.to_csv(name, index= False) . . Market delimination . Read in data . df = pd.read_csv(&#39;data/nightlife_review.csv&#39;) . df.shape . (2129687, 15) . Look at the top of data set . df.head(10) . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date experience . 0 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | cSQnJ7JTY78ki5ai57kZ9A | 4 | 9.99 for a dozen raised is a Lil much the cake... | 2015-08-07 15:02:50 | 0 | . 1 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | 5_CoaRC22jwmuUzZwlRG_g | 1 | Dirty dinning list will not go here again sad ... | 2016-02-13 17:50:23 | 0 | . 2 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | 5_CoaRC22jwmuUzZwlRG_g | 5 | Just went here for a late night donut fix lol.... | 2015-09-29 06:18:47 | 0 | . 3 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | c5ebpS7ex6npffT9Nlvqvw | 1 | Would of given 0 stars if possible first impre... | 2015-11-10 18:55:53 | 0 | . 4 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | EXys-sSmm5auoqs6Jkyh7g | 5 | This is my first Yelp review. We just tried Mi... | 2016-01-25 02:26:47 | 0 | . 5 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | TPXPy309BrtLXbRorw3WKg | 2 | The second star is for the delicious apple fri... | 2015-09-19 18:22:09 | 0 | . 6 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | PNa8MaoGmptKej1K3hPVow | 2 | Ok service &amp; donuts. Bad boba(boba was hard an... | 2016-03-05 20:45:48 | 0 | . 7 DCsS3SgVFO56F6wRO_ewgA | Missy Donuts &amp; Coffee | Mesa | AZ | 85201 | 2.5 | 7 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;BusinessParking&#39;: &quot;{&#39;... | Donuts, Juice Bars &amp; Smoothies, Food, Coffee &amp;... | YEg0bICRG3o_MSNqbcIZaw | 2 | Update: Wow. I just read through Missy&#39;s healt... | 2016-03-08 15:43:15 | 0 | . 8 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 1 | . 9 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 1 | . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 2129687 entries, 0 to 2129686 Data columns (total 15 columns): # Column Dtype -- 0 business_id object 1 name object 2 city object 3 state object 4 postal_code object 5 stars float64 6 review_count int64 7 is_open int64 8 attributes object 9 categories object 10 user_id object 11 review_stars int64 12 text object 13 date object 14 experience int64 dtypes: float64(1), int64(4), object(10) memory usage: 243.7+ MB . Create supply and demand proxies &amp; pandas data frame . supply = pd.DataFrame(df.groupby(&#39;city&#39;).name.nunique().sort_values(ascending= False)) . supply.columns = [&#39;supply&#39;] . supply.head() . supply . city . Las Vegas 3080 | . Toronto 2755 | . Phoenix 1449 | . Montréal 1166 | . Charlotte 1093 | . demand = pd.DataFrame(df.groupby(&#39;city&#39;).size().sort_values(ascending= False)) . demand.columns = [&#39;demand&#39;] . demand.head() . demand . city . Las Vegas 727107 | . Phoenix 211114 | . Toronto 156352 | . Scottsdale 141971 | . Charlotte 120033 | . df_dem_sup = supply.merge(demand, on= &#39;city&#39;) . df_dem_sup.head() . supply demand . city . Las Vegas 3080 | 727107 | . Toronto 2755 | 156352 | . Phoenix 1449 | 211114 | . Montréal 1166 | 38870 | . Charlotte 1093 | 120033 | . Calculate market saturation and save it in column . df_dem_sup[&#39;market_saturation&#39;] = df_dem_sup.supply / df_dem_sup.demand * 100 . Sort the dataframe entries by market saturation (ascending) . df_dem_sup = df_dem_sup[(df_dem_sup.demand &gt; 5000)] . df_dem_sup = df_dem_sup.sort_values(by= &#39;market_saturation&#39;) . df_dem_sup.shape . (28, 3) . df_dem_sup.head(20) . supply demand market_saturation . city . Las Vegas 3080 | 727107 | 0.423597 | . Henderson 328 | 53926 | 0.608241 | . Scottsdale 866 | 141971 | 0.609984 | . Gilbert 208 | 31056 | 0.669758 | . Phoenix 1449 | 211114 | 0.686359 | . Chandler 337 | 47316 | 0.712233 | . Goodyear 67 | 9083 | 0.737642 | . Tempe 418 | 55787 | 0.749279 | . Peoria 137 | 16001 | 0.856196 | . Charlotte 1093 | 120033 | 0.910583 | . Surprise 84 | 8546 | 0.982916 | . North Las Vegas 102 | 10260 | 0.994152 | . Huntersville 61 | 6004 | 1.015989 | . Mesa 367 | 35609 | 1.030638 | . Glendale 286 | 26991 | 1.059612 | . Pittsburgh 985 | 82639 | 1.191931 | . Madison 482 | 37497 | 1.285436 | . Cleveland 637 | 48335 | 1.317886 | . Lakewood 114 | 8371 | 1.361844 | . Markham 191 | 12081 | 1.580995 | . Create visual summary of market saturation . plt.figure(figsize= (25, 15)) plt.title(&#39;20 LOWEST SATURATED MARKETS (LOWER IS BETTER)&#39;, fontdict= {&#39;fontsize&#39;: 24}) sns.barplot(df_dem_sup.market_saturation[:20], df_dem_sup.index[:20]) plt.ylabel(&#39;cities&#39;, fontdict= {&#39;fontsize&#39;: 18}) plt.xlabel(&#39;market saturation&#39;, rotation= 0, fontdict= {&#39;fontsize&#39;: 18}) plt.tick_params(labelsize= 16) plt.savefig(&#39;market_saturation.png&#39;) . Phoenix is the chosen city, as the market saturation is relatively low and there is a rather high demand present in the city. . phoenix = df[(df.city == &#39;Phoenix&#39;)] phoenix.head() . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date experience . 8 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 1 | . 9 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 1 | . 10 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | E9IJMZ2njmG1LOMmOhzeBg | 5 | Such a fun atmosphere!! Went there last night ... | 2019-01-12 21:25:24 | 1 | . 11 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 7KZhUr0i3K202Ux1-OGOhQ | 4 | This place is new and very close to us, so we ... | 2018-07-30 01:57:23 | 1 | . 12 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | UIKrJGEyTCWKaAvWDhLJug | 5 | This is exactly what this neighborhood needed.... | 2018-07-23 02:01:32 | 1 | . phoenix.shape . (211114, 15) . phoenix.isnull().sum() . business_id 0 name 0 city 0 state 0 postal_code 7 stars 0 review_count 0 is_open 0 attributes 106 categories 0 user_id 0 review_stars 0 text 0 date 0 experience 0 dtype: int64 . Save data set to CSV . name = &#39;data/phoenix_nightlife.csv&#39; phoenix.to_csv(name, index= False) . . Merge users phoenix. . Import JSON in chunk . path = &#39;data/yelp_academic_dataset_user.json&#39; . size = 1000000 . users = pd.read_json(path, lines= True, dtype= {&#39;user_id&#39;: str, &#39;name&#39;: str, &#39;review_count&#39;: int, &#39;yelping_since&#39;: str, &#39;friends&#39;: list, &#39;useful&#39;: int, &#39;funny&#39;: int, &#39;cool&#39;: int, &#39;fans&#39;: int, &#39;elite&#39;: list, &#39;avarage_stars&#39;: float, &#39;compliment_hot&#39;: int, &#39;comliment_more&#39;: int, &#39;compliment_profile&#39;: 42, &#39;compliment_cute&#39;: int, &#39;comliment_list&#39;: int, &#39;compliment_note&#39;: int, &#39;comliment_plain&#39;: int, &#39;compliment_cool&#39;: int, &#39;compliment_funny&#39;: int, &#39;compliment_writer&#39;: int, &#39;compliment_photos&#39;: int}, chunksize= size) . Import phoenix data set . phoenix = pd.read_csv(&#39;data/phoenix_nightlife.csv&#39;) . phoenix.shape . (211114, 15) . phoenix.head(3) . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date experience . 0 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 1 | . 1 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 1 | . 2 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | E9IJMZ2njmG1LOMmOhzeBg | 5 | Such a fun atmosphere!! Went there last night ... | 2019-01-12 21:25:24 | 1 | . Iterate through users and merge with phoenix data set . Rename review_count column in users. Review count column now refers to number of reviews for the specific business and num_review_written refers to the number of reviews written by that user. . chunk_list = [] for chunk_user in users: chunk_user = chunk_user.drop([&#39;name&#39;, &#39;yelping_since&#39;, &#39;funny&#39;, &#39;cool&#39;, &#39;fans&#39;, &#39;elite&#39;, &#39;compliment_hot&#39;, &#39;compliment_more&#39;, &#39;compliment_profile&#39;, &#39;compliment_cute&#39;, &#39;compliment_list&#39;, &#39;compliment_note&#39;, &#39;compliment_plain&#39;, &#39;compliment_cool&#39;, &#39;compliment_funny&#39;, &#39;compliment_writer&#39;, &#39;compliment_photos&#39;], axis= 1) chunk_user = chunk_user.rename(columns= {&#39;review_count&#39;: &#39;num_reviews_written&#39;}) chunk_merged = pd.merge(phoenix, chunk_user, on= &#39;user_id&#39;, how= &#39;inner&#39;) print(f&quot;{chunk_merged.shape[0]} out of {size:,} related users.&quot;) chunk_list.append(chunk_merged) . 180426 out of 1,000,000 related users. 30688 out of 1,000,000 related users. . Concatenate data frame &quot;pieces&quot; into one data frame. . phoenix_nightlife_user = pd.concat(chunk_list, ignore_index= True, join= &#39;outer&#39;, axis= 0) . phoenix_nightlife_user.shape . (211114, 19) . phoenix_nightlife_user.head(3) . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date experience num_reviews_written useful friends average_stars . 0 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 1 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | . 1 ku9ak9cQnIGBCXBtRd61tQ | Spoke &amp; Wheel - Phoenix | Phoenix | AZ | 85020.0 | 4.0 | 357 | 1 | {&#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;, &#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;... | Bars, Beer, Wine &amp; Spirits, Sandwiches, Breakf... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | This is our favorite local spot! The wings are... | 2018-08-30 01:37:47 | 1 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | . 2 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 1 | 12 | 4 | p12DAvNJZ5szp8jP69NUbA, JdJ0b9QZKVrjv_nicDhABw... | 5.0 | . Create experience column, based on review star. . phoenix_nightlife_user = phoenix_nightlife_user.drop(&#39;experience&#39;, axis= 1) phoenix_nightlife_user.shape . (211114, 18) . Positive experience = 1, Negative experience = 0 . mappings = {1: 0, 2: 0, 3: 0, 4: 1, 5: 1} phoenix_nightlife_user[&#39;experience&#39;] = phoenix_nightlife_user.review_stars.map(mappings) phoenix_nightlife_user.experience.sample(5) . 27665 1 90276 1 5348 1 131733 1 160394 0 Name: experience, dtype: int64 . Visualize distribution of columns before removing outliers . plt.title(&#39;Distribution of avarage star ratings of users&#39;) plt.hist(phoenix_nightlife_user.average_stars); . plt.title(&#39;Distribution of number of reviews written per user&#39;) plt.yscale(&#39;log&#39;) plt.hist(phoenix_nightlife_user.num_reviews_written); . plt.title(&#39;Distribution of number of reviews per business&#39;) plt.hist(phoenix_nightlife_user.review_count); . Remove outliers . IQR = 75th percentile - 25th percentile (Q3 - Q1). Outlier (left tail) = 25th percentile - IQR 1.5. Outlier (right tail) = 75th percentile + IQR 1.5. . Calculate IQR for the columns we intend to &quot;clean&quot;. . IQR_stars = phoenix_nightlife_user.average_stars.quantile(0.75) - phoenix_nightlife_user.average_stars.quantile(0.25) IQR_num_rev_wri = phoenix_nightlife_user.num_reviews_written.quantile(0.75) - phoenix_nightlife_user.num_reviews_written.quantile(0.25) IQR_rev_count = phoenix_nightlife_user.review_count.quantile(0.75) - phoenix_nightlife_user.review_count.quantile(0.25) . Calculate thresholds for 3 variables to classify outliers. . outlier_stars = IQR_stars * 1.5 outlier_num_rev_wri = IQR_num_rev_wri * 1.5 outlier_rev_count = IQR_rev_count * 1.5 . Calculate Q1 and Q3 for 3 variables . Q1_stars = phoenix_nightlife_user.average_stars.quantile(0.25) Q3_stars = phoenix_nightlife_user.average_stars.quantile(0.75) Q1_num = phoenix_nightlife_user.num_reviews_written.quantile(0.25) Q3_num = phoenix_nightlife_user.num_reviews_written.quantile(0.75) Q1_rev = phoenix_nightlife_user.review_count.quantile(0.25) Q3_rev = phoenix_nightlife_user.review_count.quantile(0.75) . Create final data set, that contains businesses in Phoenix and their respective reviews, along with useful information about the user who gave said review. &quot;Outliers&quot; are removed from data set. . phoenix_nightlife_user = phoenix_nightlife_user[(phoenix_nightlife_user.average_stars &gt;= Q1_stars - outlier_stars) | (phoenix_nightlife_user.average_stars &lt;= Q3_stars + outlier_stars) &amp; (phoenix_nightlife_user.num_reviews_written &gt;= Q1_num - outlier_num_rev_wri) | (phoenix_nightlife_user.num_reviews_written &lt;= Q3_num + outlier_num_rev_wri) &amp; (phoenix_nightlife_user.review_count &gt;= Q1_rev - outlier_rev_count) | (phoenix_nightlife_user.review_count &lt;= Q3_rev + outlier_rev_count)] . phoenix_nightlife_user.shape . (211114, 19) . name = &#39;data/phoenix_users.csv&#39; phoenix_nightlife_user.to_csv(name, index= False) . Visualize distribution of columns after removing outliers . plt.title(&#39;Distribution of avarage star ratings of users&#39;) plt.hist(phoenix_nightlife_user.average_stars); . plt.title(&#39;Distribution of number of reviews written per user&#39;) plt.yscale(&#39;log&#39;) plt.hist(phoenix_nightlife_user.num_reviews_written); . plt.title(&#39;Distribution of number of reviews per business&#39;) plt.hist(phoenix_nightlife_user.review_count); . . Analysis . EDA - Exploratory Data Analysis . After the preprocessing of the data, we want to further explore the data and get a notion of the cahracteristics of the nightlife in Phoenix . Define data paths . path_phoenix_nightlife = &#39;/content/drive/MyDrive/DSBA_Project/yelp_dataset/phoenix_nightlife.csv&#39; . Load DataFrame . phoenix_nightlife = pd.read_csv(path_phoenix_nightlife) . phoenix_nightlife.head() . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date num_reviews_written useful friends average_stars experience . 0 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 1 ku9ak9cQnIGBCXBtRd61tQ | Spoke &amp; Wheel - Phoenix | Phoenix | AZ | 85020.0 | 4.0 | 357 | 1 | {&#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;, &#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;... | Bars, Beer, Wine &amp; Spirits, Sandwiches, Breakf... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | This is our favorite local spot! The wings are... | 2018-08-30 01:37:47 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 2 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 12 | 4 | p12DAvNJZ5szp8jP69NUbA, JdJ0b9QZKVrjv_nicDhABw... | 5.0 | 1 | . 3 0859wfd1BQHG46Zpwhc0ZQ | Oven + Vine | Phoenix | AZ | 85003.0 | 4.5 | 298 | 1 | {&#39;Caters&#39;: &#39;False&#39;, &#39;RestaurantsPriceRange2&#39;: ... | Restaurants, Pizza, American (New), Nightlife,... | MeLrLNf-aoz9niUmRMmb9g | 5 | My wife and our friends went to this restauran... | 2018-08-15 16:15:58 | 12 | 4 | p12DAvNJZ5szp8jP69NUbA, JdJ0b9QZKVrjv_nicDhABw... | 5.0 | 1 | . 4 PQicuLOZ3uNJKn4PtayjlQ | Shake Shack | Phoenix | AZ | 85012.0 | 3.5 | 440 | 1 | {&#39;WheelchairAccessible&#39;: &#39;True&#39;, &#39;BestNights&#39;:... | Fast Food, Restaurants, Burgers, Bars, Beer Ba... | MeLrLNf-aoz9niUmRMmb9g | 5 | So first time at shake shack. I ordered a Dou... | 2018-08-17 22:23:49 | 12 | 4 | p12DAvNJZ5szp8jP69NUbA, JdJ0b9QZKVrjv_nicDhABw... | 5.0 | 1 | . len(phoenix_nightlife) . 211114 . . Businesses with the highest and lowest average score . We start of by getting an overview of the top positive and negative ratings for the nightlife businesses in Phoenix . . star_rating = phoenix_nightlife.groupby([&#39;business_id&#39;, &#39;name&#39;, &#39;city&#39;, &#39;review_count&#39;])[&#39;stars&#39;].mean() star_rating = pd.DataFrame(star_rating).sort_values(by=[&#39;stars&#39;, &#39;review_count&#39;], ascending = [False, False]) star_rating.reset_index(inplace=True) star_rating . business_id name city review_count stars . 0 Xg5qEQiB-7L6kGJ5F4K3bQ | Little Miss BBQ | Phoenix | 2329 | 5.0 | . 1 zJ__js7-Cx_wU4GhdBdeRA | The Refuge Coffee &amp; Wine | Phoenix | 163 | 5.0 | . 2 eZqoDfBg-xOS8WdcZCYM2A | JL Smokehouse | Phoenix | 146 | 5.0 | . 3 O4kYogia0fbF85pCX10XiA | Koi Poke - Arcadia | Phoenix | 144 | 5.0 | . 4 fHKvkiSHuUYM10Z7KqBrbQ | ILLEET Entertainment | Phoenix | 124 | 5.0 | . ... ... | ... | ... | ... | ... | . 1587 ZhLDShf9HUHM6wr318fcog | Spirit Expeditions | Phoenix | 7 | 1.0 | . 1588 Oajq77cR9YXbYJT3l2c74Q | Empire Beauty School | Phoenix | 5 | 1.0 | . 1589 YQvqlA-klSRHKVxQc1_4Ew | Callahans Bar &amp; Grill | Phoenix | 5 | 1.0 | . 1590 z0ztEHnv9YLFsZ8KEN7LKA | Liquid Velvet Smoke Shop | Phoenix | 4 | 1.0 | . 1591 yvFSKXYIey7H9WdcHig2cA | Silverado Canta Bar | Phoenix | 3 | 1.0 | . 1592 rows × 5 columns . In the above table, we get an overview of the higest and lowest rated businesses and their resepctive review counts. In order to make our analysis more valid, we only want to consider businesses with above 1000 reviews for assessing the top rated businesses. It is very likely that a businesses with 5 stars rating and the highest amount of reviews are favoured by more visitors compared to a business with 5 star rating and relatively low amount of review counts. . Likewise, when assessing the worst performing businesses, we only want to consider the businesses with above 100 review counts. These businesses are constantly getting bad ratings compared to businesses with bad ratings, however, also low review counts. . By filtering out in such a way, we are able to select the businesses that are constantly performing at the higest and lowest level, which will give the foundation for building the perfect business concept in Phoenix. . star_rating_skimmed = star_rating[star_rating.review_count &gt;= 1000] star_rating_skimmed . business_id name city review_count stars . 0 Xg5qEQiB-7L6kGJ5F4K3bQ | Little Miss BBQ | Phoenix | 2329 | 5.0 | . 121 VyVIneSU7XAWgMBllI6LnQ | Bobby Q | Phoenix | 3302 | 4.5 | . 122 S-oLPRdhlyL5HAknBKTUcQ | Harumi Sushi | Phoenix | 1342 | 4.5 | . 123 u-SJ5QUwrNquL9VnXwl8cg | Postino Arcadia | Phoenix | 1307 | 4.5 | . 124 ZCzey5aPhd7jYIoHsUfjmQ | The Clever Koi | Phoenix | 1221 | 4.5 | . 125 ukCTLs6T8LY1eUBXiAlmCg | Steak 44 | Phoenix | 1201 | 4.5 | . 126 FogTa-wmjhVnJCoTiaxvZA | Postino Central | Phoenix | 1137 | 4.5 | . 127 cTZmf7B-4yciMc1WKiCVOA | Welcome Diner | Phoenix | 1073 | 4.5 | . 430 yNPh5SO-7wr8HPpVCDPbXQ | The Arrogant Butcher | Phoenix | 2358 | 4.0 | . 431 OgJ0KxwJcJ9R5bUK0ixCbg | Lux Central | Phoenix | 2210 | 4.0 | . 432 frCxZS7lPhEnQRJ3UY6m7A | La Santisima Gourmet Taco Shop | Phoenix | 2152 | 4.0 | . 433 3C5Z9homtzkWHouH2BHXYQ | Taco Guild | Phoenix | 1887 | 4.0 | . 434 J07TDs6qnTIaxm48EL1cKQ | Hula&#39;s Modern Tiki | Phoenix | 1235 | 4.0 | . 435 cTJjTKz2huGZ-ElScC2pSw | Windsor | Phoenix | 1207 | 4.0 | . 436 Gz9SlLqxS6wnxPvgdOQNrA | Bitter &amp; Twisted Cocktail Parlour | Phoenix | 1180 | 4.0 | . 437 plWuv4gda7m0KlqCNhrb4w | Angels Trumpet Ale House | Phoenix | 1168 | 4.0 | . 438 fT6Uwl6abRQfiNgxre_qbg | Cherryblossom Noodle Cafe | Phoenix | 1136 | 4.0 | . 439 NJ0RzuWd5xDqfJejYQZ65g | Delux | Phoenix | 1066 | 4.0 | . 440 LHyj66waFlDcw9UToo27JQ | Angry Crab Shack | Phoenix | 1028 | 4.0 | . 441 PVTfzxu7of57zo1jZwEzkg | FEZ | Phoenix | 1028 | 4.0 | . sns.barplot(star_rating_skimmed.review_count[:20], star_rating_skimmed.name[:20], ci=None, hue=star_rating_skimmed.stars[:20]); plt.title(&#39;Top 20 nightlife businesses in Phoenix&#39;) plt.xscale(&#39;log&#39;) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. FutureWarning . star_rating_skimmed = star_rating[star_rating.review_count &gt;= 100] star_rating_skimmed = pd.DataFrame(star_rating_skimmed).sort_values(by=[&#39;stars&#39;, &#39;review_count&#39;], ascending = [True, False]) star_rating_skimmed.head(20) . business_id name city review_count stars . 1530 k4qx8DacgRbM9vpVbWc3zA | Hooters | Phoenix | 237 | 2.0 | . 1531 5xCeuEI7Einoi5xYsNuDCQ | Applebee&#39;s Grill + Bar | Phoenix | 199 | 2.0 | . 1532 -0WegMt6Cy966qlDKhu6jA | Game Seven Grill | Phoenix | 119 | 2.0 | . 1533 U6eg7zI-0TosgVvmrOtlZg | Applebee&#39;s Grill + Bar | Phoenix | 115 | 2.0 | . 1534 YZeUH6zYS0dq5QHLYZhUnQ | Hooters | Phoenix | 106 | 2.0 | . 1421 YlwJYpBWa-oL0byTVPNKRQ | The Park | Phoenix | 397 | 2.5 | . 1422 W7Dt3b6H_pMIHfxn49Pkzg | Buffalo Wild Wings | Phoenix | 315 | 2.5 | . 1423 wERcL1KznuTgfltSKQt_jg | Zipps Sports Grill | Phoenix | 287 | 2.5 | . 1424 HTaA1mo9cB1dXMwfJC6yKg | Buffalo Wild Wings | Phoenix | 269 | 2.5 | . 1425 6FO2DTcN7zqFfl090zf12g | Humble Pie | Phoenix | 253 | 2.5 | . 1426 wJ84TZZTuT0EdLzPHt8RDw | Carlos O&#39;Brien&#39;s Mexican Restaurant | Phoenix | 213 | 2.5 | . 1427 JRo3APL5f4-TEkuI-SoDcA | Zipps Sports Grill | Phoenix | 198 | 2.5 | . 1428 EE_CKAAq7_oL7jfxmUKhuw | Applebee&#39;s Grill + Bar | Phoenix | 190 | 2.5 | . 1429 H1Mp8I2YuyBe8lFHnRk3iA | Brazilian Bull Steakhouse | Phoenix | 163 | 2.5 | . 1430 UX8xcfHhnRbgmUK1kXLYrQ | The Club at PHX | Phoenix | 158 | 2.5 | . 1431 kacZeom987POja3RwNUJpA | Gus&#39;s New York Pizza &amp; Bar | Phoenix | 149 | 2.5 | . 1432 0h5yI6np7weAVH0jsjHqPw | Humble Pie | Phoenix | 136 | 2.5 | . 1433 JlMYSLiLnpWiihmzZkQS-w | Olive Garden Italian Restaurant | Phoenix | 131 | 2.5 | . 1434 m3tNor-GTl-aAST5AmEqYA | Lin&#39;s Grand Buffet | Phoenix | 125 | 2.5 | . 1435 HVzH8CO3e1-tjr97cF_8LA | Catch 22 Sports Grill | Phoenix | 119 | 2.5 | . sns.barplot(star_rating_skimmed.review_count[:20], star_rating_skimmed.name[:20], ci=None, hue=star_rating_skimmed.stars[:20]); plt.title(&#39;Worst 20 nightlife businesses in Phoenix&#39;) plt.xscale(&#39;log&#39;) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. FutureWarning . We can conclude from the above two barplots that &#39;Little Miss BBQ&#39; has a significant review count, and still maintains to keep an average star rate at 5. On the contrary, one of the lowest performing entities which is interesting to look at is &#39;Hooters&#39; with a review count above 200, but remains as the worst performing business. These two companies will be used as case studies in the review insights chapter. . In the tabular tablefor worst performing businesses, Applebee&#39;s Grill + Bar shows up multiple times and these represent multiple entities in Phoenix, as these all have different business IDs. . . Most popular categories of nightlife in Phoenix . In this section, we want to explore which business concepts are the most popular in the nightlife of Phoenix . . In order to do this, we split the category column containing the various categories which a business belongs under into several rows. Now, the businesses occur in several rows with the respective category. In this way, we can count how mny reviews fall under each category. See below example with Spoke &amp; Wheel: . phoenix_top_cat = phoenix_nightlife.assign(categories = phoenix_nightlife.categories.str.split(&#39;, &#39;)).explode(&#39;categories&#39;) phoenix_top_cat = phoenix_top_cat[(phoenix_top_cat.categories != &#39;Bars&#39;) &amp; (phoenix_top_cat.categories != &#39;Nightlife&#39;)] phoenix_top_cat.head() . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date num_reviews_written useful friends average_stars experience . 0 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Arts &amp; Entertainment | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 0 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Music Venues | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 1 ku9ak9cQnIGBCXBtRd61tQ | Spoke &amp; Wheel - Phoenix | Phoenix | AZ | 85020.0 | 4.0 | 357 | 1 | {&#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;, &#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;... | Beer | 3i095Fnh08yC-Q3VY0KeHQ | 5 | This is our favorite local spot! The wings are... | 2018-08-30 01:37:47 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 1 ku9ak9cQnIGBCXBtRd61tQ | Spoke &amp; Wheel - Phoenix | Phoenix | AZ | 85020.0 | 4.0 | 357 | 1 | {&#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;, &#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;... | Wine &amp; Spirits | 3i095Fnh08yC-Q3VY0KeHQ | 5 | This is our favorite local spot! The wings are... | 2018-08-30 01:37:47 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 1 ku9ak9cQnIGBCXBtRd61tQ | Spoke &amp; Wheel - Phoenix | Phoenix | AZ | 85020.0 | 4.0 | 357 | 1 | {&#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;, &#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;... | Sandwiches | 3i095Fnh08yC-Q3VY0KeHQ | 5 | This is our favorite local spot! The wings are... | 2018-08-30 01:37:47 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . len(phoenix_top_cat) . 1421588 . The length of the DataFrame went from approx. 211K to 1,4 Million. Now, we only want businesses with above or equal to 10 reviews as.... . phoenix_weight = phoenix_top_cat[phoenix_top_cat.review_count &gt;= 10] print(&#39;The top 10 categories in Nightlife of Phoenix:&#39;) phoenix_weight.categories.value_counts()[:10] . The top 10 categories in Nightlife of Phoenix: . Restaurants 184396 American (New) 60183 Food 58267 American (Traditional) 46970 Breakfast &amp; Brunch 37741 Cocktail Bars 29090 Barbeque 25165 Wine Bars 24329 Sushi Bars 24198 Burgers 23502 Name: categories, dtype: int64 . Visualization = phoenix_weight.categories.value_counts()[:10] viz = pd.DataFrame(Visualization) plt.figure(figsize= (25, 15)) plt.style.use(&#39;ggplot&#39;) sns.barplot(viz.categories, viz.index) plt.title(&#39;The top 10 categories in Nightlife of Phoenix:&#39;, fontdict= {&#39;fontsize&#39;: 24}) plt.xlabel(&#39;Number of reviews&#39;, fontdict= {&#39;fontsize&#39;: 18}) plt.tick_params(labelsize= 16) plt.savefig(&#39;categories_nightlife.png&#39;) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. FutureWarning . From the above table, we can conclude that &#39;Restaurants&#39; is the most popular business concept that has been reviewed, specifically American (new) themed restaurants. Secondly, bars score highly, specifically cocktail bars are popular in Phoenix. . Assessing if experience has a significant effect on whether or not a business stays open . So how important are reviews for a business in Phoenix? Does it define whether a business will remain open or not? With these questions in mind, we want to test the probability that a business is closed based on experience . phoenix_weight.is_open.value_counts(normalize= True) . 1 0.867187 0 0.132813 Name: is_open, dtype: float64 . pd.crosstab(phoenix_weight.is_open, phoenix_weight.experience, normalize= True) . experience 0 1 . is_open . 0 0.045571 | 0.087242 | . 1 0.246586 | 0.620601 | . We want to compute a simple cross tabulation of the two factors, If a business is open and the overall experience. The return is a frequency table and here we can see that there is a significant proportion of positive experience for the businesses that closed down, compared to the negative experiences. Thus, there is a no correlation between the experience and whether the business stays open or not. . Review Insights . Positive experience . Read in Data . We use both kinds of vectorizer that sklearn offers and apply the SVD algorithm to both document term matrices to see if the outcome is similiar. We expect that the outcomes will be identical. . phoenix = pd.read_csv(&#39;data/phoenix_users.csv&#39;) phoenix_pos = phoenix[phoenix.experience == 1] . . phoenix_pos.head(3) . . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date num_reviews_written useful friends average_stars experience . 0 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 1 ku9ak9cQnIGBCXBtRd61tQ | Spoke &amp; Wheel - Phoenix | Phoenix | AZ | 85020.0 | 4.0 | 357 | 1 | {&#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;, &#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;... | Bars, Beer, Wine &amp; Spirits, Sandwiches, Breakf... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | This is our favorite local spot! The wings are... | 2018-08-30 01:37:47 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 2 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 12 | 4 | p12DAvNJZ5szp8jP69NUbA, JdJ0b9QZKVrjv_nicDhABw... | 5.0 | 1 | . phoenix_pos.shape . . (148737, 19) . Pick n = 5000 random sample, to save memory. Simple Random Sample assumption. . text = phoenix_pos.text.sample(5000, random_state= 42) . . Create bag-of-words (discrete) representation of reviews . c_vectorizer = TfidfVectorizer(stop_words= &#39;english&#39;) dtm_c = c_vectorizer.fit_transform(text).toarray() vocab_c = np.array(c_vectorizer.get_feature_names()) tf_vectorizer = CountVectorizer(stop_words= &#39;english&#39;) dtm_t = tf_vectorizer.fit_transform(text).todense() vocab_t = np.array(tf_vectorizer.get_feature_names()) # Check shape of document term matrix print(f&#39;The shape of the document term matrix is : {dtm_c.shape} and the number of tokens in the vocabulary is : {len(vocab_c)}.&#39;) dtm_c.shape == dtm_t.shape . . The shape of the document term matrix is : (5000, 14689) and the number of tokens in the vocabulary is : 14689. . True . # helper function def show_topics(V, vocab): top_words = lambda x: [vocab[i] for i in np.argsort(x)[:-num_top_words-1:-1]] topic_words = ([top_words(x) for x in V]) return [&#39; &#39;.join(x) for x in topic_words] . . Singular Value Decomposition (randomized in order to enhance speed) . d = 5 # number of topics num_top_words = 10 # number of top words U_c, s_c, Vh_c = utils.extmath.randomized_svd(dtm_c, d, random_state= 42) U_t, s_t, Vh_t = utils.extmath.randomized_svd(dtm_c, d, random_state= 42) . . show_topics(Vh_c, vocab_c) . . [&#39;great food place good service love time amazing best friendly&#39;, &#39;great food service atmosphere awesome amazing recommend drinks love place&#39;, &#39;sushi hour happy roll rolls fresh rice love price fish&#39;, &#39;service bbq food amazing brisket ribs delicious pork excellent best&#39;, &#39;love place best bbq friendly staff coffee amazing brisket ve&#39;] . show_topics(Vh_t, vocab_t) . . [&#39;great food place good service love time amazing best friendly&#39;, &#39;great food service atmosphere awesome amazing recommend drinks love place&#39;, &#39;sushi hour happy roll rolls fresh rice love price fish&#39;, &#39;service bbq food amazing brisket ribs delicious pork excellent best&#39;, &#39;love place best bbq friendly staff coffee amazing brisket ve&#39;] . Save top words into CSV . As they both produced the same outcome, we only save one list. . positive_top_topics = show_topics(Vh_t, vocab_t) name = &#39;data/positive_top_words.csv&#39; pd.Series(positive_top_topics).to_csv(name, index= False) . . Negative experience . Read in data . We use both kinds of vectorizer that sklearn offers and apply the SVD algorithm to both document term matrices to see if the outcome is similiar. We expect that the outcomes will be identical. . phoenix = pd.read_csv(&#39;data/phoenix_users.csv&#39;) phoenix_neg = phoenix[phoenix.experience == 0] phoenix_neg.head(3) . . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date num_reviews_written useful friends average_stars experience . 7 AueEbb9kao4lt6CYt06hqw | Okra Cookhouse &amp; Cocktails | Phoenix | AZ | 85014.0 | 4.0 | 227 | 0 | {&#39;Music&#39;: &quot;{&#39;dj&#39;: False}&quot;, &#39;RestaurantsDeliver... | Italian, Restaurants, Nightlife, American (New... | 7KZhUr0i3K202Ux1-OGOhQ | 2 | Good things: service was excellent and locatio... | 2016-01-26 00:08:15 | 69 | 90 | TBALUD-0FdJ6oGPqyCM8tQ, 6j_nmp1O3blJhCRDGQ5UvQ... | 3.64 | 0 | . 9 YM-nYIHd99qUt9n62AxIAg | Carlos O&#39;Brien&#39;s Mexican Restaurant | Phoenix | AZ | 85020.0 | 3.5 | 284 | 1 | {&#39;GoodForKids&#39;: &#39;True&#39;, &#39;RestaurantsGoodForGro... | Restaurants, Mexican, Salad, Bars, Nightlife, ... | 7KZhUr0i3K202Ux1-OGOhQ | 1 | Sorry, but the food here is terrible and overp... | 2018-05-16 23:05:59 | 69 | 90 | TBALUD-0FdJ6oGPqyCM8tQ, 6j_nmp1O3blJhCRDGQ5UvQ... | 3.64 | 0 | . 15 042IHd5KjHiMuBtGtugO_g | OHSO Brewery - Paradise Valley | Phoenix | AZ | 85028.0 | 4.0 | 719 | 1 | {&#39;GoodForKids&#39;: &#39;True&#39;, &#39;HasTV&#39;: &#39;True&#39;, &#39;Cate... | Nightlife, Burgers, Gluten-Free, Bars, Breakfa... | 7KZhUr0i3K202Ux1-OGOhQ | 3 | I was so excited about this place opening, and... | 2015-03-27 19:25:31 | 69 | 90 | TBALUD-0FdJ6oGPqyCM8tQ, 6j_nmp1O3blJhCRDGQ5UvQ... | 3.64 | 0 | . phoenix_neg.shape . . (62377, 19) . Pick n = 5000 random sample, to save memory. Simple Random Sample assumption. . text = phoenix_neg.text.sample(5000, random_state= 42) . . Create bag-of-words (discrete) representation of reviews . c_vectorizer = TfidfVectorizer(stop_words= &#39;english&#39;) dtm_c = c_vectorizer.fit_transform(text).toarray() vocab_c = np.array(c_vectorizer.get_feature_names()) tf_vectorizer = CountVectorizer(stop_words= &#39;english&#39;) dtm_t = tf_vectorizer.fit_transform(text).todense() vocab_t = np.array(tf_vectorizer.get_feature_names()) # Check shape of document term matrix print(f&#39;The shape of the document term matrix is : {dtm_c.shape} and the number of tokens in the vocabulary is : {len(vocab_c)}.&#39;) dtm_c.shape == dtm_t.shape . . The shape of the document term matrix is : (5000, 16930) and the number of tokens in the vocabulary is : 16930. . True . # helper function def show_topics(V, vocab): top_words = lambda x: [vocab[i] for i in np.argsort(x)[:-num_top_words-1:-1]] topic_words = ([top_words(x) for x in V]) return [&#39; &#39;.join(x) for x in topic_words] . . Singular Value Decomposition (randomized in order to enhance speed) . d = 5 # number of topics num_top_words = 10 # number of top words U_c, s_c, Vh_c = utils.extmath.randomized_svd(dtm_c, d, random_state= 42) U_t, s_t, Vh_t = utils.extmath.randomized_svd(dtm_c, d, random_state= 42) . . show_topics(Vh_c, vocab_c) . . [&#39;food good place service just like time order great ordered&#39;, &#39;minutes waited order table asked said manager took told service&#39;, &#39;place bar service sushi great food good beer staff music&#39;, &#39;sushi roll rolls fish rice tuna fresh order ramen california&#39;, &#39;food service good slow great cold minutes took waited terrible&#39;] . show_topics(Vh_t, vocab_t) . . [&#39;food good place service just like time order great ordered&#39;, &#39;minutes waited order table asked said manager took told service&#39;, &#39;place bar service sushi great food good beer staff music&#39;, &#39;sushi roll rolls fish rice tuna fresh order ramen california&#39;, &#39;food service good slow great cold minutes took waited terrible&#39;] . Save top words into CSV . As they both produced the same outcome, we only save one list. . negative_top_topics = show_topics(Vh_t, vocab_t) name = &#39;data/negative_top_words.csv&#39; pd.Series(negative_top_topics).to_csv(name, index= False) . . 1-5 stars . Use the TfidfVectorizer and apply the NMF algorithm to the document term matrix. Create a different document term matrix for each review stars to see if we can &quot;pick up&quot; some differences among the different reviews. . Read in data set . phoenix = pd.read_csv(&#39;data/phoenix_users.csv&#39;) phoenix_1 = phoenix[phoenix.review_stars == 1] phoenix_2 = phoenix[phoenix.review_stars == 2] phoenix_3 = phoenix[phoenix.review_stars == 3] phoenix_4 = phoenix[phoenix.review_stars == 4] phoenix_5 = phoenix[phoenix.review_stars == 5] . . phoenix_1.head(3) . . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date num_reviews_written useful friends average_stars experience . 9 YM-nYIHd99qUt9n62AxIAg | Carlos O&#39;Brien&#39;s Mexican Restaurant | Phoenix | AZ | 85020.0 | 3.5 | 284 | 1 | {&#39;GoodForKids&#39;: &#39;True&#39;, &#39;RestaurantsGoodForGro... | Restaurants, Mexican, Salad, Bars, Nightlife, ... | 7KZhUr0i3K202Ux1-OGOhQ | 1 | Sorry, but the food here is terrible and overp... | 2018-05-16 23:05:59 | 69 | 90 | TBALUD-0FdJ6oGPqyCM8tQ, 6j_nmp1O3blJhCRDGQ5UvQ... | 3.64 | 0 | . 44 BOD0yRkakyxXzJmbVVAxSA | Camp Social | Phoenix | AZ | 85014.0 | 3.5 | 636 | 0 | {&#39;BikeParking&#39;: &#39;True&#39;, &#39;RestaurantsTakeOut&#39;: ... | Restaurants, Bars, Nightlife, American (Tradit... | osIsgYzdCKDvEv0ddrrzMw | 1 | Came back on Friday night and noticed signific... | 2017-07-10 16:16:14 | 13 | 4 | OvxcsyUSl9d0mXweVBqRAQ, bCgVzrbeVe6zM_p_X7e-mA... | 2.60 | 0 | . 61 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | Zs6AfhzLlQ-YzWrVWr8-bA | 1 | Chemical spill! I had just paid $12 for a $9 7... | 2019-05-14 04:43:48 | 35 | 33 | None | 2.86 | 0 | . Pick n = 5000 random sample, to save memory. Simple Random Sample assumption. . text_1 = phoenix_1.text.sample(5000, random_state= 42) text_2 = phoenix_2.text.sample(5000, random_state= 42) text_3 = phoenix_3.text.sample(5000, random_state= 42) text_4 = phoenix_4.text.sample(5000, random_state= 42) text_5 = phoenix_5.text.sample(5000, random_state= 42) . . Create bag-of-words (discrete) representation of reviews . vectorizer1 = TfidfVectorizer(stop_words= &#39;english&#39;) dtm_1 = vectorizer1.fit_transform(text_1).toarray() vocab_1 = np.array(vectorizer1.get_feature_names()) vectorizer2 = TfidfVectorizer(stop_words= &#39;english&#39;) dtm_2 = vectorizer2.fit_transform(text_2).toarray() vocab_2 = np.array(vectorizer2.get_feature_names()) vectorizer3 = TfidfVectorizer(stop_words= &#39;english&#39;) dtm_3 = vectorizer3.fit_transform(text_3).toarray() vocab_3 = np.array(vectorizer3.get_feature_names()) vectorizer4 = TfidfVectorizer(stop_words= &#39;english&#39;) dtm_4 = vectorizer4.fit_transform(text_4).toarray() vocab_4 = np.array(vectorizer4.get_feature_names()) vectorizer5 = TfidfVectorizer(stop_words= &#39;english&#39;) dtm_5 = vectorizer5.fit_transform(text_5).toarray() vocab_5 = np.array(vectorizer5.get_feature_names()) . . # Check shape of document-term matrices dtm_1.shape, dtm_2.shape, dtm_3.shape, dtm_4.shape, dtm_5.shape . . ((5000, 16345), (5000, 16849), (5000, 16668), (5000, 16063), (5000, 13849)) . # Check length of vocabularies len(vocab_1), len(vocab_2), len(vocab_3), len(vocab_4), len(vocab_5) . . (16345, 16849, 16668, 16063, 13849) . # helper function def show_topics(H, vocab): top_words = lambda x: [vocab[i] for i in np.argsort(x)[:-num_top_words-1:-1]] topic_words = ([top_words(x) for x in H]) return [&#39; &#39;.join(x) for x in topic_words] . . Non-negative Matrix Factorization . d = 5 # number of topics num_top_words = 10 # number of top words nnmf_1 = decomposition.NMF(n_components= d, max_iter= 500, random_state= 42) W_1 = nnmf_1.fit_transform(dtm_1) H_1 = nnmf_1.components_ nnmf_2 = decomposition.NMF(n_components= d, max_iter= 500, random_state= 42) W_2 = nnmf_2.fit_transform(dtm_2) H_2 = nnmf_2.components_ nnmf_3 = decomposition.NMF(n_components= d, max_iter= 500, random_state= 42) W_3 = nnmf_3.fit_transform(dtm_3) H_3 = nnmf_3.components_ nnmf_4 = decomposition.NMF(n_components= d, max_iter= 500, random_state= 42) W_4 = nnmf_4.fit_transform(dtm_4) H_4 = nnmf_4.components_ nnmf_5 = decomposition.NMF(n_components= d, max_iter= 500, random_state= 42) W_5 = nnmf_5.fit_transform(dtm_5) H_5 = nnmf_5.components_ . . show_topics(H_1, vocab_1) . . [&#39;minutes order table came waited server asked 10 got seated&#39;, &#39;chicken ordered food like sushi good salad sauce tasted cheese&#39;, &#39;bar place people just don like bartender rude time said&#39;, &#39;service food horrible terrible worst place bad customer good time&#39;, &#39;hair cut haircut barber shop time cutting barbers fade didn&#39;] . show_topics(H_2, vocab_2) . . [&#39;minutes order table server came took asked time waitress got&#39;, &#39;chicken cheese ordered sauce bbq salad good fries sandwich burger&#39;, &#39;place bar like just really beer don people nice drinks&#39;, &#39;sushi roll rolls fish rice fresh quality happy hour sashimi&#39;, &#39;food service good slow great restaurant times horrible bad poor&#39;] . show_topics(H_3, vocab_3) . . [&#39;bar place beer like drinks happy hour nice music drink&#39;, &#39;chicken cheese good sauce burger bbq fries sandwich salad ordered&#39;, &#39;sushi roll rolls hour happy spicy rice fish tuna fresh&#39;, &#39;time minutes order table server came took didn asked got&#39;, &#39;food service good great ok atmosphere place really average slow&#39;] . show_topics(H_4, vocab_4) . . [&#39;place bar like beer night cool really fun music just&#39;, &#39;good chicken ordered burger cheese salad really bbq fries got&#39;, &#39;sushi roll rolls fresh place lunch tempura sashimi tuna spicy&#39;, &#39;great food good service atmosphere friendly staff place nice drinks&#39;, &#39;happy hour wings menu drinks great appetizers deals specials awesome&#39;] . show_topics(H_5, vocab_5) . . [&#39;love place bar friendly fun drinks staff favorite beer phoenix&#39;, &#39;good delicious really time ordered got definitely food like came&#39;, &#39;sushi roll hour happy rolls fresh good place prices best&#39;, &#39;great food service atmosphere excellent awesome recommend staff amazing friendly&#39;, &#39;bbq best brisket ve ribs pork amazing pulled wait worth&#39;] . Save top words into CSVs . one_top_topics = show_topics(H_1, vocab_1) two_top_topics = show_topics(H_2, vocab_2) three_top_topics = show_topics(H_3, vocab_3) four_top_topics = show_topics(H_4, vocab_4) five_top_topics = show_topics(H_5, vocab_5) name1 = &#39;data/one_top_words.csv&#39; pd.Series(one_top_topics).to_csv(name1, index= False) name2 = &#39;data/two_top_words.csv&#39; pd.Series(two_top_topics).to_csv(name2, index= False) name3 = &#39;data/three_top_words.csv&#39; pd.Series(three_top_topics).to_csv(name3, index= False) name4 = &#39;data/four_top_words.csv&#39; pd.Series(four_top_topics).to_csv(name4, index= False) name5 = &#39;data/five_top_words.csv&#39; pd.Series(five_top_topics).to_csv(name5, index= False) . . Wordcloud visualization of topics . Import data . # Import all CSVs at once as the process of creating wordcloud is the same for all CSVs five = pd.read_csv(&#39;data/five_top_words.csv&#39;) four = pd.read_csv(&#39;data/four_top_words.csv&#39;) three = pd.read_csv(&#39;data/three_top_words.csv&#39;) two = pd.read_csv(&#39;data/two_top_words.csv&#39;) one = pd.read_csv(&#39;data/one_top_words.csv&#39;) positive = pd.read_csv(&#39;data/positive_top_words.csv&#39;) negative = pd.read_csv(&#39;data/negative_top_words.csv&#39;) # Check shapes of data frames, to make sure import worked five.shape, four.shape, three.shape, two.shape, one.shape, positive.shape, negative.shape . . ((5, 1), (5, 1), (5, 1), (5, 1), (5, 1), (5, 1), (5, 1)) . # Rename the columns five.columns = [&#39;text&#39;] four.columns = [&#39;text&#39;] three.columns = [&#39;text&#39;] two.columns = [&#39;text&#39;] one.columns = [&#39;text&#39;] positive.columns = [&#39;text&#39;] negative.columns = [&#39;text&#39;] . . # Concatenate top topic words into string text_five = &quot; &quot;.join(a for a in five.text) text_four = &quot; &quot;.join(b for b in four.text) text_three = &quot; &quot;.join(c for c in three.text) text_two = &quot; &quot;.join(d for d in two.text) text_one = &quot; &quot;.join(e for e in one.text) text_positive = &quot; &quot;.join(f for f in positive.text) text_negative = &quot; &quot;.join(g for g in negative.text) . . Create word clouds . Wordcloud 1 stars . wc1 = WordCloud(max_font_size= 50, max_words= 40, background_color= &#39;white&#39;).generate(text_one) plt.figure(figsize=[20, 10]) plt.imshow(wc1, interpolation= &#39;bilinear&#39;) plt.axis(&#39;off&#39;) plt.show() . . # Save wordcloud wc1.to_file(&#39;pictures/one_star.png&#39;); . . Wordcloud 2 stars . wc2 = WordCloud(max_font_size= 50, max_words= 40, background_color= &#39;white&#39;).generate(text_two) plt.figure(figsize= [20, 10]) plt.imshow(wc2, interpolation= &#39;bilinear&#39;) plt.axis(&#39;off&#39;) plt.show() . . # Save wordcloud wc2.to_file(&#39;pictures/two_star.png&#39;); . . Wordcloud 3 stars . wc3 = WordCloud(max_font_size= 50, max_words= 40, background_color= &#39;white&#39;).generate(text_three) plt.figure(figsize= [20, 10]) plt.imshow(wc3, interpolation= &#39;bilinear&#39;) plt.axis(&#39;off&#39;) plt.show() . . # Save wordcloud wc3.to_file(&#39;pictures/three_star.png&#39;); . . Wordcloud 4 stars . wc4 = WordCloud(max_font_size= 50, max_words= 40, background_color= &#39;white&#39;).generate(text_four) plt.figure(figsize= [20, 10]) plt.imshow(wc4, interpolation= &#39;bilinear&#39;) plt.axis(&#39;off&#39;) plt.show() . . # Save wordcloud wc4.to_file(&#39;pictures/four_star.png&#39;); . . Wordcloud 5 stars . wc5 = WordCloud(max_font_size= 50, max_words= 40, background_color= &#39;white&#39;).generate(text_five) plt.figure(figsize= [20, 10]) plt.imshow(wc4, interpolation= &#39;bilinear&#39;) plt.axis(&#39;off&#39;) plt.show() . . # Save wordcloud wc5.to_file(&#39;pictures/five_star.png&#39;); . . Wordcloud positive experience . wc6 = WordCloud(max_font_size= 50, max_words= 40, background_color= &#39;white&#39;).generate(text_positive) plt.figure(figsize= [20, 10]) plt.imshow(wc4, interpolation= &#39;bilinear&#39;) plt.axis(&#39;off&#39;) plt.show() . . # Save wordcloud wc6.to_file(&#39;pictures/positive.png&#39;); . . Wordcloud negative experience . wc7 = WordCloud(max_font_size= 50, max_words= 40, background_color= &#39;white&#39;).generate(text_negative) plt.figure(figsize= [20, 10]) plt.imshow(wc4, interpolation= &#39;bilinear&#39;) plt.axis(&#39;off&#39;) plt.show() . . # Save wordcloud wc7.to_file(&#39;pictures/negative.png&#39;); . . Little Miss BBQ . Import data . df = pd.read_csv(&#39;data/phoenix_users.csv&#39;) df.head(3) . . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date num_reviews_written useful friends average_stars experience . 0 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 1 ku9ak9cQnIGBCXBtRd61tQ | Spoke &amp; Wheel - Phoenix | Phoenix | AZ | 85020.0 | 4.0 | 357 | 1 | {&#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;, &#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;... | Bars, Beer, Wine &amp; Spirits, Sandwiches, Breakf... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | This is our favorite local spot! The wings are... | 2018-08-30 01:37:47 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 2 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 12 | 4 | p12DAvNJZ5szp8jP69NUbA, JdJ0b9QZKVrjv_nicDhABw... | 5.0 | 1 | . # Subset data set little_miss = df[df.name == &#39;Little Miss BBQ&#39;] little_miss.head(3) . . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date num_reviews_written useful friends average_stars experience . 164 Xg5qEQiB-7L6kGJ5F4K3bQ | Little Miss BBQ | Phoenix | AZ | 85034.0 | 5.0 | 2329 | 1 | {&#39;RestaurantsDelivery&#39;: &#39;False&#39;, &#39;RestaurantsA... | Barbeque, Restaurants | ocB1WhramMTkICc5sZ1bUQ | 5 | Hands down the best bbq I&#39;ve had in my whole l... | 2016-07-08 19:00:46 | 371 | 658 | MfxdEmaH-0_ITpuXU4Hgzg, Jl3FZ3tPi0GpBIogfUNnPg... | 3.71 | 1 | . 888 Xg5qEQiB-7L6kGJ5F4K3bQ | Little Miss BBQ | Phoenix | AZ | 85034.0 | 5.0 | 2329 | 1 | {&#39;RestaurantsDelivery&#39;: &#39;False&#39;, &#39;RestaurantsA... | Barbeque, Restaurants | sTcYq6goD1Fa2WS9MSkSvQ | 5 | Holy mother of god why did it take me so long ... | 2017-11-07 18:22:17 | 841 | 3749 | B820kFgFc1HyTFIuMoWH-w, PMe-hl9fP2g074H4SAfIKA... | 3.62 | 1 | . 1155 Xg5qEQiB-7L6kGJ5F4K3bQ | Little Miss BBQ | Phoenix | AZ | 85034.0 | 5.0 | 2329 | 1 | {&#39;RestaurantsDelivery&#39;: &#39;False&#39;, &#39;RestaurantsA... | Barbeque, Restaurants | ZE67Ck4gWtJBAN95AKMyZg | 5 | I mean, does this place need another 5 star re... | 2016-03-02 18:00:31 | 32 | 105 | Hyli6YWc-0PxRAerObzZIQ, LIj_X_4luQAWf3i10Gx1OA... | 3.91 | 1 | . little_miss.shape . . (2387, 19) . Vectorize text . # get reviews text = little_miss.text # vectorize vectorizer = TfidfVectorizer(stop_words= &#39;english&#39;) dtm = vectorizer.fit_transform(text).toarray() vocab = np.array(vectorizer.get_feature_names()) # shape of dtm dtm.shape, len(vocab) . . ((2387, 7806), 7806) . # Helper function def show_topics(H, vocab): top_words = lambda x: [vocab[i] for i in np.argsort(x)[:-num_top_words-1:-1]] topic_words = ([top_words(x) for x in H]) return [&#39; &#39;.join(x) for x in topic_words] . . Matrix decomposition . d = 5 # number of topics num_top_words = 10 # number of top words nnmf = decomposition.NMF(n_components= d, max_iter= 500, random_state= 42) W = nnmf.fit_transform(dtm) H = nnmf.components_ . . show_topics(H, vocab) . . [&#39;line time got just people order good meat waiting parking&#39;, &#39;bbq best ve miss phoenix hands little texas place az&#39;, &#39;wait worth long line hour brisket amazing totally best definitely&#39;, &#39;brisket ribs pork grits fatty sausage pulled beans beef pie&#39;, &#39;great food service place friendly staff amazing awesome customer recommend&#39;] . Wordcloud . words = show_topics(H, vocab) # join list elements into one string text_little_miss = &quot; &quot;.join(a for a in words) wc = WordCloud(max_font_size= 50, max_words= 40, background_color= &#39;white&#39;).generate(text_little_miss) plt.figure(figsize=[20, 10]) plt.imshow(wc, interpolation= &#39;bilinear&#39;) plt.axis(&#39;off&#39;) plt.show() . . # Save wordcloud wc.to_file(&#39;pictures/little_miss_BBQ.png&#39;); . . Hooters . Import data . data = pd.read_csv(&#39;data/phoenix_users.csv&#39;) # Subset data set hooters = data[data.name == &#39;Hooters&#39;] hooters.head(3) . . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date num_reviews_written useful friends average_stars experience . 568 YZeUH6zYS0dq5QHLYZhUnQ | Hooters | Phoenix | AZ | 85035.0 | 2.0 | 106 | 1 | {&#39;NoiseLevel&#39;: &quot;&#39;very_loud&#39;&quot;, &#39;WiFi&#39;: &quot;&#39;no&#39;&quot;, ... | Nightlife, American (Traditional), Chicken Win... | zY4RR6kG0AgioqbgpXCsFg | 1 | I hate to give a one star, but this place need... | 2019-01-19 03:05:09 | 50 | 12 | Ar1JMNPrOA4lCj8RkjmWoQ, XpofMKrKlQhx1hXunBPIqA... | 3.85 | 0 | . 734 k4qx8DacgRbM9vpVbWc3zA | Hooters | Phoenix | AZ | 85004.0 | 2.0 | 237 | 1 | {&#39;RestaurantsDelivery&#39;: &#39;False&#39;, &#39;BusinessAcce... | Nightlife, Bars, Sports Bars, American (Tradit... | 8Aj0YKThtXkSuauONIzYfQ | 4 | This downtown Phoenix Hooters has become a com... | 2011-08-18 00:17:21 | 176 | 313 | QyXoqXAxOV2DLNPOZKuEIw, F6uSoMUXNssNTlNRzfjXYg... | 4.21 | 1 | . 1129 k4qx8DacgRbM9vpVbWc3zA | Hooters | Phoenix | AZ | 85004.0 | 2.0 | 237 | 1 | {&#39;RestaurantsDelivery&#39;: &#39;False&#39;, &#39;BusinessAcce... | Nightlife, Bars, Sports Bars, American (Tradit... | Z4jbHK1-U6pVfI6RfNUSow | 3 | After catching a movie, I tagged along with my... | 2018-05-24 23:02:41 | 37 | 32 | dlIugG_I6E3R6H35oDFC9w, _u_OiLc12aVBp9ckzKpvvg... | 3.73 | 0 | . Vectorize text . text = hooters.text # vectorize text vectorizer = TfidfVectorizer(stop_words= &#39;english&#39;) dtm = vectorizer.fit_transform(text).toarray() vocab = np.array(vectorizer.get_feature_names()) # check dtm and vocab size dtm.shape, len(vocab) . . ((478, 3683), 3683) . # Helper function def show_topics(H, vocab): top_words = lambda x: [vocab[i] for i in np.argsort(x)[:-num_top_words-1:-1]] topic_words = ([top_words(x) for x in H]) return [&#39; &#39;.join(x) for x in topic_words] . . Matrix decomposition . d = 5 # number of topics num_top_words = 10 # number of top words nnmf = decomposition.NMF(n_components= d, max_iter= 500, random_state= 42) W = nnmf.fit_transform(dtm) H = nnmf.components_ . . show_topics(H, vocab) . . [&#39;said manager asked just told came table tables wait did&#39;, &#39;wings chicken ordered fries got hot sauce like salad buffalo&#39;, &#39;great service atmosphere care server veronica job teams fish favorite&#39;, &#39;good hooters food beer girls cold service place pretty bad&#39;, &#39;minutes order waited service took food 20 worst waitress drinks&#39;] . Wordcloud . words = show_topics(H, vocab) # concatenate string elements into a string text_hooters = &quot; &quot;.join(a for a in words) wc = WordCloud(max_font_size= 50, max_words= 40, background_color= &#39;white&#39;).generate(text_hooters) plt.figure(figsize=[20, 10]) plt.imshow(wc, interpolation= &#39;bilinear&#39;) plt.axis(&#39;off&#39;) plt.show() . . # Save wordcloud wc.to_file(&#39;pictures/hooters.png&#39;); . . Summary of topic modeling . The outcome of the topic modeling corresponds to our intuition, that businesses would get bad reviewsif their staff was rude, the service took ages and the quality of the product was sub-optimal. Words, such as &quot;horrible&quot;, &quot;terrible&quot; and &quot;rude&quot; were found among the 1 star reviews, indicating, that potentially the staff was rude, as well as their overall experience was bad. The 2 star reviews contained words such as &quot;slow&quot; and &quot;hour&quot; which allows us to assume that the businesses were down-rated because of the speed of their service. Reviews from the 4, 5 star ranges seemed to highlight the fact, that the stuff was rather friendly, the product was fresh and good quality and the service was fast. The above described tendency was found in the positive vs negative experience topic modeling too. . As the business called &quot;Little Miss BBQ&quot; was the best performing business in Phoenix, we looked into their reviews to see what could cause their success. The outcome seems to be that their service is rather friendly and their food (especially their meat products) are praised for their tastiness. In order to get a more concrete view on what makes a business a &quot;worst performing one&quot;, we looked into &quot;Hooters&quot; as their rating is 2 and a large number of reviews agree on the aforementioned value. Their rating potentially can be explained by slow service and bad enough food. . Supervised Machine Learning . Read in data . phoenix_sentiment = pd.read_csv(&#39;data/phoenix_users.csv&#39;) phoenix_sentiment.head(3) . . business_id name city state postal_code stars review_count is_open attributes categories user_id review_stars text date num_reviews_written useful friends average_stars experience . 0 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | Our new favorite local spot. The owners are fa... | 2018-08-30 01:39:54 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 1 ku9ak9cQnIGBCXBtRd61tQ | Spoke &amp; Wheel - Phoenix | Phoenix | AZ | 85020.0 | 4.0 | 357 | 1 | {&#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;, &#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;... | Bars, Beer, Wine &amp; Spirits, Sandwiches, Breakf... | 3i095Fnh08yC-Q3VY0KeHQ | 5 | This is our favorite local spot! The wings are... | 2018-08-30 01:37:47 | 5 | 1 | qQ61hXIe8U8jPXBf4q81WA, 2qmYYG0qoa7RGxW4EvRwdA... | 4.2 | 1 | . 2 Mmd5WDFq9hHcQ3uClngGjQ | Irene&#39;s Tap Room | Phoenix | AZ | 85020.0 | 4.5 | 79 | 1 | {&#39;WiFi&#39;: &quot;u&#39;free&#39;&quot;, &#39;NoiseLevel&#39;: &quot;u&#39;average&#39;&quot;... | Bars, Arts &amp; Entertainment, Nightlife, Music V... | MeLrLNf-aoz9niUmRMmb9g | 5 | Stopped in at Irene&#39;s after work. This place ... | 2018-08-21 00:48:47 | 12 | 4 | p12DAvNJZ5szp8jP69NUbA, JdJ0b9QZKVrjv_nicDhABw... | 5.0 | 1 | . # Create X and y X = phoenix_sentiment.text y = phoenix_sentiment.experience X.shape, y.shape . . ((211114,), (211114,)) . # Split data set into training and testing set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.15, random_state= 42) X_train.shape, X_test.shape, y_train.shape, y_test.shape . . ((179446,), (31668,), (179446,), (31668,)) . Build pipeline . Pipeline allows us to combine preprocessing and modelling in one object . # vectorizer vectorizer = CountVectorizer(stop_words= &#39;english&#39;) # model classifier = MultinomialNB() # pipeline pipe = Pipeline([(&#39;vect&#39;, vectorizer), (&#39;class&#39;, classifier)]) . . RandomizedSearchCV . This is a method to search through the space of different combinations of hyper-parameters. We used the randomized method to decrease the amount of computation needed. Instead, we could hve used GridSearchCV, however, we would have had to search through 288 (6 4 6 * 2) parameter combination. The cost for less computation is a slight chance that RandomizedSearchCV does not find the global best hyper-parameter combination, however this is rather unlikely. . # dictionary of hyper parameter options params = {} params[&#39;vect__ngram_range&#39;] = [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)] params[&#39;vect__max_df&#39;] = [1.0, 0.99, 0.98, 0.97] params[&#39;class__alpha&#39;] = [1.0, 0.9, 0.8, 0.7, 0.6, 0.5] params[&#39;class__fit_prior&#39;] = [True, False] . . CV = RandomizedSearchCV(pipe, params, cv= 3, scoring= &#39;accuracy&#39;) CV.fit(X_train, y_train) . . RandomizedSearchCV(cv=3, estimator=Pipeline(steps=[(&#39;vect&#39;, CountVectorizer(stop_words=&#39;english&#39;)), (&#39;class&#39;, MultinomialNB())]), param_distributions={&#39;class__alpha&#39;: [1.0, 0.9, 0.8, 0.7, 0.6, 0.5], &#39;class__fit_prior&#39;: [True, False], &#39;vect__max_df&#39;: [1.0, 0.99, 0.98, 0.97], &#39;vect__ngram_range&#39;: [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]}, scoring=&#39;accuracy&#39;) . print(&#39;The best score and parameter combination is the following: &#39;) CV.best_score_, CV.best_params_ . . The best score and parameter combination is the following: . (0.8963253460872941, {&#39;vect__ngram_range&#39;: (1, 2), &#39;vect__max_df&#39;: 0.99, &#39;class__fit_prior&#39;: True, &#39;class__alpha&#39;: 0.7}) . Recreate best pipeline . # Build best performing vectorizer and model into a pipeline pipe_best = make_pipeline(CountVectorizer(stop_words= &#39;english&#39;, ngram_range= (1, 2), max_df= 0.99), MultinomialNB(alpha= 0.7)) # fit pipeline with training data pipe_best.fit(X_train, y_train) . . Pipeline(steps=[(&#39;countvectorizer&#39;, CountVectorizer(max_df=0.99, ngram_range=(1, 2), stop_words=&#39;english&#39;)), (&#39;multinomialnb&#39;, MultinomialNB(alpha=0.7))]) . Model Evaluation . Get baseline accuracy . # Get predictions for the test set y_pred = pipe_best.predict(X_test) phoenix_sentiment.experience.value_counts(normalize= True) . . 1 0.704534 0 0.295466 Name: experience, dtype: float64 . If we predict positive sentiment for all entries, we get it right 70% of the time. . Get accuracy of pipeline . metrics.accuracy_score(y_test, y_pred) . . 0.8983832259694329 . Confusion matrix . metrics.confusion_matrix(y_test, y_pred) . . array([[ 7015, 2401], [ 817, 21435]], dtype=int64) . confusion = metrics.confusion_matrix(y_test, y_pred) TP = confusion[1, 1] TN = confusion[0, 0] FP = confusion[0, 1] FN = confusion[1, 0] . . Sensitivity . TP / float(FN + TP) . . 0.963284199173108 . Specificity . TN / (TN + FP) . . 0.7450084961767205 . False positive rate . FP / float(TN + FP) . . 0.2549915038232795 . Precision . TP / float(TP + FP) . . 0.8992700117469374 . Save Model params . # Serialize best case pipeline joblib.dump(CV.best_estimator_, &#39;best_model.pkl&#39;) . . [&#39;best_model.pkl&#39;] . Summary of Supervised Machine Learning . We used the combination of pipelines and randomized search CV. According to our studies, this is a really powerful way to develop proficient models. Moreover, we decided to create a test set, that was only used for validation (not even used in grid search) in order to get the most unbiased estimate of accuracy. We used CountVectorizer to represent text numerically, as MultinomialNB may have problems working with non-integer values. We imagined that this model could be useful for businesses to keep track of the customers who provide a bad review and potentially, the business can follow up with that customer to improve their experience and as a consequence increase the busnibusiness&#39;s overall rating. An evaluation criterion for this specific use-case that should be as high as possible is the specifity, thus the business could reach out to the highest number of customers who had a potentially negative experience. .",
            "url": "https://achnito.github.io/DSBA/fastpages/jupyter/2020/11/26/Exam_Project-(1).html",
            "relUrl": "/fastpages/jupyter/2020/11/26/Exam_Project-(1).html",
            "date": " • Nov 26, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://achnito.github.io/DSBA/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://achnito.github.io/DSBA/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://achnito.github.io/DSBA/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}