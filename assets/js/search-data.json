{
  
    
        "post0": {
            "title": "Data Science for Business Applications",
            "content": "Pokemon - Assignment 1 . %%shell jupyter nbconvert --to html /content/M1_Assignment.ipynb . [NbConvertApp] Converting notebook /content/M1_Assignment.ipynb to html [NbConvertApp] Writing 1689830 bytes to /content/M1_Assignment.html . . from IPython.display import HTML HTML(&#39;&#39;&#39;&lt;script&gt; code_show=true; function code_toggle() { if (code_show){ $(&#39;div.input&#39;).hide(); } else { $(&#39;div.input&#39;).show(); } code_show = !code_show } $( document ).ready(code_toggle); &lt;/script&gt; &lt;form action=&quot;javascript:code_toggle()&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Click here to toggle on/off the raw code.&quot;&gt;&lt;/form&gt;&#39;&#39;&#39;) . Initialize . Imports . import pandas as pd #DataFrame awesomeness import numpy as np #Math library import matplotlib.pyplot as plt #Statistics Visualization Library import seaborn as sns #2nd Gen StatsViz! import plotly.express as px #Visualization tool! import sklearn.metrics as mt #Metrics - measure model performance #Data Preprocessing tools from sklearn.preprocessing import StandardScaler #transformsdata to having mean=0 &amp; std=1 from sklearn.preprocessing import MinMaxScaler #Dimensionality Reduction tools from sklearn.decomposition import PCA from sklearn.decomposition import nmf import umap as umap #Get ready to plot those umaps!! !pip install umap-learn[plot] import umap.plot #Something else I forgot sns.set(color_codes=True, rc={&#39;figure.figsize&#39;:(10,8)}) . Requirement already satisfied: umap-learn[plot] in /usr/local/lib/python3.6/dist-packages (0.4.6) Requirement already satisfied: scikit-learn&gt;=0.20 in /usr/local/lib/python3.6/dist-packages (from umap-learn[plot]) (0.22.2.post1) Requirement already satisfied: scipy&gt;=1.3.1 in /usr/local/lib/python3.6/dist-packages (from umap-learn[plot]) (1.4.1) Requirement already satisfied: numba!=0.47,&gt;=0.46 in /usr/local/lib/python3.6/dist-packages (from umap-learn[plot]) (0.48.0) Requirement already satisfied: numpy&gt;=1.17 in /usr/local/lib/python3.6/dist-packages (from umap-learn[plot]) (1.18.5) Requirement already satisfied: matplotlib; extra == &#34;plot&#34; in /usr/local/lib/python3.6/dist-packages (from umap-learn[plot]) (3.2.2) Requirement already satisfied: datashader; extra == &#34;plot&#34; in /usr/local/lib/python3.6/dist-packages (from umap-learn[plot]) (0.11.1) Requirement already satisfied: pandas; extra == &#34;plot&#34; in /usr/local/lib/python3.6/dist-packages (from umap-learn[plot]) (1.1.3) Requirement already satisfied: colorcet; extra == &#34;plot&#34; in /usr/local/lib/python3.6/dist-packages (from umap-learn[plot]) (2.0.2) Requirement already satisfied: bokeh; extra == &#34;plot&#34; in /usr/local/lib/python3.6/dist-packages (from umap-learn[plot]) (2.1.1) Requirement already satisfied: holoviews; extra == &#34;plot&#34; in /usr/local/lib/python3.6/dist-packages (from umap-learn[plot]) (1.13.4) Requirement already satisfied: joblib&gt;=0.11 in /usr/local/lib/python3.6/dist-packages (from scikit-learn&gt;=0.20-&gt;umap-learn[plot]) (0.17.0) Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from numba!=0.47,&gt;=0.46-&gt;umap-learn[plot]) (50.3.0) Requirement already satisfied: llvmlite&lt;0.32.0,&gt;=0.31.0dev0 in /usr/local/lib/python3.6/dist-packages (from numba!=0.47,&gt;=0.46-&gt;umap-learn[plot]) (0.31.0) Requirement already satisfied: cycler&gt;=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (0.10.0) Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,&gt;=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2.4.7) Requirement already satisfied: kiwisolver&gt;=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (1.2.0) Requirement already satisfied: python-dateutil&gt;=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2.8.1) Requirement already satisfied: dask[complete]&gt;=0.18.0 in /usr/local/lib/python3.6/dist-packages (from datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2.12.0) Requirement already satisfied: param&gt;=1.6.0 in /usr/local/lib/python3.6/dist-packages (from datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (1.9.3) Requirement already satisfied: datashape&gt;=0.5.1 in /usr/local/lib/python3.6/dist-packages (from datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (0.5.2) Requirement already satisfied: pillow&gt;=3.1.1 in /usr/local/lib/python3.6/dist-packages (from datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (7.0.0) Requirement already satisfied: toolz&gt;=0.7.4 in /usr/local/lib/python3.6/dist-packages (from datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (0.11.1) Requirement already satisfied: xarray&gt;=0.9.6 in /usr/local/lib/python3.6/dist-packages (from datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (0.15.1) Requirement already satisfied: pyct[cmd]==0.4.6 in /usr/local/lib/python3.6/dist-packages (from datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (0.4.6) Requirement already satisfied: pytz&gt;=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2018.9) Requirement already satisfied: Jinja2&gt;=2.7 in /usr/local/lib/python3.6/dist-packages (from bokeh; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2.11.2) Requirement already satisfied: packaging&gt;=16.8 in /usr/local/lib/python3.6/dist-packages (from bokeh; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (20.4) Requirement already satisfied: typing-extensions&gt;=3.7.4 in /usr/local/lib/python3.6/dist-packages (from bokeh; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (3.7.4.3) Requirement already satisfied: PyYAML&gt;=3.10 in /usr/local/lib/python3.6/dist-packages (from bokeh; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (3.13) Requirement already satisfied: tornado&gt;=5.1 in /usr/local/lib/python3.6/dist-packages (from bokeh; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (5.1.1) Requirement already satisfied: panel&gt;=0.8.0 in /usr/local/lib/python3.6/dist-packages (from holoviews; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (0.9.7) Requirement already satisfied: pyviz-comms&gt;=0.7.3 in /usr/local/lib/python3.6/dist-packages (from holoviews; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (0.7.6) Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from cycler&gt;=0.10-&gt;matplotlib; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (1.15.0) Requirement already satisfied: fsspec&gt;=0.6.0; extra == &#34;complete&#34; in /usr/local/lib/python3.6/dist-packages (from dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (0.8.4) Requirement already satisfied: distributed&gt;=2.0; extra == &#34;complete&#34; in /usr/local/lib/python3.6/dist-packages (from dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2.30.0) Requirement already satisfied: cloudpickle&gt;=0.2.1; extra == &#34;complete&#34; in /usr/local/lib/python3.6/dist-packages (from dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (1.3.0) Requirement already satisfied: partd&gt;=0.3.10; extra == &#34;complete&#34; in /usr/local/lib/python3.6/dist-packages (from dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (1.1.0) Requirement already satisfied: multipledispatch&gt;=0.4.7 in /usr/local/lib/python3.6/dist-packages (from datashape&gt;=0.5.1-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (0.6.0) Requirement already satisfied: requests; extra == &#34;cmd&#34; in /usr/local/lib/python3.6/dist-packages (from pyct[cmd]==0.4.6-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2.23.0) Requirement already satisfied: MarkupSafe&gt;=0.23 in /usr/local/lib/python3.6/dist-packages (from Jinja2&gt;=2.7-&gt;bokeh; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (1.1.1) Requirement already satisfied: tqdm in /usr/local/lib/python3.6/dist-packages (from panel&gt;=0.8.0-&gt;holoviews; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (4.41.1) Requirement already satisfied: markdown in /usr/local/lib/python3.6/dist-packages (from panel&gt;=0.8.0-&gt;holoviews; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (3.3.2) Requirement already satisfied: psutil&gt;=5.0 in /usr/local/lib/python3.6/dist-packages (from distributed&gt;=2.0; extra == &#34;complete&#34;-&gt;dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (5.4.8) Requirement already satisfied: zict&gt;=0.1.3 in /usr/local/lib/python3.6/dist-packages (from distributed&gt;=2.0; extra == &#34;complete&#34;-&gt;dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2.0.0) Requirement already satisfied: tblib&gt;=1.6.0 in /usr/local/lib/python3.6/dist-packages (from distributed&gt;=2.0; extra == &#34;complete&#34;-&gt;dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (1.7.0) Requirement already satisfied: msgpack&gt;=0.6.0 in /usr/local/lib/python3.6/dist-packages (from distributed&gt;=2.0; extra == &#34;complete&#34;-&gt;dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (1.0.0) Requirement already satisfied: contextvars; python_version &lt; &#34;3.7&#34; in /usr/local/lib/python3.6/dist-packages (from distributed&gt;=2.0; extra == &#34;complete&#34;-&gt;dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2.4) Requirement already satisfied: sortedcontainers!=2.0.0,!=2.0.1 in /usr/local/lib/python3.6/dist-packages (from distributed&gt;=2.0; extra == &#34;complete&#34;-&gt;dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2.2.2) Requirement already satisfied: click&gt;=6.6 in /usr/local/lib/python3.6/dist-packages (from distributed&gt;=2.0; extra == &#34;complete&#34;-&gt;dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (7.1.2) Requirement already satisfied: locket in /usr/local/lib/python3.6/dist-packages (from partd&gt;=0.3.10; extra == &#34;complete&#34;-&gt;dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (0.2.0) Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests; extra == &#34;cmd&#34;-&gt;pyct[cmd]==0.4.6-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (1.24.3) Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests; extra == &#34;cmd&#34;-&gt;pyct[cmd]==0.4.6-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2020.6.20) Requirement already satisfied: idna&lt;3,&gt;=2.5 in /usr/local/lib/python3.6/dist-packages (from requests; extra == &#34;cmd&#34;-&gt;pyct[cmd]==0.4.6-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2.10) Requirement already satisfied: chardet&lt;4,&gt;=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests; extra == &#34;cmd&#34;-&gt;pyct[cmd]==0.4.6-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (3.0.4) Requirement already satisfied: importlib-metadata; python_version &lt; &#34;3.8&#34; in /usr/local/lib/python3.6/dist-packages (from markdown-&gt;panel&gt;=0.8.0-&gt;holoviews; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (2.0.0) Requirement already satisfied: heapdict in /usr/local/lib/python3.6/dist-packages (from zict&gt;=0.1.3-&gt;distributed&gt;=2.0; extra == &#34;complete&#34;-&gt;dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (1.0.1) Requirement already satisfied: immutables&gt;=0.9 in /usr/local/lib/python3.6/dist-packages (from contextvars; python_version &lt; &#34;3.7&#34;-&gt;distributed&gt;=2.0; extra == &#34;complete&#34;-&gt;dask[complete]&gt;=0.18.0-&gt;datashader; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (0.14) Requirement already satisfied: zipp&gt;=0.5 in /usr/local/lib/python3.6/dist-packages (from importlib-metadata; python_version &lt; &#34;3.8&#34;-&gt;markdown-&gt;panel&gt;=0.8.0-&gt;holoviews; extra == &#34;plot&#34;-&gt;umap-learn[plot]) (3.3.1) . Get Data . pokemon_URL = &#39;https://sds-aau.github.io/SDS-master/00_data/pokemon.csv&#39; . pokemon = pd.read_csv(pokemon_URL) . Task 1 - Data Preprocessing . Give a brief overview of data, what variables are there, how are the variables scaled and variation of the data columns. . pokemon.head() . Number Name Type1 Type2 Total HitPoints Attack Defense SpecialAttack SpecialDefense Speed Generation Legendary . 0 1 | Bulbasaur | Grass | Poison | 318 | 45 | 49 | 49 | 65 | 65 | 45 | 1 | False | . 1 2 | Ivysaur | Grass | Poison | 405 | 60 | 62 | 63 | 80 | 80 | 60 | 1 | False | . 2 3 | Venusaur | Grass | Poison | 525 | 80 | 82 | 83 | 100 | 100 | 80 | 1 | False | . 3 3 | VenusaurMega Venusaur | Grass | Poison | 625 | 80 | 100 | 123 | 122 | 120 | 80 | 1 | False | . 4 4 | Charmander | Fire | NaN | 309 | 39 | 52 | 43 | 60 | 50 | 65 | 1 | False | . pokemon.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 800 entries, 0 to 799 Data columns (total 13 columns): # Column Non-Null Count Dtype -- -- 0 Number 800 non-null int64 1 Name 800 non-null object 2 Type1 800 non-null object 3 Type2 414 non-null object 4 Total 800 non-null int64 5 HitPoints 800 non-null int64 6 Attack 800 non-null int64 7 Defense 800 non-null int64 8 SpecialAttack 800 non-null int64 9 SpecialDefense 800 non-null int64 10 Speed 800 non-null int64 11 Generation 800 non-null int64 12 Legendary 800 non-null bool dtypes: bool(1), int64(9), object(3) memory usage: 75.9+ KB . We see that the data lists 800 Pokemons divided by 13 columns. . Data Types: . string: Name | categorical: Type1, Type2, Generation and Legendary | numerical: all other | . Note that some values in Type2 are missing. This indicates pokemon that does not have a second type. . Even though Generation and legendary data are numerical, we will work with them as if they were categorical. . Some change should be added: . Replace missing values in Type2 with &#39;None&#39; | Change Type1, Type2, Generation, and Legendary to category data. | Edit Name: Total and Legendary should be renamed to Total_Stats and Legendary_Status to avoid confusion. | Fixing data before further investigation . pokemon.Type2.fillna(&#39;None&#39;,inplace=True) #Set variables as categorical pokemon[&#39;Type1&#39;] = pokemon.Type1.astype(&#39;category&#39;) pokemon[&#39;Type2&#39;] = pokemon.Type2.astype(&#39;category&#39;) pokemon[&#39;Generation&#39;] = pokemon.Generation.astype(&#39;category&#39;) pokemon[&#39;Legendary&#39;] = pokemon.Legendary.astype(&#39;category&#39;) #Change name of column pokemon.rename(columns={&#39;Total&#39;: &#39;Total_Stats&#39;,&#39;Legendary&#39;:&#39;Legendary_Status&#39;}, inplace=True) . Inspect the data further . type1 = pokemon[&#39;Type1&#39;].value_counts() . type1 . Water 112 Normal 98 Grass 70 Bug 69 Psychic 57 Fire 52 Rock 44 Electric 44 Ground 32 Dragon 32 Ghost 32 Dark 31 Poison 28 Steel 27 Fighting 27 Ice 24 Fairy 17 Flying 4 Name: Type1, dtype: int64 . type2 = pokemon[&#39;Type2&#39;].value_counts() . type2 . None 386 Flying 97 Ground 35 Poison 34 Psychic 33 Fighting 26 Grass 25 Fairy 23 Steel 22 Dark 20 Dragon 18 Water 14 Ghost 14 Ice 14 Rock 14 Fire 12 Electric 6 Normal 4 Bug 3 Name: Type2, dtype: int64 . type_total = (type1+type2).sort_values(ascending=False) . type_total . Water 126.0 Normal 102.0 Flying 101.0 Grass 95.0 Psychic 90.0 Bug 72.0 Ground 67.0 Fire 64.0 Poison 62.0 Rock 58.0 Fighting 53.0 Dark 51.0 Electric 50.0 Dragon 50.0 Steel 49.0 Ghost 46.0 Fairy 40.0 Ice 38.0 None NaN dtype: float64 . pokemon[&#39;Legendary_Status&#39;].value_counts() . False 735 True 65 Name: Legendary_Status, dtype: int64 . pokemon.describe() . Number Total_Stats HitPoints Attack Defense SpecialAttack SpecialDefense Speed . count 800.000000 | 800.00000 | 800.000000 | 800.000000 | 800.000000 | 800.000000 | 800.000000 | 800.000000 | . mean 362.813750 | 435.10250 | 69.258750 | 79.001250 | 73.842500 | 72.820000 | 71.902500 | 68.277500 | . std 208.343798 | 119.96304 | 25.534669 | 32.457366 | 31.183501 | 32.722294 | 27.828916 | 29.060474 | . min 1.000000 | 180.00000 | 1.000000 | 5.000000 | 5.000000 | 10.000000 | 20.000000 | 5.000000 | . 25% 184.750000 | 330.00000 | 50.000000 | 55.000000 | 50.000000 | 49.750000 | 50.000000 | 45.000000 | . 50% 364.500000 | 450.00000 | 65.000000 | 75.000000 | 70.000000 | 65.000000 | 70.000000 | 65.000000 | . 75% 539.250000 | 515.00000 | 80.000000 | 100.000000 | 90.000000 | 95.000000 | 90.000000 | 90.000000 | . max 721.000000 | 780.00000 | 255.000000 | 190.000000 | 230.000000 | 194.000000 | 230.000000 | 180.000000 | . pokemon[pokemon.Legendary_Status == True].describe() . Number Total_Stats HitPoints Attack Defense SpecialAttack SpecialDefense Speed . count 65.000000 | 65.000000 | 65.000000 | 65.000000 | 65.000000 | 65.000000 | 65.000000 | 65.000000 | . mean 470.215385 | 637.384615 | 92.738462 | 116.676923 | 99.661538 | 122.184615 | 105.938462 | 100.184615 | . std 173.651095 | 60.937389 | 21.722164 | 30.348037 | 28.255131 | 31.104608 | 28.827004 | 22.952323 | . min 144.000000 | 580.000000 | 50.000000 | 50.000000 | 20.000000 | 50.000000 | 20.000000 | 50.000000 | . 25% 381.000000 | 580.000000 | 80.000000 | 100.000000 | 90.000000 | 100.000000 | 90.000000 | 90.000000 | . 50% 483.000000 | 600.000000 | 91.000000 | 110.000000 | 100.000000 | 120.000000 | 100.000000 | 100.000000 | . 75% 642.000000 | 680.000000 | 105.000000 | 131.000000 | 115.000000 | 150.000000 | 120.000000 | 110.000000 | . max 721.000000 | 780.000000 | 150.000000 | 190.000000 | 200.000000 | 194.000000 | 200.000000 | 180.000000 | . pokemon[pokemon.Legendary_Status == False].describe() . Number Total_Stats HitPoints Attack Defense SpecialAttack SpecialDefense Speed . count 735.000000 | 735.000000 | 735.000000 | 735.000000 | 735.000000 | 735.000000 | 735.000000 | 735.000000 | . mean 353.315646 | 417.213605 | 67.182313 | 75.669388 | 71.559184 | 68.454422 | 68.892517 | 65.455782 | . std 208.590419 | 106.760417 | 24.808849 | 30.490153 | 30.408194 | 29.091705 | 25.669310 | 27.843038 | . min 1.000000 | 180.000000 | 1.000000 | 5.000000 | 5.000000 | 10.000000 | 20.000000 | 5.000000 | . 25% 175.500000 | 324.000000 | 50.000000 | 54.500000 | 50.000000 | 45.000000 | 50.000000 | 45.000000 | . 50% 346.000000 | 425.000000 | 65.000000 | 72.000000 | 66.000000 | 65.000000 | 65.000000 | 64.000000 | . 75% 533.500000 | 498.000000 | 79.500000 | 95.000000 | 85.000000 | 85.000000 | 85.000000 | 85.000000 | . max 715.000000 | 700.000000 | 255.000000 | 185.000000 | 230.000000 | 175.000000 | 230.000000 | 160.000000 | . pokemon.sort_values(by=&#39;Total_Stats&#39;, ascending=False).head(10) . Number Name Type1 Type2 Total_Stats HitPoints Attack Defense SpecialAttack SpecialDefense Speed Generation Legendary_Status . 426 384 | RayquazaMega Rayquaza | Dragon | Flying | 780 | 105 | 180 | 100 | 180 | 100 | 115 | 3 | True | . 164 150 | MewtwoMega Mewtwo Y | Psychic | None | 780 | 106 | 150 | 70 | 194 | 120 | 140 | 1 | True | . 163 150 | MewtwoMega Mewtwo X | Psychic | Fighting | 780 | 106 | 190 | 100 | 154 | 100 | 130 | 1 | True | . 422 382 | KyogrePrimal Kyogre | Water | None | 770 | 100 | 150 | 90 | 180 | 160 | 90 | 3 | True | . 424 383 | GroudonPrimal Groudon | Ground | Fire | 770 | 100 | 180 | 160 | 150 | 90 | 90 | 3 | True | . 552 493 | Arceus | Normal | None | 720 | 120 | 120 | 120 | 120 | 120 | 120 | 4 | True | . 712 646 | KyuremWhite Kyurem | Dragon | Ice | 700 | 125 | 120 | 90 | 170 | 100 | 95 | 5 | True | . 711 646 | KyuremBlack Kyurem | Dragon | Ice | 700 | 125 | 170 | 100 | 120 | 90 | 95 | 5 | True | . 409 373 | SalamenceMega Salamence | Dragon | Flying | 700 | 95 | 145 | 130 | 120 | 90 | 120 | 3 | False | . 413 376 | MetagrossMega Metagross | Steel | Psychic | 700 | 80 | 145 | 150 | 105 | 110 | 110 | 3 | False | . pokemon.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 800 entries, 0 to 799 Data columns (total 13 columns): # Column Non-Null Count Dtype -- -- 0 Number 800 non-null int64 1 Name 800 non-null object 2 Type1 800 non-null category 3 Type2 800 non-null category 4 Total_Stats 800 non-null int64 5 HitPoints 800 non-null int64 6 Attack 800 non-null int64 7 Defense 800 non-null int64 8 SpecialAttack 800 non-null int64 9 SpecialDefense 800 non-null int64 10 Speed 800 non-null int64 11 Generation 800 non-null category 12 Legendary_Status 800 non-null category dtypes: category(4), int64(8), object(1) memory usage: 61.3+ KB . After some data preprocessing, we now have: . 4 categorical variables (Type1, Type2, Generation, and Legendary) | 8 numerical variables (Number, 6 different stats, and total stats) | . We find that all numerical values are normally distributed (mean and median are almost identical). . Types of pokemons . Water is the most common type , whilst Ice is the least common type. Water is seen 126 times, and Ice is only seen 38 times in the 800 observed pokemons. . Allmost half (386) of the pokemons do not have a Type2. . 65 pokemons are Legendary. . Pokemon Stats . The pokemon with the least amount of stats only has 180 total stat, while the pokemon with the most has 780. . Stats generally range from 1 to 255 and with a standard dev. of ~25-32 . Legendary Pokemons are generally higher in all stats. However, some normal pokemons are included in the top 10 most powerful pokemon (Total_Stats), just 80 points short from most powerful pokemon. . Side note: The most powerful normal pokemons tend to have &quot;Mega&quot; in their name. . Visualization of Pokemon Stats . pokemon_num = pokemon._get_numeric_data() #select all numeric values! . pokemon_num . Number Total_Stats HitPoints Attack Defense SpecialAttack SpecialDefense Speed . 0 1 | 318 | 45 | 49 | 49 | 65 | 65 | 45 | . 1 2 | 405 | 60 | 62 | 63 | 80 | 80 | 60 | . 2 3 | 525 | 80 | 82 | 83 | 100 | 100 | 80 | . 3 3 | 625 | 80 | 100 | 123 | 122 | 120 | 80 | . 4 4 | 309 | 39 | 52 | 43 | 60 | 50 | 65 | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 795 719 | 600 | 50 | 100 | 150 | 100 | 150 | 50 | . 796 719 | 700 | 50 | 160 | 110 | 160 | 110 | 110 | . 797 720 | 600 | 80 | 110 | 60 | 150 | 130 | 70 | . 798 720 | 680 | 80 | 160 | 60 | 170 | 130 | 80 | . 799 721 | 600 | 80 | 110 | 120 | 130 | 90 | 70 | . 800 rows × 8 columns . sns.pairplot( pokemon, vars = pokemon_num, hue = &#39;Legendary_Status&#39;, kind = &#39;reg&#39;, corner = True, plot_kws = {&#39;line_kws&#39;:{&#39;color&#39;:&#39;black&#39;}} ) . &lt;seaborn.axisgrid.PairGrid at 0x7f3dd9053f60&gt; . Task 2 - Scaling &amp; PCA Analysis . Execute a PCA analysis on all numerical variables in the dataset. Hint: Don&#39;t forget to scale them first. Use 4 components. What is the individuel and cumulative explained variance? . . Scale that bish! . Since the data appears to be normally distributed we apply the StandardScaler . scaler = StandardScaler() . scaled_pokemon = scaler.fit_transform(pokemon_num) . for i in range(8): #We use 8 here since there are 8 features (columns) sns.distplot(scaled_pokemon[:,i],hist=False) . /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). . Perform PCA on that nig! . pca = PCA(n_components=4) . pca_pokemon = pca.fit_transform(scaled_pokemon) . pca_shape = pca_pokemon.shape # 800 rows, 4 columns - As we wanted :-) . Investigate Principal Component Variance! . Now that we have performed a PCA reduction of the pokemon data, let&#39;s see how the components perform! . pca_variance = pca.explained_variance_ratio_ #lists the variance ratio of each component (how much of the data&#39;s variance does the component explain?) . pca_cumVar =np.cumsum(pca_variance) #calculate the cumulative variance ratio of the components . pd.DataFrame({&#39;variance ratio&#39;:pca_variance, &#39;cumulative variance ratio&#39;:pca_cumVar}) . variance ratio cumulative variance ratio . 0 0.466172 | 0.466172 | . 1 0.139397 | 0.605569 | . 2 0.120448 | 0.726018 | . 3 0.097013 | 0.823031 | . The individually explained variance for the principal components are 47, 14, 12 and 9%. Overall explained variance is 82%! . Visualize PCA on Legendary Status . Note, that we have taken away all categorical data. Let&#39;s see if the PCA can distinguish between pokemon generation and legendary status, using the provided data . Legendary! . . pca_labels = { str(i): f&quot;PC {i+1} ({var:.1f}%)&quot; for i, var in enumerate(pca_variance* 100) } . fig = px.scatter_matrix( pca_pokemon, # data to plot labels=pca_labels, dimensions=range(4), color=pokemon[&quot;Legendary_Status&quot;], title = &#39;PCA on numeric types, colored by Legendary Status&#39; #found it interesting to color by Legendary Status, as these may introduce different stats ) fig.update_traces(diagonal_visible=False) fig.show() . . . sns.scatterplot(pca_pokemon[:,0], pca_pokemon[:,1], hue = pokemon[&#39;Legendary_Status&#39;]) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f3dd207dc50&gt; . PC1 is generally good at explaining the legendary status of a pokemon. However, some overlapping occurs! . Generation! . fig = px.scatter_matrix( pca_pokemon, # data to plot labels=pca_labels, dimensions=range(4), #We only have 4 components color=pokemon[&quot;Generation&quot;], title = &#39;PCA on numeric types, colored by Generation&#39; #found it interesting to color by Generation, as these may introduce different stats ) fig.update_traces(diagonal_visible=False) fig.show() . . . sns.scatterplot(pca_pokemon[:,2], pca_pokemon[:,1], hue = pokemon[&#39;Generation&#39;]) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f3dd2071390&gt; . PC2 is surprisingly good at finding the hidden patterns of the generations in combination with PC3. . Overall PCA performs really well on the pokemon data! . Task 3 - UMAP / NMF . Use a different dimensionality reduction method (eg. UMAP/NMF) – do the findings differ? . Sidenote: UMAP (Uniform Manifold Approximation and Projection) and NMF (Non-negative matrix factorization) are non-linear algorithms. NMF is mostly used for text and imagery while UMAP is mostly used for visualization purposes. . In the case of the pokemon data, we find that most have a LINEAR relationship. Thus we can expect PCA to outperform both UMAP and NMF. . . UMAP . Let&#39;s try to UMAP a picachu! . umap_model = umap.UMAP() . umap_pokemon = umap_model.fit_transform(scaled_pokemon) . UMAP_shape = umap_pokemon.shape #Woah only 2 components! . viz that Biz! . to_plot = umap_model.fit(scaled_pokemon) . sns.scatterplot(umap_pokemon[:,0],umap_pokemon[:,1], hue= pokemon[&#39;Legendary_Status&#39;]) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f3dd20d3b70&gt; . umap.plot.points( to_plot, #data we want to plot theme=&#39;fire&#39; ) . *c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* &amp; *y*. Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points. . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f3dd136f3c8&gt; . hover_data = pd.DataFrame({&#39;index&#39;: np.arange(800), &#39;label&#39;:pokemon.Generation[:800]}) hover_data[&#39;item&#39;] = hover_data.label.map( { 1:&#39;1st Gen&#39;, 2:&#39;2nd Gen&#39;, 3:&#39;3rd Gen&#39;, 4:&#39;4th Gen&#39;, 5:&#39;5th Gen&#39;, 6:&#39;6th Gen&#39; } ) . hover_data . index label item . 0 0 | 1 | 1st Gen | . 1 1 | 1 | 1st Gen | . 2 2 | 1 | 1st Gen | . 3 3 | 1 | 1st Gen | . 4 4 | 1 | 1st Gen | . ... ... | ... | ... | . 795 795 | 6 | 6th Gen | . 796 796 | 6 | 6th Gen | . 797 797 | 6 | 6th Gen | . 798 798 | 6 | 6th Gen | . 799 799 | 6 | 6th Gen | . 800 rows × 3 columns . p = umap.plot.interactive(to_plot, labels=pokemon.Generation, hover_data=hover_data, point_size=2) umap.plot.show(p) . sns.scatterplot(umap_pokemon[:,0],umap_pokemon[:,1], hue= pokemon[&#39;Generation&#39;]) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fe12e5199e8&gt; . It appears that UMAP in this situation does a much worse job at finding the underlying pattern of the data. . Let&#39;s give NMF a shot . NMF . Very similar to PCA! However, since NMF only takes positive values, we need to rescale it using the MinMaxScaler . ##import Decomposition: NMF, ##Metrics: explained_variance_score ##Preprocessing: MinMaxScaler . Scale that bish! . scaler_min_max = MinMaxScaler() . minmax_pokemon = scaler_min_max.fit_transform(pokemon_num) # scale data to range from 0 to 1. Very useful since NMF only takes positive values . for i in range(8): #We use 8 here since there are 8 features (columns) sns.distplot(minmax_pokemon[:,i],hist=False) . /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). /usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots). . Perform NMF on that nig! . nmf_model = nmf.NMF(n_components=4) . nmf_pokemon = nmf_model.fit_transform(minmax_pokemon) . nmf_shape = nmf_pokemon.shape . def get_score(model, data, scorer=mt.explained_variance_score): &quot;&quot;&quot;Estimate performance of the model on the data&quot;&quot;&quot; model = model.fit(data) prediction = model.inverse_transform(model.transform(data)) #Transform data, then ... return scorer(data, prediction) # Will show how much of variance the model can recreate . PCA_score = get_score(pca,pokemon_num) . UMAP_score = get_score(umap_model, pokemon_num) . NMF_score = get_score(nmf_model, pokemon_num) . print(&#39;Shape of PCA: &#39;, pca_shape) print(&#39;Shape of UMAP: &#39;, umap_shape) print(&#39;Shape of NMF: &#39;, nmf_shape) print (&#39; &#39;) print(&#39;PCA Score &#39;,PCA_score) print(&#39;UMAP Score &#39;,UMAP_score) print(&#39;NMF Score &#39;,NMF_score) . fig = px.scatter_matrix( nmf_reduced_pokemon, #data to plot labels=pca_labels, dimensions=range(4), #We only have 4 components color=pokemon[&quot;Generation&quot;], title = &#39;NMF on numeric types, colored by Generation&#39; #found it interesting to color by Generation, as these may introduce different stats ) fig.update_traces(diagonal_visible=False) fig.show() . fig = px.scatter_matrix( nmf_reduced_pokemon, #data to plot labels=pca_labels, dimensions=range(4), #We only have 4 components color=pokemon[&quot;Legendary_Status&quot;], title = &#39;NMF on numeric types, colored by Generation&#39; #found it interesting to color by Generation, as these may introduce different stats ) fig.update_traces(diagonal_visible=False) fig.show() .",
            "url": "https://achnito.github.io/DSBA/fastpages/jupyter/2020/11/26/M1_Assignment.html",
            "relUrl": "/fastpages/jupyter/2020/11/26/M1_Assignment.html",
            "date": " • Nov 26, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://achnito.github.io/DSBA/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://achnito.github.io/DSBA/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://achnito.github.io/DSBA/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}